/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(1);
	var fabric = __webpack_require__(2);
	var utils = __webpack_require__(42);
	var form = __webpack_require__(43);
	var controller = __webpack_require__(44);
	var debugging = __webpack_require__(50);


	window.lotkavolterra = {
	  /**
	   * Create and run input-based simulation.
	   */
	  launchSimulation: function(params) {
	    // Make AJAX request for JSON input
	    var jsonURL = "/static/json/".concat(params.simulation);
	    $.ajax(jsonURL, {
	      type: "GET",
	      success: function(data) {
	        var luncheon = controller.initializeInputLuncheon({
	          data: data
	        });

	        var canvas = controller.drawLuncheon({
	          luncheon: luncheon,
	          showStats: params.showStats,
	          repeat: params.repeat,
	          noText: params.noText,
	          showSpecies: data.showSpecies,
	          showStage: data.showStage,
	          stageWidth: data.stageWidth,
	          stageHeight: data.stageHeight,
	          stageY: data.stageY
	        });

	        controller.runGeneration({
	          luncheon: luncheon,
	          canvas: canvas,
	          showStats: params.showStats,
	          numGenerations: params.generations,
	          repeat: params.repeat
	        });
	      }
	    });
	  },


	  /**
	   * Create and run test simulation.
	   */
	  launchTestSimulation: function(params) {
	    var luncheon = controller.initializeTestLuncheon({
	      simulation: params.simulation,
	      numSeats: params.seats
	    });

	    var canvas = controller.drawLuncheon({
	      luncheon: luncheon,
	      showStats: params.showStats,
	      repeat: params.repeat,
	      noText: params.noText,
	      showSpecies: true
	    });

	    controller.runGeneration({
	      luncheon: luncheon,
	      canvas: canvas,
	      showStats: params.showStats,
	      numGenerations: params.generations,
	      repeat: params.repeat
	    });
	  },


	  formInit: form.init,

	  getSearchParams: utils.getSearchParams,


	  /**
	   * Create and run D3 animation for debugging.
	   */
	  launchDebuggingAnimation: function(params) {
	    debugging.drawRandomCircles(params);
	    debugging.updateRadiiRandomly();
	  },

	  launchCanvasTest: function() {
	    $(document).ready(function() {
	      var canvas = new fabric.fabric.Canvas('canvas');
	      var rect = new fabric.fabric.Rect({
	        top: 100,
	        left: 100,
	        width: 100,
	        height: 100,
	        fill: 'green'
	      });
	      canvas.add(rect);
	    });
	  },

	  /**
	   * Draw a large version of the logo for this project.
	   */
	  drawLogo: function(params) {
	    controller.drawLogo();
	  }
	};


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v1.12.3
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-04-05T19:16Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var deletedIds = [];

	var document = window.document;

	var slice = deletedIds.slice;

	var concat = deletedIds.concat;

	var push = deletedIds.push;

	var indexOf = deletedIds.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "1.12.3",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1, IE<9
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: deletedIds.sort,
		splice: deletedIds.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var src, copyIsArray, copy, name, options, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		// See test/unit/core.js for details concerning isFunction.
		// Since version 1.3, DOM methods and functions like alert
		// aren't supported. They return false on IE (#2968).
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray || function( obj ) {
			return jQuery.type( obj ) === "array";
		},

		isWindow: function( obj ) {
			/* jshint eqeqeq: false */
			return obj != null && obj == obj.window;
		},

		isNumeric: function( obj ) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		isPlainObject: function( obj ) {
			var key;

			// Must be an Object.
			// Because of IE, we also have to check the presence of the constructor property.
			// Make sure that DOM nodes and window objects don't pass through, as well
			if ( !obj || jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			try {

				// Not own constructor property must be Object
				if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
					return false;
				}
			} catch ( e ) {

				// IE8,9 Will throw exceptions on certain host objects #9897
				return false;
			}

			// Support: IE<9
			// Handle iteration over inherited properties before own properties.
			if ( !support.ownFirst ) {
				for ( key in obj ) {
					return hasOwn.call( obj, key );
				}
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own.
			for ( key in obj ) {}

			return key === undefined || hasOwn.call( obj, key );
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Workarounds based on findings by Jim Driscoll
		// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
		globalEval: function( data ) {
			if ( data && jQuery.trim( data ) ) {

				// We use execScript on Internet Explorer
				// We use an anonymous function so that context is window
				// rather than jQuery in Firefox
				( window.execScript || function( data ) {
					window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation
				} )( data );
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1, IE<9
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			var len;

			if ( arr ) {
				if ( indexOf ) {
					return indexOf.call( arr, elem, i );
				}

				len = arr.length;
				i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

				for ( ; i < len; i++ ) {

					// Skip accessing in sparse arrays
					if ( i in arr && arr[ i ] === elem ) {
						return i;
					}
				}
			}

			return -1;
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			while ( j < len ) {
				first[ i++ ] = second[ j++ ];
			}

			// Support: IE<9
			// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
			if ( len !== len ) {
				while ( second[ j ] !== undefined ) {
					first[ i++ ] = second[ j++ ];
				}
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var args, proxy, tmp;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: function() {
			return +( new Date() );
		},

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				ret = [],
				self = this,
				len = self.length;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// init accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector.charAt( 0 ) === "<" &&
					selector.charAt( selector.length - 1 ) === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {

							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id !== match[ 2 ] ) {
								return rootjQuery.find( selector );
							}

							// Otherwise, we inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return typeof root.ready !== "undefined" ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var i,
				targets = jQuery( target, this ),
				len = targets.length;

			return this.filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within
		// the matched set of elements
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// index in selector
			if ( typeof elem === "string" ) {
				return jQuery.inArray( this[ 0 ], jQuery( elem ) );
			}

			// Locate the position of the desired element
			return jQuery.inArray(

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem, this );
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		do {
			cur = cur[ dir ];
		} while ( cur && cur.nodeType !== 1 );

		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return jQuery.nodeName( elem, "iframe" ) ?
				elem.contentDocument || elem.contentWindow.document :
				jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var ret = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				ret = jQuery.filter( selector, ret );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					ret = jQuery.uniqueSort( ret );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					ret = ret.reverse();
				}
			}

			return this.pushStack( ret );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = true;
					if ( !memory ) {
						self.disable();
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add( function() {

						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );

						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}

			// if we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	} );


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {

		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );

	/**
	 * Clean-up method for dom ready events
	 */
	function detach() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed );
			window.removeEventListener( "load", completed );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	}

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener ||
			window.event.type === "load" ||
			document.readyState === "complete" ) {

			detach();
			jQuery.ready();
		}
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE6-10
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );

			// Standards-based browsers support DOMContentLoaded
			} else if ( document.addEventListener ) {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );

			// If IE event model is used
			} else {

				// Ensure firing before onload, maybe late but safe also for iframes
				document.attachEvent( "onreadystatechange", completed );

				// A fallback to window.onload, that will always work
				window.attachEvent( "onload", completed );

				// If IE and not a frame
				// continually check to see if the document is ready
				var top = false;

				try {
					top = window.frameElement == null && document.documentElement;
				} catch ( e ) {}

				if ( top && top.doScroll ) {
					( function doScrollCheck() {
						if ( !jQuery.isReady ) {

							try {

								// Use the trick by Diego Perini
								// http://javascript.nwbox.com/IEContentLoaded/
								top.doScroll( "left" );
							} catch ( e ) {
								return window.setTimeout( doScrollCheck, 50 );
							}

							// detach all dom ready events
							detach();

							// and execute any waiting functions
							jQuery.ready();
						}
					} )();
				}
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Support: IE<9
	// Iteration over object's inherited properties before its own
	var i;
	for ( i in jQuery( support ) ) {
		break;
	}
	support.ownFirst = i === "0";

	// Note: most support tests are defined in their respective modules.
	// false until the test is run
	support.inlineBlockNeedsLayout = false;

	// Execute ASAP in case we need to set body.style.zoom
	jQuery( function() {

		// Minified: var a,b,c,d
		var val, div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {

			// Return for frameset docs that don't have a body
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		if ( typeof div.style.zoom !== "undefined" ) {

			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

			support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
			if ( val ) {

				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );
	} );


	( function() {
		var div = document.createElement( "div" );

		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch ( e ) {
			support.deleteExpando = false;
		}

		// Null elements to avoid leaks in IE.
		div = null;
	} )();
	var acceptData = function( elem ) {
		var noData = jQuery.noData[ ( elem.nodeName + " " ).toLowerCase() ],
			nodeType = +elem.nodeType || 1;

		// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
		return nodeType !== 1 && nodeType !== 9 ?
			false :

			// Nodes accept data unless otherwise specified; rejection can be conditional
			!noData || noData !== true && elem.getAttribute( "classid" ) === noData;
	};




	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /([A-Z])/g;

	function dataAttr( elem, key, data ) {

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {

			var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				jQuery.data( elem, key, data );

			} else {
				data = undefined;
			}
		}

		return data;
	}

	// checks a cache object for emptiness
	function isEmptyDataObject( obj ) {
		var name;
		for ( name in obj ) {

			// if the public data object is empty, the private is still empty
			if ( name === "data" && jQuery.isEmptyObject( obj[ name ] ) ) {
				continue;
			}
			if ( name !== "toJSON" ) {
				return false;
			}
		}

		return true;
	}

	function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !acceptData( elem ) ) {
			return;
		}

		var ret, thisCache,
			internalKey = jQuery.expando,

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&
			data === undefined && typeof name === "string" ) {
			return;
		}

		if ( !id ) {

			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {

			// Avoid exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( typeof name === "string" ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	}

	function internalRemoveData( elem, name, pvt ) {
		if ( !acceptData( elem ) ) {
			return;
		}

		var thisCache, i,
			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split( " " );
						}
					}
				} else {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = name.concat( jQuery.map( name, jQuery.camelCase ) );
				}

				i = name.length;
				while ( i-- ) {
					delete thisCache[ name[ i ] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject( cache[ id ] ) ) {
				return;
			}
		}

		// Destroy the cache
		if ( isNode ) {
			jQuery.cleanData( [ elem ], true );

		// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
		/* jshint eqeqeq: false */
		} else if ( support.deleteExpando || cache != cache.window ) {
			/* jshint eqeqeq: true */
			delete cache[ id ];

		// When all else fails, undefined
		} else {
			cache[ id ] = undefined;
		}
	}

	jQuery.extend( {
		cache: {},

		// The following elements (space-suffixed to avoid Object.prototype collisions)
		// throw uncatchable exceptions if you attempt to set expando properties
		noData: {
			"applet ": true,
			"embed ": true,

			// ...but Flash objects (which have this classid) *can* handle expandos
			"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
		},

		hasData: function( elem ) {
			elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];
			return !!elem && !isEmptyDataObject( elem );
		},

		data: function( elem, name, data ) {
			return internalData( elem, name, data );
		},

		removeData: function( elem, name ) {
			return internalRemoveData( elem, name );
		},

		// For internal use only.
		_data: function( elem, name, data ) {
			return internalData( elem, name, data, true );
		},

		_removeData: function( elem, name ) {
			return internalRemoveData( elem, name, true );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Special expections of .data basically thwart jQuery.access,
			// so implement the relevant behavior ourselves

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = jQuery.data( elem );

					if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						jQuery._data( elem, "parsedAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					jQuery.data( this, key );
				} );
			}

			return arguments.length > 1 ?

				// Sets one value
				this.each( function() {
					jQuery.data( this, key, value );
				} ) :

				// Gets one value
				// Try to fetch any internally stored data first
				elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
		},

		removeData: function( key ) {
			return this.each( function() {
				jQuery.removeData( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = jQuery._data( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = jQuery._data( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// not intended for public consumption - generates a queueHooks object,
		// or returns the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return jQuery._data( elem, key ) || jQuery._data( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					jQuery._removeData( elem, type + "queue" );
					jQuery._removeData( elem, key );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = jQuery._data( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );


	( function() {
		var shrinkWrapBlocksVal;

		support.shrinkWrapBlocks = function() {
			if ( shrinkWrapBlocksVal != null ) {
				return shrinkWrapBlocksVal;
			}

			// Will be changed later if needed.
			shrinkWrapBlocksVal = false;

			// Minified: var b,c,d
			var div, body, container;

			body = document.getElementsByTagName( "body" )[ 0 ];
			if ( !body || !body.style ) {

				// Test fired too early or in an unsupported environment, exit.
				return;
			}

			// Setup
			div = document.createElement( "div" );
			container = document.createElement( "div" );
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild( container ).appendChild( div );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			if ( typeof div.style.zoom !== "undefined" ) {

				// Reset CSS: box-sizing; display; margin; border
				div.style.cssText =

					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;" +
					"padding:1px;width:1px;zoom:1";
				div.appendChild( document.createElement( "div" ) ).style.width = "5px";
				shrinkWrapBlocksVal = div.offsetWidth !== 3;
			}

			body.removeChild( container );

			return shrinkWrapBlocksVal;
		};

	} )();
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn(
						elems[ i ],
						key,
						raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([\w:-]+)/ );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );

	var rleadingWhitespace = ( /^\s+/ );

	var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
			"details|dialog|figcaption|figure|footer|header|hgroup|main|" +
			"mark|meter|nav|output|picture|progress|section|summary|template|time|video";



	function createSafeFragment( document ) {
		var list = nodeNames.split( "|" ),
			safeFrag = document.createDocumentFragment();

		if ( safeFrag.createElement ) {
			while ( list.length ) {
				safeFrag.createElement(
					list.pop()
				);
			}
		}
		return safeFrag;
	}


	( function() {
		var div = document.createElement( "div" ),
			fragment = document.createDocumentFragment(),
			input = document.createElement( "input" );

		// Setup
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

		// IE strips leading whitespace when .innerHTML is used
		support.leadingWhitespace = div.firstChild.nodeType === 3;

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		support.tbody = !div.getElementsByTagName( "tbody" ).length;

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		support.html5Clone =
			document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

		// Check if a disconnected checkbox will retain its checked
		// value of true after appended to the DOM (IE6/7)
		input.type = "checkbox";
		input.checked = true;
		fragment.appendChild( input );
		support.appendChecked = input.checked;

		// Make sure textarea (and checkbox) defaultValue is properly cloned
		// Support: IE6-IE11+
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

		// #11217 - WebKit loses check when the name is after the checked attribute
		fragment.appendChild( div );

		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input = document.createElement( "input" );
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
		// old WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<9
		// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
		support.noCloneEvent = !!div.addEventListener;

		// Support: IE<9
		// Since attributes and properties are the same in IE,
		// cleanData must set properties to undefined rather than use removeAttribute
		div[ jQuery.expando ] = 1;
		support.attributes = !div.getAttribute( jQuery.expando );
	} )();


	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],

		// Support: IE8
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
	};

	// Support: IE8-IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {
		var elems, elem,
			i = 0,
			found = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
					undefined;

		if ( !found ) {
			for ( found = [], elems = context.childNodes || context;
				( elem = elems[ i ] ) != null;
				i++
			) {
				if ( !tag || jQuery.nodeName( elem, tag ) ) {
					found.push( elem );
				} else {
					jQuery.merge( found, getAll( elem, tag ) );
				}
			}
		}

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], found ) :
			found;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var elem,
			i = 0;
		for ( ; ( elem = elems[ i ] ) != null; i++ ) {
			jQuery._data(
				elem,
				"globalEval",
				!refElements || jQuery._data( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/,
		rtbody = /<tbody/i;

	function fixDefaultChecked( elem ) {
		if ( rcheckableType.test( elem.type ) ) {
			elem.defaultChecked = elem.checked;
		}
	}

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[ 1 ] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), "tbody" ) &&
								!tbody.childNodes.length ) {

								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}

				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	}


	( function() {
		var i, eventName,
			div = document.createElement( "div" );

		// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
		for ( i in { submit: true, change: true, focusin: true } ) {
			eventName = "on" + i;

			if ( !( support[ i ] = eventName in window ) ) {

				// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
				div.setAttribute( eventName, "t" );
				support[ i ] = div.attributes[ eventName ].expando === false;
			}
		}

		// Null elements to avoid leaks in IE.
		div = null;
	} )();


	var rformElems = /^(?:input|select|textarea)$/i,
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {
			var tmp, events, t, handleObjIn,
				special, eventHandle, handleObj,
				handlers, type, namespaces, origType,
				elemData = jQuery._data( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" &&
						( !e || jQuery.event.triggered !== e.type ) ?
						jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
						undefined;
				};

				// Add elem as a property of the handle fn to prevent a memory leak
				// with IE non-native events
				eventHandle.elem = elem;
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener/attachEvent if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						// Bind the global event handler to the element
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle, false );

						} else if ( elem.attachEvent ) {
							elem.attachEvent( "on" + type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

			// Nullify elem to prevent memory leaks in IE
			elem = null;
		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
			var j, handleObj, tmp,
				origCount, t, events,
				special, handlers, type,
				namespaces, origType,
				elemData = jQuery.hasData( elem ) && jQuery._data( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				delete elemData.handle;

				// removeData also checks for emptiness and clears the expando if empty
				// so use it instead of delete
				jQuery._removeData( elem, "events" );
			}
		},

		trigger: function( event, data, elem, onlyHandlers ) {
			var handle, ontype, cur,
				bubbleType, special, tmp, i,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &&
					jQuery._data( cur, "handle" );

				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if (
					( !special._default ||
					 special._default.apply( eventPath.pop(), data ) === false
					) && acceptData( elem )
				) {

					// Call a native DOM method on the target with the same name name as the event.
					// Can't use an .isFunction() check here because IE6/7 fails that test.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						try {
							elem[ type ]();
						} catch ( e ) {

							// IE<9 dies on focus/blur to hidden element (#1486,#12518)
							// only reproducible on winXP IE8 native, not IE9 in IE8 mode
						}
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				/* jshint eqeqeq: false */
				for ( ; cur != this; cur = cur.parentNode || this ) {
					/* jshint eqeqeq: true */

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: IE<9
			// Fix target property (#1925)
			if ( !event.target ) {
				event.target = originalEvent.srcElement || document;
			}

			// Support: Safari 6-8+
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			// Support: IE<9
			// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
			event.metaKey = !!event.metaKey;

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ( "button buttons clientX clientY fromElement offsetX offsetY " +
				"pageX pageY screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var body, eventDoc, doc,
					button = original.button,
					fromElement = original.fromElement;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add relatedTarget, if necessary
				if ( !event.relatedTarget && fromElement ) {
					event.relatedTarget = fromElement === event.target ?
						original.toElement :
						fromElement;
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						try {
							this.focus();
							return false;
						} catch ( e ) {

							// Support: IE<9
							// If we error on focus to hidden element (#1486, #12518),
							// let .trigger() run the handlers
						}
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},

		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true

					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// Guard for simulated events was moved to jQuery.event.stopPropagation function
					// since `originalEvent` should point to the original event for the
					// constancy with other events and for more focused logic
				}
			);

			jQuery.event.trigger( e, null, elem );

			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	};

	jQuery.removeEvent = document.removeEventListener ?
		function( elem, type, handle ) {

			// This "if" is needed for plain objects
			if ( elem.removeEventListener ) {
				elem.removeEventListener( type, handle );
			}
		} :
		function( elem, type, handle ) {
			var name = "on" + type;

			if ( elem.detachEvent ) {

				// #8545, #7054, preventing memory leaks for custom events in IE6-8
				// detachEvent needed property on element, by name of that event,
				// to properly expose it to GC
				if ( typeof elem[ name ] === "undefined" ) {
					elem[ name ] = null;
				}

				elem.detachEvent( name, handle );
			}
		};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: IE < 9, Android < 4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;
			if ( !e ) {
				return;
			}

			// If preventDefault exists, run it on the original event
			if ( e.preventDefault ) {
				e.preventDefault();

			// Support: IE
			// Otherwise set the returnValue property of the original event to false
			} else {
				e.returnValue = false;
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( !e || this.isSimulated ) {
				return;
			}

			// If stopPropagation exists, run it on the original event
			if ( e.stopPropagation ) {
				e.stopPropagation();
			}

			// Support: IE
			// Set the cancelBubble property of the original event to true
			e.cancelBubble = true;
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && e.stopImmediatePropagation ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	// IE submit delegation
	if ( !support.submit ) {

		jQuery.event.special.submit = {
			setup: function() {

				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}

				// Lazy-add a submit handler when a descendant form may potentially be submitted
				jQuery.event.add( this, "click._submit keypress._submit", function( e ) {

					// Node name check avoids a VML-related crash in IE (#9807)
					var elem = e.target,
						form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ?

							// Support: IE <=8
							// We use jQuery.prop instead of elem.form
							// to allow fixing the IE8 delegated submit issue (gh-2332)
							// by 3rd party polyfills/workarounds.
							jQuery.prop( elem, "form" ) :
							undefined;

					if ( form && !jQuery._data( form, "submit" ) ) {
						jQuery.event.add( form, "submit._submit", function( event ) {
							event._submitBubble = true;
						} );
						jQuery._data( form, "submit", true );
					}
				} );

				// return undefined since we don't need an event listener
			},

			postDispatch: function( event ) {

				// If form was submitted by the user, bubble the event up the tree
				if ( event._submitBubble ) {
					delete event._submitBubble;
					if ( this.parentNode && !event.isTrigger ) {
						jQuery.event.simulate( "submit", this.parentNode, event );
					}
				}
			},

			teardown: function() {

				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}

				// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
				jQuery.event.remove( this, "._submit" );
			}
		};
	}

	// IE change delegation and checkbox/radio fix
	if ( !support.change ) {

		jQuery.event.special.change = {

			setup: function() {

				if ( rformElems.test( this.nodeName ) ) {

					// IE doesn't fire change on a check/radio until blur; trigger it on click
					// after a propertychange. Eat the blur-change in special.change.handle.
					// This still fires onchange a second time for check/radio after blur.
					if ( this.type === "checkbox" || this.type === "radio" ) {
						jQuery.event.add( this, "propertychange._change", function( event ) {
							if ( event.originalEvent.propertyName === "checked" ) {
								this._justChanged = true;
							}
						} );
						jQuery.event.add( this, "click._change", function( event ) {
							if ( this._justChanged && !event.isTrigger ) {
								this._justChanged = false;
							}

							// Allow triggered, simulated change events (#11500)
							jQuery.event.simulate( "change", this, event );
						} );
					}
					return false;
				}

				// Delegated event; lazy-add a change handler on descendant inputs
				jQuery.event.add( this, "beforeactivate._change", function( e ) {
					var elem = e.target;

					if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "change" ) ) {
						jQuery.event.add( elem, "change._change", function( event ) {
							if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
								jQuery.event.simulate( "change", this.parentNode, event );
							}
						} );
						jQuery._data( elem, "change", true );
					}
				} );
			},

			handle: function( event ) {
				var elem = event.target;

				// Swallow native change events from checkbox/radio, we already triggered them above
				if ( this !== elem || event.isSimulated || event.isTrigger ||
					( elem.type !== "radio" && elem.type !== "checkbox" ) ) {

					return event.handleObj.handler.apply( this, arguments );
				}
			},

			teardown: function() {
				jQuery.event.remove( this, "._change" );

				return !rformElems.test( this.nodeName );
			}
		};
	}

	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = jQuery._data( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = jQuery._data( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						jQuery._removeData( doc, fix );
					} else {
						jQuery._data( doc, fix, attaches );
					}
				}
			};
		} );
	}

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		},

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
		rnoshimcache = new RegExp( "<(?:" + nodeNames + ")[\\s/>]", "i" ),
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
		safeFragment = createSafeFragment( document ),
		fragmentDiv = safeFragment.appendChild( document.createElement( "div" ) );

	// Support: IE<8
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( jQuery.find.attr( elem, "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
			return;
		}

		var type, i, l,
			oldData = jQuery._data( src ),
			curData = jQuery._data( dest, oldData ),
			events = oldData.events;

		if ( events ) {
			delete curData.handle;
			curData.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}

		// make the cloned public data object a copy from the original
		if ( curData.data ) {
			curData.data = jQuery.extend( {}, curData.data );
		}
	}

	function fixCloneNodeIssues( src, dest ) {
		var nodeName, e, data;

		// We do not need to do anything for non-Elements
		if ( dest.nodeType !== 1 ) {
			return;
		}

		nodeName = dest.nodeName.toLowerCase();

		// IE6-8 copies events bound via attachEvent when using cloneNode.
		if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
			data = jQuery._data( dest );

			for ( e in data.events ) {
				jQuery.removeEvent( dest, e, data.handle );
			}

			// Event data gets referenced instead of copied if the expando gets copied too
			dest.removeAttribute( jQuery.expando );
		}

		// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
		if ( nodeName === "script" && dest.text !== src.text ) {
			disableScript( dest ).text = src.text;
			restoreScript( dest );

		// IE6-10 improperly clones children of object elements using classid.
		// IE10 throws NoModificationAllowedError if parent is null, #12132.
		} else if ( nodeName === "object" ) {
			if ( dest.parentNode ) {
				dest.outerHTML = src.outerHTML;
			}

			// This path appears unavoidable for IE9. When cloning an object
			// element in IE9, the outerHTML strategy above is not sufficient.
			// If the src has innerHTML and the destination does not,
			// copy the src.innerHTML into the dest.innerHTML. #10324
			if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {
				dest.innerHTML = src.innerHTML;
			}

		} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {

			// IE6-8 fails to persist the checked state of a cloned checkbox
			// or radio button. Worse, IE6-7 fail to give the cloned element
			// a checked appearance if the defaultChecked value isn't also set

			dest.defaultChecked = dest.checked = src.checked;

			// IE6-7 get confused and end up setting the value of a cloned
			// checkbox/radio button to an empty string instead of "on"
			if ( dest.value !== src.value ) {
				dest.value = src.value;
			}

		// IE6-8 fails to return the selected option to the default selected
		// state when cloning options
		} else if ( nodeName === "option" ) {
			dest.defaultSelected = dest.selected = src.defaultSelected;

		// IE6-8 fails to set the defaultValue to the correct value when
		// cloning other types of input fields
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval(
									( node.text || node.textContent || node.innerHTML || "" )
										.replace( rcleanScript, "" )
								);
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			elems = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = elems[ i ] ) != null; i++ ) {

			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var destElements, node, clone, i, srcElements,
				inPage = jQuery.contains( elem.ownerDocument, elem );

			if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||
				!rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {

				clone = elem.cloneNode( true );

			// IE<=8 does not properly clone detached, unknown element nodes
			} else {
				fragmentDiv.innerHTML = elem.outerHTML;
				fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
			}

			if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&
					( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				// Fix all IE cloning issues
				for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {

					// Ensure that the destination node is not null; Fixes #9587
					if ( destElements[ i ] ) {
						fixCloneNodeIssues( node, destElements[ i ] );
					}
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {
						cloneCopyEvent( node, destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			destElements = srcElements = node = null;

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems, /* internal */ forceAcceptData ) {
			var elem, type, id, data,
				i = 0,
				internalKey = jQuery.expando,
				cache = jQuery.cache,
				attributes = support.attributes,
				special = jQuery.event.special;

			for ( ; ( elem = elems[ i ] ) != null; i++ ) {
				if ( forceAcceptData || acceptData( elem ) ) {

					id = elem[ internalKey ];
					data = id && cache[ id ];

					if ( data ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Remove cache only if it was not already removed by jQuery.event.remove
						if ( cache[ id ] ) {

							delete cache[ id ];

							// Support: IE<9
							// IE does not allow us to delete expando properties from nodes
							// IE creates expando attributes along with the property
							// IE does not have a removeAttribute function on Document nodes
							if ( !attributes && typeof elem.removeAttribute !== "undefined" ) {
								elem.removeAttribute( internalKey );

							// Webkit & Blink performance suffers when deleting properties
							// from DOM nodes, so set to undefined instead
							// https://code.google.com/p/chromium/issues/detail?id=378607
							} else {
								elem[ internalKey ] = undefined;
							}

							deletedIds.push( id );
						}
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().append(
						( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )
					);
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {

				// Remove element nodes and prevent memory leaks
				if ( elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem, false ) );
				}

				// Remove any remaining nodes
				while ( elem.firstChild ) {
					elem.removeChild( elem.firstChild );
				}

				// If this is a select, ensure that it displays empty (#12336)
				// Support: IE<9
				if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
					elem.options.length = 0;
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined ) {
					return elem.nodeType === 1 ?
						elem.innerHTML.replace( rinlinejQuery, "" ) :
						undefined;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
					( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {

							// Remove element nodes and prevent memory leaks
							elem = this[ i ] || {};
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				i = 0,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			display = jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var documentElement = document.documentElement;



	( function() {
		var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
			reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		div.style.cssText = "float:left;opacity:.5";

		// Support: IE<9
		// Make sure that element opacity exists (as opposed to filter)
		support.opacity = div.style.opacity === "0.5";

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		support.cssFloat = !!div.style.cssFloat;

		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container = document.createElement( "div" );
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		div.innerHTML = "";
		container.appendChild( div );

		// Support: Firefox<29, Android 2.3
		// Vendor-prefix box-sizing
		support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
			div.style.WebkitBoxSizing === "";

		jQuery.extend( support, {
			reliableHiddenOffsets: function() {
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return reliableHiddenOffsetsVal;
			},

			boxSizingReliable: function() {

				// We're checking for pixelPositionVal here instead of boxSizingReliableVal
				// since that compresses better and they're computed together anyway.
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},

			pixelMarginRight: function() {

				// Support: Android 4.0-4.3
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},

			pixelPosition: function() {
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return pixelPositionVal;
			},

			reliableMarginRight: function() {

				// Support: Android 2.3
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return reliableMarginRightVal;
			},

			reliableMarginLeft: function() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			}
		} );

		function computeStyleTests() {
			var contents, divStyle,
				documentElement = document.documentElement;

			// Setup
			documentElement.appendChild( container );

			div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";

			// Support: IE<9
			// Assume reasonable values in the absence of getComputedStyle
			pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
			pixelMarginRightVal = reliableMarginRightVal = true;

			// Check for getComputedStyle so that this code is not run in IE<9.
			if ( window.getComputedStyle ) {
				divStyle = window.getComputedStyle( div );
				pixelPositionVal = ( divStyle || {} ).top !== "1%";
				reliableMarginLeftVal = ( divStyle || {} ).marginLeft === "2px";
				boxSizingReliableVal = ( divStyle || { width: "4px" } ).width === "4px";

				// Support: Android 4.0 - 4.3 only
				// Some styles come back with percentage values, even though they shouldn't
				div.style.marginRight = "50%";
				pixelMarginRightVal = ( divStyle || { marginRight: "4px" } ).marginRight === "4px";

				// Support: Android 2.3 only
				// Div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				contents = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				contents.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				contents.style.marginRight = contents.style.width = "0";
				div.style.width = "1px";

				reliableMarginRightVal =
					!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );

				div.removeChild( contents );
			}

			// Support: IE6-8
			// First check that getClientRects works as expected
			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			div.style.display = "none";
			reliableHiddenOffsetsVal = div.getClientRects().length === 0;
			if ( reliableHiddenOffsetsVal ) {
				div.style.display = "";
				div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
				contents = div.getElementsByTagName( "td" );
				contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
				if ( reliableHiddenOffsetsVal ) {
					contents[ 0 ].style.display = "";
					contents[ 1 ].style.display = "none";
					reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
				}
			}

			// Teardown
			documentElement.removeChild( container );
		}

	} )();


	var getStyles, curCSS,
		rposition = /^(top|right|bottom|left)$/;

	if ( window.getComputedStyle ) {
		getStyles = function( elem ) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

		curCSS = function( elem, name, computed ) {
			var width, minWidth, maxWidth, ret,
				style = elem.style;

			computed = computed || getStyles( elem );

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

			// Support: Opera 12.1x only
			// Fall back to style even without computed
			// computed is undefined for elems on document fragments
			if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			if ( computed ) {

				// A tribute to the "awesome hack by Dean Edwards"
				// Chrome < 17 and Safari 5.0 uses "computed value"
				// instead of "used value" for margin-right
				// Safari 5.1.7 (at least) returns percentage for a larger set of values,
				// but width seems to be reliably pixels
				// this is against the CSSOM draft spec:
				// http://dev.w3.org/csswg/cssom/#resolved-values
				if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

					// Remember the original values
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;

					// Put in the new values to get a computed value out
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;

					// Revert the changed values
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}

			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ?
				ret :
				ret + "";
		};
	} else if ( documentElement.currentStyle ) {
		getStyles = function( elem ) {
			return elem.currentStyle;
		};

		curCSS = function( elem, name, computed ) {
			var left, rs, rsLeft, ret,
				style = elem.style;

			computed = computed || getStyles( elem );
			ret = computed ? computed[ name ] : undefined;

			// Avoid setting ret to empty string here
			// so we don't default to auto
			if ( ret == null && style && style[ name ] ) {
				ret = style[ name ];
			}

			// From the awesome hack by Dean Edwards
			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

			// If we're not dealing with a regular pixel number
			// but a number that has a weird ending, we need to convert it to pixels
			// but not position css attributes, as those are
			// proportional to the parent element instead
			// and we can't measure the parent instead because it
			// might trigger a "stacking dolls" problem
			if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

				// Remember the original values
				left = style.left;
				rs = elem.runtimeStyle;
				rsLeft = rs && rs.left;

				// Put in the new values to get a computed value out
				if ( rsLeft ) {
					rs.left = elem.currentStyle.left;
				}
				style.left = name === "fontSize" ? "1em" : ret;
				ret = style.pixelLeft + "px";

				// Revert the changed values
				style.left = left;
				if ( rsLeft ) {
					rs.left = rsLeft;
				}
			}

			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ?
				ret :
				ret + "" || "auto";
		};
	}




	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

			ralpha = /alpha\([^)]*\)/i,
		ropacity = /opacity\s*=\s*([^)]*)/i,

		// swappable if display is none or starts with table except
		// "table", "table-cell", or "table-caption"
		// see here for display values:
		// https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;


	// return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// check for vendor prefixed names
		var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = jQuery._data( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] =
						jQuery._data( elem, "olddisplay", defaultDisplay( elem.nodeName ) );
				}
			} else {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	function setPositiveNumber( elem, value, subtract ) {
		var matches = rnumsplit.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// at this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// at this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// at this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = support.boxSizing &&
				jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {

			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}

		// some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// we need the check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {

			// normalize float css property
			"float": support.cssFloat ? "cssFloat" : "styleFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set. See: #7116
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
				// but it would mean to define eight
				// (for every problematic property) identical functions
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					// Support: IE
					// Swallow errors from 'invalid' CSS values (#5509)
					try {
						style[ name ] = value;
					} catch ( e ) {}
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var num, val, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			//convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Return, converting to number if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// certain elements can have dimension info if we invisibly show them
					// however, it must have a current display style that would benefit from this
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var styles = extra && getStyles( elem );
				return setPositiveNumber( elem, value, extra ?
					augmentWidthOrHeight(
						elem,
						name,
						extra,
						support.boxSizing &&
							jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					) : 0
				);
			}
		};
	} );

	if ( !support.opacity ) {
		jQuery.cssHooks.opacity = {
			get: function( elem, computed ) {

				// IE uses filters for opacity
				return ropacity.test( ( computed && elem.currentStyle ?
					elem.currentStyle.filter :
					elem.style.filter ) || "" ) ?
						( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
						computed ? "1" : "";
			},

			set: function( elem, value ) {
				var style = elem.style,
					currentStyle = elem.currentStyle,
					opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
					filter = currentStyle && currentStyle.filter || style.filter || "";

				// IE has trouble with opacity if it does not have layout
				// Force it by setting the zoom level
				style.zoom = 1;

				// if setting opacity to 1, and no other filters exist -
				// attempt to remove filter attribute #6652
				// if value === "", then remove inline opacity #12685
				if ( ( value >= 1 || value === "" ) &&
						jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
						style.removeAttribute ) {

					// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
					// if "filter:" is present at all, clearType is disabled, we want to avoid this
					// style.removeAttribute is IE Only, but so apparently is this code path...
					style.removeAttribute( "filter" );

					// if there is no filter style applied in a css rule
					// or unset inline opacity, we are done
					if ( value === "" || currentStyle && !currentStyle.filter ) {
						return;
					}
				}

				// otherwise, set new filter values
				style.filter = ralpha.test( filter ) ?
					filter.replace( ralpha, opacity ) :
					filter + " " + opacity;
			}
		};
	}

	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return (
					parseFloat( curCSS( elem, "marginLeft" ) ) ||

					// Support: IE<=11+
					// Running getBoundingClientRect on a disconnected node in IE throws an error
					// Support: IE8 only
					// getClientRects() errors on disconnected elems
					( jQuery.contains( elem.ownerDocument, elem ) ?
						elem.getBoundingClientRect().left -
							swap( elem, { marginLeft: 0 }, function() {
								return elem.getBoundingClientRect().left;
							} ) :
						0
					)
				) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails
				// so, simple values such as "10px" are parsed to Float.
				// complex values such as "rotate(1rad)" are returned as is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// use step hook for back compat - use cssHook if its there - use .style if its
				// available and use plain properties where available
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9
	// Panic based approach to setting things on disconnected nodes

	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			attrs = { height: type },
			i = 0;

		// if we include width, step value is 1 to do all cssExpand values,
		// if we don't include width, step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// we're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = jQuery._data( elem, "fxshow" );

		// handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// doing this makes sure that the complete handler will be called
				// before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE does not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

				// inline-level elements accept inline-block;
				// block-level elements need to be inline with layout
				if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
					style.display = "inline-block";
				} else {
					style.zoom = 1;
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			if ( !support.shrinkWrapBlocks() ) {
				anim.always( function() {
					style.overflow = opts.overflow[ 0 ];
					style.overflowX = opts.overflow[ 1 ];
					style.overflowY = opts.overflow[ 2 ];
				} );
			}
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = jQuery._data( elem, "fxshow", {} );
			}

			// store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;
				jQuery._removeData( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// not quite $.extend, this wont overwrite keys already present.
				// also - reusing 'index' from above because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// if we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// resolve when we played the last frame
					// otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || jQuery._data( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = jQuery._data( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// start the next in the queue if the last step wasn't forced
				// timers currently will call their complete callbacks, which will dequeue
				// but only if they were gotoEnd
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = jQuery._data( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// enable finishing flag on private data
				data.finish = true;

				// empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			timers = jQuery.timers,
			i = 0;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;

	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		window.clearInterval( timerId );
		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var a,
			input = document.createElement( "input" ),
			div = document.createElement( "div" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		// Setup
		div = document.createElement( "div" );
		div.setAttribute( "className", "t" );
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		a = div.getElementsByTagName( "a" )[ 0 ];

		// Support: Windows Web Apps (WWA)
		// `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "checkbox" );
		div.appendChild( input );

		a = div.getElementsByTagName( "a" )[ 0 ];

		// First batch of tests.
		a.style.cssText = "top:1px";

		// Test setAttribute on camelCase class.
		// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		support.getSetAttribute = div.className !== "t";

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		support.style = /top/.test( a.getAttribute( "style" ) );

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		support.hrefNormalized = a.getAttribute( "href" ) === "/a";

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		support.checkOn = !!input.value;

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		support.optSelected = opt.selected;

		// Tests for enctype support on a form (#6743)
		support.enctype = !!document.createElement( "form" ).enctype;

		// Make sure that the options inside disabled selects aren't marked as disabled
		// (WebKit marks them as disabled)
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE8 only
		// Check if we can trust getAttribute("value")
		input = document.createElement( "input" );
		input.setAttribute( "value", "" );
		support.input = input.getAttribute( "value" ) === "";

		// Check if an input maintains its value after becoming a radio
		input.value = "t";
		input.setAttribute( "type", "radio" );
		support.radioValue = input.value === "t";
	} )();


	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if (
						hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// handle most common string cases
						ret.replace( rreturn, "" ) :

						// handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
				} else if ( typeof val === "number" ) {
					val += "";
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// oldIE doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled :
									option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1 ) {

							// Support: IE6
							// When new option element is added to select box we need to
							// force reflow of newly added node in order to workaround delay
							// of initialization properties
							try {
								option.selected = optionSet = true;

							} catch ( _ ) {

								// Will be executed only in IE6
								option.scrollHeight;
							}

						} else {
							option.selected = false;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}

					return options;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	var nodeHook, boolHook,
		attrHandle = jQuery.expr.attrHandle,
		ruseDefault = /^(?:checked|selected)$/i,
		getSetAttribute = support.getSetAttribute,
		getSetInput = support.input;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {

						// Setting the type on a radio button after the value resets the value in IE8-9
						// Reset value to default in case type is set after value during creation
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {

						// Set corresponding property to false
						if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
							elem[ propName ] = false;

						// Support: IE<9
						// Also clear defaultChecked/defaultSelected (if appropriate)
						} else {
							elem[ jQuery.camelCase( "default-" + name ) ] =
								elem[ propName ] = false;
						}

					// See #9699 for explanation of this approach (setting first, then removal)
					} else {
						jQuery.attr( elem, name, "" );
					}

					elem.removeAttribute( getSetAttribute ? name : propName );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {

				// IE<8 needs the *property* name
				elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

			} else {

				// Support: IE<9
				// Use defaultChecked and defaultSelected for oldIE
				elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			attrHandle[ name ] = function( elem, name, isXML ) {
				var ret, handle;
				if ( !isXML ) {

					// Avoid an infinite loop by temporarily removing this function from the getter
					handle = attrHandle[ name ];
					attrHandle[ name ] = ret;
					ret = getter( elem, name, isXML ) != null ?
						name.toLowerCase() :
						null;
					attrHandle[ name ] = handle;
				}
				return ret;
			};
		} else {
			attrHandle[ name ] = function( elem, name, isXML ) {
				if ( !isXML ) {
					return elem[ jQuery.camelCase( "default-" + name ) ] ?
						name.toLowerCase() :
						null;
				}
			};
		}
	} );

	// fix oldIE attroperties
	if ( !getSetInput || !getSetAttribute ) {
		jQuery.attrHooks.value = {
			set: function( elem, value, name ) {
				if ( jQuery.nodeName( elem, "input" ) ) {

					// Does not return so that setAttribute is also used
					elem.defaultValue = value;
				} else {

					// Use nodeHook if defined (#1954); otherwise setAttribute is fine
					return nodeHook && nodeHook.set( elem, value, name );
				}
			}
		};
	}

	// IE6/7 do not support getting/setting some attributes with get/setAttribute
	if ( !getSetAttribute ) {

		// Use this for any attribute in IE6/7
		// This fixes almost every IE6/7 issue
		nodeHook = {
			set: function( elem, value, name ) {

				// Set the existing or create a new attribute node
				var ret = elem.getAttributeNode( name );
				if ( !ret ) {
					elem.setAttributeNode(
						( ret = elem.ownerDocument.createAttribute( name ) )
					);
				}

				ret.value = value += "";

				// Break association with cloned elements by also using setAttribute (#9646)
				if ( name === "value" || value === elem.getAttribute( name ) ) {
					return value;
				}
			}
		};

		// Some attributes are constructed with empty-string values when not defined
		attrHandle.id = attrHandle.name = attrHandle.coords =
			function( elem, name, isXML ) {
				var ret;
				if ( !isXML ) {
					return ( ret = elem.getAttributeNode( name ) ) && ret.value !== "" ?
						ret.value :
						null;
				}
			};

		// Fixing value retrieval on a button requires this module
		jQuery.valHooks.button = {
			get: function( elem, name ) {
				var ret = elem.getAttributeNode( name );
				if ( ret && ret.specified ) {
					return ret.value;
				}
			},
			set: nodeHook.set
		};

		// Set contenteditable to false on removals(#10429)
		// Setting to empty string throws an error as an invalid value
		jQuery.attrHooks.contenteditable = {
			set: function( elem, value, name ) {
				nodeHook.set( elem, value === "" ? false : value, name );
			}
		};

		// Set width and height to auto instead of 0 on empty string( Bug #8150 )
		// This is for removals
		jQuery.each( [ "width", "height" ], function( i, name ) {
			jQuery.attrHooks[ name ] = {
				set: function( elem, value ) {
					if ( value === "" ) {
						elem.setAttribute( name, "auto" );
						return value;
					}
				}
			};
		} );
	}

	if ( !support.style ) {
		jQuery.attrHooks.style = {
			get: function( elem ) {

				// Return undefined in the case of empty string
				// Note: IE uppercases css property names, but if we were to .toLowerCase()
				// .cssText, that would destroy case sensitivity in URL's, like in "background"
				return elem.style.cssText || undefined;
			},
			set: function( elem, value ) {
				return ( elem.style.cssText = value + "" );
			}
		};
	}




	var rfocusable = /^(?:input|select|textarea|button|object)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			name = jQuery.propFix[ name ] || name;
			return this.each( function() {

				// try/catch handles cases where IE balks (such as removing a property on window)
				try {
					this[ name ] = undefined;
					delete this[ name ];
				} catch ( e ) {}
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Some attributes require a special call on IE
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !support.hrefNormalized ) {

		// href/src property should get the full normalized URL (#10299/#12915)
		jQuery.each( [ "href", "src" ], function( i, name ) {
			jQuery.propHooks[ name ] = {
				get: function( elem ) {
					return elem.getAttribute( name, 4 );
				}
			};
		} );
	}

	// Support: Safari, IE9+
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;

				if ( parent ) {
					parent.selectedIndex;

					// Make sure that it also works with optgroups, see #5701
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );

	// IE6/7 call enctype encoding
	if ( !support.enctype ) {
		jQuery.propFix.enctype = "encoding";
	}




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return jQuery.attr( elem, "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							jQuery.attr( elem, "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							jQuery.attr( elem, "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// store className if set
						jQuery._data( this, "__className__", className );
					}

					// If the element has a class name or if we're passed "false",
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					jQuery.attr( this, "class",
						className || value === false ?
						"" :
						jQuery._data( this, "__className__" ) || ""
					);
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	// Return jQuery for attributes-only inclusion


	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );


	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

	jQuery.parseJSON = function( data ) {

		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {

			// Support: Android 2.3
			// Workaround failure to string-cast null input
			return window.JSON.parse( data + "" );
		}

		var requireNonComma,
			depth = null,
			str = jQuery.trim( data + "" );

		// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
		// after removing valid tokens
		return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

			// Force termination if we see a misplaced comma
			if ( requireNonComma && comma ) {
				depth = 0;
			}

			// Perform no more replacements after returning to outermost depth
			if ( depth === 0 ) {
				return token;
			}

			// Commas must not follow "[", "{", or ","
			requireNonComma = open || comma;

			// Determine new depth
			// array/object open ("[" or "{"): depth += true - false (increment)
			// array/object close ("]" or "}"): depth += false - true (decrement)
			// other cases ("," or primitive): depth += true - true (numeric cast)
			depth += !close - !open;

			// Remove this token
			return "";
		} ) ) ?
			( Function( "return " + str ) )() :
			jQuery.error( "Invalid JSON: " + data );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new window.DOMParser();
				xml = tmp.parseFromString( data, "text/xml" );
			} else { // IE
				xml = new window.ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch ( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,

		// IE leaves an \r character at EOL
		rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
		rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Document location
		ajaxLocation = location.href,

		// Segment location into parts
		ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType.charAt( 0 ) === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var deep, key,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
		var firstDataType, ct, finalDataType, type,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s[ "throws" ] ) { // jscs:ignore requireDotNotation
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var

				// Cross-domain detection vars
				parts,

				// Loop variable
				i,

				// URL without anti-cache param
				cacheURL,

				// Response headers as string
				responseHeadersString,

				// timeout handle
				timeoutTimer,

				// To know if global events are to be dispatched
				fireGlobals,

				transport,

				// Response headers
				responseHeaders,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || ajaxLocation ) + "" )
				.replace( rhash, "" )
				.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if ( s.crossDomain == null ) {
				parts = rurl.exec( s.url.toLowerCase() );
				s.crossDomain = !!( parts &&
					( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
						( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
							( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
				);
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );

					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// We extract error from statusText
					// then normalize statusText and status for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
						elem = elem.firstChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );


	function getDisplay( elem ) {
		return elem.style && elem.style.display || jQuery.css( elem, "display" );
	}

	function filterHidden( elem ) {
		while ( elem && elem.nodeType === 1 ) {
			if ( getDisplay( elem ) === "none" || elem.type === "hidden" ) {
				return true;
			}
			elem = elem.parentNode;
		}
		return false;
	}

	jQuery.expr.filters.hidden = function( elem ) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return support.reliableHiddenOffsets() ?
			( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
				!elem.getClientRects().length ) :
				filterHidden( elem );
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is(":disabled") so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	// Create the request object
	// (This is still attached to ajaxSettings for backward compatibility)
	jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?

		// Support: IE6-IE8
		function() {

			// XHR cannot access local files, always use ActiveX for that case
			if ( this.isLocal ) {
				return createActiveXHR();
			}

			// Support: IE 9-11
			// IE seems to error on cross-domain PATCH requests when ActiveX XHR
			// is used. In IE 9+ always use the native XHR.
			// Note: this condition won't catch Edge as it doesn't define
			// document.documentMode but it also doesn't support ActiveX so it won't
			// reach this code.
			if ( document.documentMode > 8 ) {
				return createStandardXHR();
			}

			// Support: IE<9
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&
				createStandardXHR() || createActiveXHR();
		} :

		// For all other browsers, use the standard XMLHttpRequest object
		createStandardXHR;

	var xhrId = 0,
		xhrCallbacks = {},
		xhrSupported = jQuery.ajaxSettings.xhr();

	// Support: IE<10
	// Open requests must be manually aborted on unload (#5280)
	// See https://support.microsoft.com/kb/2856746 for more info
	if ( window.attachEvent ) {
		window.attachEvent( "onunload", function() {
			for ( var key in xhrCallbacks ) {
				xhrCallbacks[ key ]( undefined, true );
			}
		} );
	}

	// Determine support properties
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	xhrSupported = support.ajax = !!xhrSupported;

	// Create transport if the browser can provide an xhr
	if ( xhrSupported ) {

		jQuery.ajaxTransport( function( options ) {

			// Cross domain only allowed if supported through XMLHttpRequest
			if ( !options.crossDomain || support.cors ) {

				var callback;

				return {
					send: function( headers, complete ) {
						var i,
							xhr = options.xhr(),
							id = ++xhrId;

						// Open the socket
						xhr.open(
							options.type,
							options.url,
							options.async,
							options.username,
							options.password
						);

						// Apply custom fields if provided
						if ( options.xhrFields ) {
							for ( i in options.xhrFields ) {
								xhr[ i ] = options.xhrFields[ i ];
							}
						}

						// Override mime type if needed
						if ( options.mimeType && xhr.overrideMimeType ) {
							xhr.overrideMimeType( options.mimeType );
						}

						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
							headers[ "X-Requested-With" ] = "XMLHttpRequest";
						}

						// Set headers
						for ( i in headers ) {

							// Support: IE<9
							// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
							// request header to a null-value.
							//
							// To keep consistent with other XHR implementations, cast the value
							// to string and ignore `undefined`.
							if ( headers[ i ] !== undefined ) {
								xhr.setRequestHeader( i, headers[ i ] + "" );
							}
						}

						// Do send the request
						// This may raise an exception which is actually
						// handled in jQuery.ajax (so no try/catch here)
						xhr.send( ( options.hasContent && options.data ) || null );

						// Listener
						callback = function( _, isAbort ) {
							var status, statusText, responses;

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Clean up
								delete xhrCallbacks[ id ];
								callback = undefined;
								xhr.onreadystatechange = jQuery.noop;

								// Abort manually if needed
								if ( isAbort ) {
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;

									// Support: IE<10
									// Accessing binary-data responseText throws an exception
									// (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch ( e ) {

										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && options.isLocal && !options.crossDomain ) {
										status = responses.text ? 200 : 404;

									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}

							// Call complete if needed
							if ( responses ) {
								complete( status, statusText, responses, xhr.getAllResponseHeaders() );
							}
						};

						// Do send the request
						// `xhr.send` may raise an exception, but it will be
						// handled in jQuery.ajax (so no try/catch here)
						if ( !options.async ) {

							// If we're in sync mode we fire the callback
							callback();
						} else if ( xhr.readyState === 4 ) {

							// (IE6 & IE7) if it's in cache and has been
							// retrieved directly we need to fire the callback
							window.setTimeout( callback );
						} else {

							// Register the callback, but delay it in case `xhr.send` throws
							// Add to the list of active xhr callbacks
							xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
						}
					},

					abort: function() {
						if ( callback ) {
							callback( undefined, true );
						}
					}
				};
			}
		} );
	}

	// Functions to create xhrs
	function createStandardXHR() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	}

	function createActiveXHR() {
		try {
			return new window.ActiveXObject( "Microsoft.XMLHTTP" );
		} catch ( e ) {}
	}




	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and global
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
			s.global = false;
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {

			var script,
				head = document.head || jQuery( "head" )[ 0 ] || document.documentElement;

			return {

				send: function( _, callback ) {

					script = document.createElement( "script" );

					script.async = true;

					if ( s.scriptCharset ) {
						script.charset = s.scriptCharset;
					}

					script.src = s.url;

					// Attach handlers for all browsers
					script.onload = script.onreadystatechange = function( _, isAbort ) {

						if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

							// Handle memory leak in IE
							script.onload = script.onreadystatechange = null;

							// Remove the script
							if ( script.parentNode ) {
								script.parentNode.removeChild( script );
							}

							// Dereference the script
							script = null;

							// Callback if not abort
							if ( !isAbort ) {
								callback( 200, "success" );
							}
						}
					};

					// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					head.insertBefore( script, head.firstChild );
				},

				abort: function() {
					if ( script ) {
						script.onload( undefined, true );
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// data: string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off, url.length ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};





	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ?
			elem :
			elem.nodeType === 9 ?
				elem.defaultView || elem.parentWindow :
				false;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				jQuery.inArray( "auto", [ curCSSTop, curCSSLeft ] ) > -1;

			// need to be able to calculate position if either top or left
			// is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );
			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win,
				box = { top: 0, left: 0 },
				elem = this[ 0 ],
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			// If we don't have gBCR, just use 0,0 rather than error
			// BlackBerry 5, iOS 3 (original iPhone)
			if ( typeof elem.getBoundingClientRect !== "undefined" ) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow( doc );
			return {
				top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
				left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				parentOffset = { top: 0, left: 0 },
				elem = this[ 0 ];

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// we assume that getBoundingClientRect is available when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}

			// Subtract parent offsets and element margins
			// note: when an element has margin: auto the offsetLeft and marginLeft
			// are the same in Safari causing offset.left to incorrectly be 0
			return {
				top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) &&
					jQuery.css( offsetParent, "position" ) === "static" ) ) {
					offsetParent = offsetParent.offsetParent;
				}
				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = /Y/.test( prop );

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? ( prop in win ) ? win[ prop ] :
						win.document.documentElement[ method ] :
						elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : jQuery( win ).scrollLeft(),
						top ? val : jQuery( win ).scrollTop()
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length, null );
		};
	} );

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// if curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

			// margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						// unfortunately, this causes bug #3838 in IE6/8 only,
						// but there is currently no good, small way to fix it.
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

	// The number of elements contained in the matched element set
	jQuery.fn.size = function() {
		return this.length;
	};

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in
	// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
	}));


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {/* build: `node build.js modules=ALL exclude=json,gestures minifier=uglifyjs` */
	/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */

	var fabric = fabric || { version: "1.6.1" };
	if (true) {
	  exports.fabric = fabric;
	}

	if (typeof document !== 'undefined' && typeof window !== 'undefined') {
	  fabric.document = document;
	  fabric.window = window;
	  // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)
	  window.fabric = fabric;
	}
	else {
	  // assume we're running under node.js when document/window are not present
	  fabric.document = __webpack_require__(8)
	    .jsdom("<!DOCTYPE html><html><head></head><body></body></html>");

	  if (fabric.document.createWindow) {
	    fabric.window = fabric.document.createWindow();
	  } else {
	    fabric.window = fabric.document.parentWindow;
	  }
	}

	/**
	 * True when in environment that supports touch events
	 * @type boolean
	 */
	fabric.isTouchSupported = "ontouchstart" in fabric.document.documentElement;

	/**
	 * True when in environment that's probably Node.js
	 * @type boolean
	 */
	fabric.isLikelyNode = typeof Buffer !== 'undefined' &&
	                      typeof window === 'undefined';

	/* _FROM_SVG_START_ */
	/**
	 * Attributes parsed from all SVG elements
	 * @type array
	 */
	fabric.SHARED_ATTRIBUTES = [
	  "display",
	  "transform",
	  "fill", "fill-opacity", "fill-rule",
	  "opacity",
	  "stroke", "stroke-dasharray", "stroke-linecap",
	  "stroke-linejoin", "stroke-miterlimit",
	  "stroke-opacity", "stroke-width",
	  "id"
	];
	/* _FROM_SVG_END_ */

	/**
	 * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.
	 */
	fabric.DPI = 96;
	fabric.reNum = '(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:e[-+]?\\d+)?)';
	fabric.fontPaths = { };

	/**
	 * Device Pixel Ratio
	 * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html
	 */
	fabric.devicePixelRatio = fabric.window.devicePixelRatio ||
	                          fabric.window.webkitDevicePixelRatio ||
	                          fabric.window.mozDevicePixelRatio ||
	                          1;


	(function() {

	  /**
	   * @private
	   * @param {String} eventName
	   * @param {Function} handler
	   */
	  function _removeEventListener(eventName, handler) {
	    if (!this.__eventListeners[eventName]) {
	      return;
	    }
	    var eventListener = this.__eventListeners[eventName];
	    if (handler) {
	      eventListener[eventListener.indexOf(handler)] = false;
	    }
	    else {
	      fabric.util.array.fill(eventListener, false);
	    }
	  }

	  /**
	   * Observes specified event
	   * @deprecated `observe` deprecated since 0.8.34 (use `on` instead)
	   * @memberOf fabric.Observable
	   * @alias on
	   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})
	   * @param {Function} handler Function that receives a notification when an event of the specified type occurs
	   * @return {Self} thisArg
	   * @chainable
	   */
	  function observe(eventName, handler) {
	    if (!this.__eventListeners) {
	      this.__eventListeners = { };
	    }
	    // one object with key/value pairs was passed
	    if (arguments.length === 1) {
	      for (var prop in eventName) {
	        this.on(prop, eventName[prop]);
	      }
	    }
	    else {
	      if (!this.__eventListeners[eventName]) {
	        this.__eventListeners[eventName] = [ ];
	      }
	      this.__eventListeners[eventName].push(handler);
	    }
	    return this;
	  }

	  /**
	   * Stops event observing for a particular event handler. Calling this method
	   * without arguments removes all handlers for all events
	   * @deprecated `stopObserving` deprecated since 0.8.34 (use `off` instead)
	   * @memberOf fabric.Observable
	   * @alias off
	   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})
	   * @param {Function} handler Function to be deleted from EventListeners
	   * @return {Self} thisArg
	   * @chainable
	   */
	  function stopObserving(eventName, handler) {
	    if (!this.__eventListeners) {
	      return;
	    }

	    // remove all key/value pairs (event name -> event handler)
	    if (arguments.length === 0) {
	      for (eventName in this.__eventListeners) {
	        _removeEventListener.call(this, eventName);
	      }
	    }
	    // one object with key/value pairs was passed
	    else if (arguments.length === 1 && typeof arguments[0] === 'object') {
	      for (var prop in eventName) {
	        _removeEventListener.call(this, prop, eventName[prop]);
	      }
	    }
	    else {
	      _removeEventListener.call(this, eventName, handler);
	    }
	    return this;
	  }

	  /**
	   * Fires event with an optional options object
	   * @deprecated `fire` deprecated since 1.0.7 (use `trigger` instead)
	   * @memberOf fabric.Observable
	   * @alias trigger
	   * @param {String} eventName Event name to fire
	   * @param {Object} [options] Options object
	   * @return {Self} thisArg
	   * @chainable
	   */
	  function fire(eventName, options) {
	    if (!this.__eventListeners) {
	      return;
	    }

	    var listenersForEvent = this.__eventListeners[eventName];
	    if (!listenersForEvent) {
	      return;
	    }

	    for (var i = 0, len = listenersForEvent.length; i < len; i++) {
	      listenersForEvent[i] && listenersForEvent[i].call(this, options || { });
	    }
	    this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {
	      return value !== false;
	    });
	    return this;
	  }

	  /**
	   * @namespace fabric.Observable
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}
	   * @see {@link http://fabricjs.com/events|Events demo}
	   */
	  fabric.Observable = {
	    observe: observe,
	    stopObserving: stopObserving,
	    fire: fire,

	    on: observe,
	    off: stopObserving,
	    trigger: fire
	  };
	})();


	/**
	 * @namespace fabric.Collection
	 */
	fabric.Collection = {

	  /**
	   * Adds objects to collection, then renders canvas (if `renderOnAddRemove` is not `false`)
	   * Objects should be instances of (or inherit from) fabric.Object
	   * @param {...fabric.Object} object Zero or more fabric instances
	   * @return {Self} thisArg
	   */
	  add: function () {
	    this._objects.push.apply(this._objects, arguments);
	    for (var i = 0, length = arguments.length; i < length; i++) {
	      this._onObjectAdded(arguments[i]);
	    }
	    this.renderOnAddRemove && this.renderAll();
	    return this;
	  },

	  /**
	   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)
	   * An object should be an instance of (or inherit from) fabric.Object
	   * @param {Object} object Object to insert
	   * @param {Number} index Index to insert object at
	   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs
	   * @return {Self} thisArg
	   * @chainable
	   */
	  insertAt: function (object, index, nonSplicing) {
	    var objects = this.getObjects();
	    if (nonSplicing) {
	      objects[index] = object;
	    }
	    else {
	      objects.splice(index, 0, object);
	    }
	    this._onObjectAdded(object);
	    this.renderOnAddRemove && this.renderAll();
	    return this;
	  },

	  /**
	   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)
	   * @param {...fabric.Object} object Zero or more fabric instances
	   * @return {Self} thisArg
	   * @chainable
	   */
	  remove: function() {
	    var objects = this.getObjects(),
	        index;

	    for (var i = 0, length = arguments.length; i < length; i++) {
	      index = objects.indexOf(arguments[i]);

	      // only call onObjectRemoved if an object was actually removed
	      if (index !== -1) {
	        objects.splice(index, 1);
	        this._onObjectRemoved(arguments[i]);
	      }
	    }

	    this.renderOnAddRemove && this.renderAll();
	    return this;
	  },

	  /**
	   * Executes given function for each object in this group
	   * @param {Function} callback
	   *                   Callback invoked with current object as first argument,
	   *                   index - as second and an array of all objects - as third.
	   *                   Iteration happens in reverse order (for performance reasons).
	   *                   Callback is invoked in a context of Global Object (e.g. `window`)
	   *                   when no `context` argument is given
	   *
	   * @param {Object} context Context (aka thisObject)
	   * @return {Self} thisArg
	   */
	  forEachObject: function(callback, context) {
	    var objects = this.getObjects(),
	        i = objects.length;
	    while (i--) {
	      callback.call(context, objects[i], i, objects);
	    }
	    return this;
	  },

	  /**
	   * Returns an array of children objects of this instance
	   * Type parameter introduced in 1.3.10
	   * @param {String} [type] When specified, only objects of this type are returned
	   * @return {Array}
	   */
	  getObjects: function(type) {
	    if (typeof type === 'undefined') {
	      return this._objects;
	    }
	    return this._objects.filter(function(o) {
	      return o.type === type;
	    });
	  },

	  /**
	   * Returns object at specified index
	   * @param {Number} index
	   * @return {Self} thisArg
	   */
	  item: function (index) {
	    return this.getObjects()[index];
	  },

	  /**
	   * Returns true if collection contains no objects
	   * @return {Boolean} true if collection is empty
	   */
	  isEmpty: function () {
	    return this.getObjects().length === 0;
	  },

	  /**
	   * Returns a size of a collection (i.e: length of an array containing its objects)
	   * @return {Number} Collection size
	   */
	  size: function() {
	    return this.getObjects().length;
	  },

	  /**
	   * Returns true if collection contains an object
	   * @param {Object} object Object to check against
	   * @return {Boolean} `true` if collection contains an object
	   */
	  contains: function(object) {
	    return this.getObjects().indexOf(object) > -1;
	  },

	  /**
	   * Returns number representation of a collection complexity
	   * @return {Number} complexity
	   */
	  complexity: function () {
	    return this.getObjects().reduce(function (memo, current) {
	      memo += current.complexity ? current.complexity() : 0;
	      return memo;
	    }, 0);
	  }
	};


	(function(global) {

	  var sqrt = Math.sqrt,
	      atan2 = Math.atan2,
	      pow = Math.pow,
	      abs = Math.abs,
	      PiBy180 = Math.PI / 180;

	  /**
	   * @namespace fabric.util
	   */
	  fabric.util = {

	    /**
	     * Removes value from an array.
	     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`
	     * @static
	     * @memberOf fabric.util
	     * @param {Array} array
	     * @param {Any} value
	     * @return {Array} original array
	     */
	    removeFromArray: function(array, value) {
	      var idx = array.indexOf(value);
	      if (idx !== -1) {
	        array.splice(idx, 1);
	      }
	      return array;
	    },

	    /**
	     * Returns random number between 2 specified ones.
	     * @static
	     * @memberOf fabric.util
	     * @param {Number} min lower limit
	     * @param {Number} max upper limit
	     * @return {Number} random value (between min and max)
	     */
	    getRandomInt: function(min, max) {
	      return Math.floor(Math.random() * (max - min + 1)) + min;
	    },

	    /**
	     * Transforms degrees to radians.
	     * @static
	     * @memberOf fabric.util
	     * @param {Number} degrees value in degrees
	     * @return {Number} value in radians
	     */
	    degreesToRadians: function(degrees) {
	      return degrees * PiBy180;
	    },

	    /**
	     * Transforms radians to degrees.
	     * @static
	     * @memberOf fabric.util
	     * @param {Number} radians value in radians
	     * @return {Number} value in degrees
	     */
	    radiansToDegrees: function(radians) {
	      return radians / PiBy180;
	    },

	    /**
	     * Rotates `point` around `origin` with `radians`
	     * @static
	     * @memberOf fabric.util
	     * @param {fabric.Point} point The point to rotate
	     * @param {fabric.Point} origin The origin of the rotation
	     * @param {Number} radians The radians of the angle for the rotation
	     * @return {fabric.Point} The new rotated point
	     */
	    rotatePoint: function(point, origin, radians) {
	      point.subtractEquals(origin);
	      var v = fabric.util.rotateVector(point, radians);
	      return new fabric.Point(v.x, v.y).addEquals(origin);
	    },

	    /**
	     * Rotates `vector` with `radians`
	     * @static
	     * @memberOf fabric.util
	     * @param {Object} vector The vector to rotate (x and y)
	     * @param {Number} radians The radians of the angle for the rotation
	     * @return {Object} The new rotated point
	     */
	    rotateVector: function(vector, radians) {
	      var sin = Math.sin(radians),
	          cos = Math.cos(radians),
	          rx = vector.x * cos - vector.y * sin,
	          ry = vector.x * sin + vector.y * cos;
	      return {
	        x: rx,
	        y: ry
	      };
	    },

	    /**
	     * Apply transform t to point p
	     * @static
	     * @memberOf fabric.util
	     * @param  {fabric.Point} p The point to transform
	     * @param  {Array} t The transform
	     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied
	     * @return {fabric.Point} The transformed point
	     */
	    transformPoint: function(p, t, ignoreOffset) {
	      if (ignoreOffset) {
	        return new fabric.Point(
	          t[0] * p.x + t[2] * p.y,
	          t[1] * p.x + t[3] * p.y
	        );
	      }
	      return new fabric.Point(
	        t[0] * p.x + t[2] * p.y + t[4],
	        t[1] * p.x + t[3] * p.y + t[5]
	      );
	    },

	    /**
	     * Returns coordinates of points's bounding rectangle (left, top, width, height)
	     * @param {Array} points 4 points array
	     * @return {Object} Object with left, top, width, height properties
	     */
	    makeBoundingBoxFromPoints: function(points) {
	      var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x],
	          minX = fabric.util.array.min(xPoints),
	          maxX = fabric.util.array.max(xPoints),
	          width = Math.abs(minX - maxX),
	          yPoints = [points[0].y, points[1].y, points[2].y, points[3].y],
	          minY = fabric.util.array.min(yPoints),
	          maxY = fabric.util.array.max(yPoints),
	          height = Math.abs(minY - maxY);

	      return {
	        left: minX,
	        top: minY,
	        width: width,
	        height: height
	      };
	    },

	    /**
	     * Invert transformation t
	     * @static
	     * @memberOf fabric.util
	     * @param {Array} t The transform
	     * @return {Array} The inverted transform
	     */
	    invertTransform: function(t) {
	      var a = 1 / (t[0] * t[3] - t[1] * t[2]),
	          r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],
	          o = fabric.util.transformPoint({ x: t[4], y: t[5] }, r, true);
	      r[4] = -o.x;
	      r[5] = -o.y;
	      return r;
	    },

	    /**
	     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.
	     * @static
	     * @memberOf fabric.util
	     * @param {Number|String} number number to operate on
	     * @param {Number} fractionDigits number of fraction digits to "leave"
	     * @return {Number}
	     */
	    toFixed: function(number, fractionDigits) {
	      return parseFloat(Number(number).toFixed(fractionDigits));
	    },

	    /**
	     * Converts from attribute value to pixel value if applicable.
	     * Returns converted pixels or original value not converted.
	     * @param {Number|String} value number to operate on
	     * @return {Number|String}
	     */
	    parseUnit: function(value, fontSize) {
	      var unit = /\D{0,2}$/.exec(value),
	          number = parseFloat(value);
	      if (!fontSize) {
	        fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;
	      }
	      switch (unit[0]) {
	        case 'mm':
	          return number * fabric.DPI / 25.4;

	        case 'cm':
	          return number * fabric.DPI / 2.54;

	        case 'in':
	          return number * fabric.DPI;

	        case 'pt':
	          return number * fabric.DPI / 72; // or * 4 / 3

	        case 'pc':
	          return number * fabric.DPI / 72 * 12; // or * 16

	        case 'em':
	          return number * fontSize;

	        default:
	          return number;
	      }
	    },

	    /**
	     * Function which always returns `false`.
	     * @static
	     * @memberOf fabric.util
	     * @return {Boolean}
	     */
	    falseFunction: function() {
	      return false;
	    },

	    /**
	     * Returns klass "Class" object of given namespace
	     * @memberOf fabric.util
	     * @param {String} type Type of object (eg. 'circle')
	     * @param {String} namespace Namespace to get klass "Class" object from
	     * @return {Object} klass "Class"
	     */
	    getKlass: function(type, namespace) {
	      // capitalize first letter only
	      type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));
	      return fabric.util.resolveNamespace(namespace)[type];
	    },

	    /**
	     * Returns object of given namespace
	     * @memberOf fabric.util
	     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'
	     * @return {Object} Object for given namespace (default fabric)
	     */
	    resolveNamespace: function(namespace) {
	      if (!namespace) {
	        return fabric;
	      }

	      var parts = namespace.split('.'),
	          len = parts.length,
	          obj = global || fabric.window;

	      for (var i = 0; i < len; ++i) {
	        obj = obj[parts[i]];
	      }

	      return obj;
	    },

	    /**
	     * Loads image element from given url and passes it to a callback
	     * @memberOf fabric.util
	     * @param {String} url URL representing an image
	     * @param {Function} callback Callback; invoked with loaded image
	     * @param {Any} [context] Context to invoke callback in
	     * @param {Object} [crossOrigin] crossOrigin value to set image element to
	     */
	    loadImage: function(url, callback, context, crossOrigin) {
	      if (!url) {
	        callback && callback.call(context, url);
	        return;
	      }

	      var img = fabric.util.createImage();

	      /** @ignore */
	      img.onload = function () {
	        callback && callback.call(context, img);
	        img = img.onload = img.onerror = null;
	      };

	      /** @ignore */
	      img.onerror = function() {
	        fabric.log('Error loading ' + img.src);
	        callback && callback.call(context, null, true);
	        img = img.onload = img.onerror = null;
	      };

	      // data-urls appear to be buggy with crossOrigin
	      // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767
	      // see https://code.google.com/p/chromium/issues/detail?id=315152
	      //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069
	      if (url.indexOf('data') !== 0 && crossOrigin) {
	        img.crossOrigin = crossOrigin;
	      }

	      img.src = url;
	    },

	    /**
	     * Creates corresponding fabric instances from their object representations
	     * @static
	     * @memberOf fabric.util
	     * @param {Array} objects Objects to enliven
	     * @param {Function} callback Callback to invoke when all objects are created
	     * @param {String} namespace Namespace to get klass "Class" object from
	     * @param {Function} reviver Method for further parsing of object elements,
	     * called after each fabric object created.
	     */
	    enlivenObjects: function(objects, callback, namespace, reviver) {
	      objects = objects || [ ];

	      function onLoaded() {
	        if (++numLoadedObjects === numTotalObjects) {
	          callback && callback(enlivenedObjects);
	        }
	      }

	      var enlivenedObjects = [ ],
	          numLoadedObjects = 0,
	          numTotalObjects = objects.length;

	      if (!numTotalObjects) {
	        callback && callback(enlivenedObjects);
	        return;
	      }

	      objects.forEach(function (o, index) {
	        // if sparse array
	        if (!o || !o.type) {
	          onLoaded();
	          return;
	        }
	        var klass = fabric.util.getKlass(o.type, namespace);
	        if (klass.async) {
	          klass.fromObject(o, function (obj, error) {
	            if (!error) {
	              enlivenedObjects[index] = obj;
	              reviver && reviver(o, enlivenedObjects[index]);
	            }
	            onLoaded();
	          });
	        }
	        else {
	          enlivenedObjects[index] = klass.fromObject(o);
	          reviver && reviver(o, enlivenedObjects[index]);
	          onLoaded();
	        }
	      });
	    },

	    /**
	     * Groups SVG elements (usually those retrieved from SVG document)
	     * @static
	     * @memberOf fabric.util
	     * @param {Array} elements SVG elements to group
	     * @param {Object} [options] Options object
	     * @return {fabric.Object|fabric.PathGroup}
	     */
	    groupSVGElements: function(elements, options, path) {
	      var object;

	      object = new fabric.PathGroup(elements, options);

	      if (typeof path !== 'undefined') {
	        object.setSourcePath(path);
	      }
	      return object;
	    },

	    /**
	     * Populates an object with properties of another object
	     * @static
	     * @memberOf fabric.util
	     * @param {Object} source Source object
	     * @param {Object} destination Destination object
	     * @return {Array} properties Propertie names to include
	     */
	    populateWithProperties: function(source, destination, properties) {
	      if (properties && Object.prototype.toString.call(properties) === '[object Array]') {
	        for (var i = 0, len = properties.length; i < len; i++) {
	          if (properties[i] in source) {
	            destination[properties[i]] = source[properties[i]];
	          }
	        }
	      }
	    },

	    /**
	     * Draws a dashed line between two points
	     *
	     * This method is used to draw dashed line around selection area.
	     * See <a href="http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas">dotted stroke in canvas</a>
	     *
	     * @param {CanvasRenderingContext2D} ctx context
	     * @param {Number} x  start x coordinate
	     * @param {Number} y start y coordinate
	     * @param {Number} x2 end x coordinate
	     * @param {Number} y2 end y coordinate
	     * @param {Array} da dash array pattern
	     */
	    drawDashedLine: function(ctx, x, y, x2, y2, da) {
	      var dx = x2 - x,
	          dy = y2 - y,
	          len = sqrt(dx * dx + dy * dy),
	          rot = atan2(dy, dx),
	          dc = da.length,
	          di = 0,
	          draw = true;

	      ctx.save();
	      ctx.translate(x, y);
	      ctx.moveTo(0, 0);
	      ctx.rotate(rot);

	      x = 0;
	      while (len > x) {
	        x += da[di++ % dc];
	        if (x > len) {
	          x = len;
	        }
	        ctx[draw ? 'lineTo' : 'moveTo'](x, 0);
	        draw = !draw;
	      }

	      ctx.restore();
	    },

	    /**
	     * Creates canvas element and initializes it via excanvas if necessary
	     * @static
	     * @memberOf fabric.util
	     * @param {CanvasElement} [canvasEl] optional canvas element to initialize;
	     * when not given, element is created implicitly
	     * @return {CanvasElement} initialized canvas element
	     */
	    createCanvasElement: function(canvasEl) {
	      canvasEl || (canvasEl = fabric.document.createElement('canvas'));
	      //jscs:disable requireCamelCaseOrUpperCaseIdentifiers
	      if (!canvasEl.getContext && typeof G_vmlCanvasManager !== 'undefined') {
	        G_vmlCanvasManager.initElement(canvasEl);
	      }
	      //jscs:enable requireCamelCaseOrUpperCaseIdentifiers
	      return canvasEl;
	    },

	    /**
	     * Creates image element (works on client and node)
	     * @static
	     * @memberOf fabric.util
	     * @return {HTMLImageElement} HTML image element
	     */
	    createImage: function() {
	      return fabric.isLikelyNode
	        ? new (__webpack_require__(9).Image)()
	        : fabric.document.createElement('img');
	    },

	    /**
	     * Creates accessors (getXXX, setXXX) for a "class", based on "stateProperties" array
	     * @static
	     * @memberOf fabric.util
	     * @param {Object} klass "Class" to create accessors for
	     */
	    createAccessors: function(klass) {
	      var proto = klass.prototype;

	      for (var i = proto.stateProperties.length; i--; ) {

	        var propName = proto.stateProperties[i],
	            capitalizedPropName = propName.charAt(0).toUpperCase() + propName.slice(1),
	            setterName = 'set' + capitalizedPropName,
	            getterName = 'get' + capitalizedPropName;

	        // using `new Function` for better introspection
	        if (!proto[getterName]) {
	          proto[getterName] = (function(property) {
	            return new Function('return this.get("' + property + '")');
	          })(propName);
	        }
	        if (!proto[setterName]) {
	          proto[setterName] = (function(property) {
	            return new Function('value', 'return this.set("' + property + '", value)');
	          })(propName);
	        }
	      }
	    },

	    /**
	     * @static
	     * @memberOf fabric.util
	     * @param {fabric.Object} receiver Object implementing `clipTo` method
	     * @param {CanvasRenderingContext2D} ctx Context to clip
	     */
	    clipContext: function(receiver, ctx) {
	      ctx.save();
	      ctx.beginPath();
	      receiver.clipTo(ctx);
	      ctx.clip();
	    },

	    /**
	     * Multiply matrix A by matrix B to nest transformations
	     * @static
	     * @memberOf fabric.util
	     * @param  {Array} a First transformMatrix
	     * @param  {Array} b Second transformMatrix
	     * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices
	     * @return {Array} The product of the two transform matrices
	     */
	    multiplyTransformMatrices: function(a, b, is2x2) {
	      // Matrix multiply a * b
	      return [
	        a[0] * b[0] + a[2] * b[1],
	        a[1] * b[0] + a[3] * b[1],
	        a[0] * b[2] + a[2] * b[3],
	        a[1] * b[2] + a[3] * b[3],
	        is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],
	        is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]
	      ];
	    },

	    /**
	     * Decomposes standard 2x2 matrix into transform componentes
	     * @static
	     * @memberOf fabric.util
	     * @param  {Array} a transformMatrix
	     * @return {Object} Components of transform
	     */
	    qrDecompose: function(a) {
	      var angle = atan2(a[1], a[0]),
	          denom = pow(a[0], 2) + pow(a[1], 2),
	          scaleX = sqrt(denom),
	          scaleY = (a[0] * a[3] - a[2] * a [1]) / scaleX,
	          skewX = atan2(a[0] * a[2] + a[1] * a [3], denom);
	      return {
	        angle: angle  / PiBy180,
	        scaleX: scaleX,
	        scaleY: scaleY,
	        skewX: skewX / PiBy180,
	        skewY: 0,
	        translateX: a[4],
	        translateY: a[5]
	      };
	    },

	    customTransformMatrix: function(scaleX, scaleY, skewX) {
	      var skewMatrixX = [1, 0, abs(Math.tan(skewX * PiBy180)), 1],
	          scaleMatrix = [abs(scaleX), 0, 0, abs(scaleY)];
	      return fabric.util.multiplyTransformMatrices(scaleMatrix, skewMatrixX, true);
	    },

	    resetObjectTransform: function (target) {
	      target.scaleX = 1;
	      target.scaleY = 1;
	      target.skewX = 0;
	      target.skewY = 0;
	      target.flipX = false;
	      target.flipY = false;
	      target.setAngle(0);
	    },

	    /**
	     * Returns string representation of function body
	     * @param {Function} fn Function to get body of
	     * @return {String} Function body
	     */
	    getFunctionBody: function(fn) {
	      return (String(fn).match(/function[^{]*\{([\s\S]*)\}/) || {})[1];
	    },

	    /**
	     * Returns true if context has transparent pixel
	     * at specified location (taking tolerance into account)
	     * @param {CanvasRenderingContext2D} ctx context
	     * @param {Number} x x coordinate
	     * @param {Number} y y coordinate
	     * @param {Number} tolerance Tolerance
	     */
	    isTransparent: function(ctx, x, y, tolerance) {

	      // If tolerance is > 0 adjust start coords to take into account.
	      // If moves off Canvas fix to 0
	      if (tolerance > 0) {
	        if (x > tolerance) {
	          x -= tolerance;
	        }
	        else {
	          x = 0;
	        }
	        if (y > tolerance) {
	          y -= tolerance;
	        }
	        else {
	          y = 0;
	        }
	      }

	      var _isTransparent = true,
	          imageData = ctx.getImageData(x, y, (tolerance * 2) || 1, (tolerance * 2) || 1);

	      // Split image data - for tolerance > 1, pixelDataSize = 4;
	      for (var i = 3, l = imageData.data.length; i < l; i += 4) {
	        var temp = imageData.data[i];
	        _isTransparent = temp <= 0;
	        if (_isTransparent === false) {
	          break; // Stop if colour found
	        }
	      }

	      imageData = null;

	      return _isTransparent;
	    },

	    /**
	     * Parse preserveAspectRatio attribute from element
	     * @param {string} attribute to be parsed
	     * @return {Object} an object containing align and meetOrSlice attribute
	     */
	    parsePreserveAspectRatioAttribute: function(attribute) {
	      var meetOrSlice = 'meet', alignX = 'Mid', alignY = 'Mid',
	          aspectRatioAttrs = attribute.split(' '), align;

	      if (aspectRatioAttrs && aspectRatioAttrs.length) {
	        meetOrSlice = aspectRatioAttrs.pop();
	        if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {
	          align = meetOrSlice;
	          meetOrSlice = 'meet';
	        }
	        else if (aspectRatioAttrs.length) {
	          align = aspectRatioAttrs.pop();
	        }
	      }
	      //divide align in alignX and alignY
	      alignX = align !== 'none' ? align.slice(1, 4) : 'none';
	      alignY = align !== 'none' ? align.slice(5, 8) : 'none';
	      return {
	        meetOrSlice: meetOrSlice,
	        alignX: alignX,
	        alignY: alignY
	      };
	    }
	  };

	})( true ? exports : this);


	(function() {

	  var arcToSegmentsCache = { },
	      segmentToBezierCache = { },
	      boundsOfCurveCache = { },
	      _join = Array.prototype.join;

	  /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp
	   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here
	   * http://mozilla.org/MPL/2.0/
	   */
	  function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {
	    var argsString = _join.call(arguments);
	    if (arcToSegmentsCache[argsString]) {
	      return arcToSegmentsCache[argsString];
	    }

	    var PI = Math.PI, th = rotateX * PI / 180,
	        sinTh = Math.sin(th),
	        cosTh = Math.cos(th),
	        fromX = 0, fromY = 0;

	    rx = Math.abs(rx);
	    ry = Math.abs(ry);

	    var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,
	        py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,
	        rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px,
	        pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,
	        root = 0;

	    if (pl < 0) {
	      var s = Math.sqrt(1 - pl/(rx2 * ry2));
	      rx *= s;
	      ry *= s;
	    }
	    else {
	      root = (large === sweep ? -1.0 : 1.0) *
	              Math.sqrt( pl /(rx2 * py2 + ry2 * px2));
	    }

	    var cx = root * rx * py / ry,
	        cy = -root * ry * px / rx,
	        cx1 = cosTh * cx - sinTh * cy + toX * 0.5,
	        cy1 = sinTh * cx + cosTh * cy + toY * 0.5,
	        mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),
	        dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);

	    if (sweep === 0 && dtheta > 0) {
	      dtheta -= 2 * PI;
	    }
	    else if (sweep === 1 && dtheta < 0) {
	      dtheta += 2 * PI;
	    }

	    // Convert into cubic bezier segments <= 90deg
	    var segments = Math.ceil(Math.abs(dtheta / PI * 2)),
	        result = [], mDelta = dtheta / segments,
	        mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),
	        th3 = mTheta + mDelta;

	    for (var i = 0; i < segments; i++) {
	      result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);
	      fromX = result[i][4];
	      fromY = result[i][5];
	      mTheta = th3;
	      th3 += mDelta;
	    }
	    arcToSegmentsCache[argsString] = result;
	    return result;
	  }

	  function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {
	    var argsString2 = _join.call(arguments);
	    if (segmentToBezierCache[argsString2]) {
	      return segmentToBezierCache[argsString2];
	    }

	    var costh2 = Math.cos(th2),
	        sinth2 = Math.sin(th2),
	        costh3 = Math.cos(th3),
	        sinth3 = Math.sin(th3),
	        toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,
	        toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,
	        cp1X = fromX + mT * ( - cosTh * rx * sinth2 - sinTh * ry * costh2),
	        cp1Y = fromY + mT * ( - sinTh * rx * sinth2 + cosTh * ry * costh2),
	        cp2X = toX + mT * ( cosTh * rx * sinth3 + sinTh * ry * costh3),
	        cp2Y = toY + mT * ( sinTh * rx * sinth3 - cosTh * ry * costh3);

	    segmentToBezierCache[argsString2] = [
	      cp1X, cp1Y,
	      cp2X, cp2Y,
	      toX, toY
	    ];
	    return segmentToBezierCache[argsString2];
	  }

	  /*
	   * Private
	   */
	  function calcVectorAngle(ux, uy, vx, vy) {
	    var ta = Math.atan2(uy, ux),
	        tb = Math.atan2(vy, vx);
	    if (tb >= ta) {
	      return tb - ta;
	    }
	    else {
	      return 2 * Math.PI - (ta - tb);
	    }
	  }

	  /**
	   * Draws arc
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {Number} fx
	   * @param {Number} fy
	   * @param {Array} coords
	   */
	  fabric.util.drawArc = function(ctx, fx, fy, coords) {
	    var rx = coords[0],
	        ry = coords[1],
	        rot = coords[2],
	        large = coords[3],
	        sweep = coords[4],
	        tx = coords[5],
	        ty = coords[6],
	        segs = [[ ], [ ], [ ], [ ]],
	        segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);

	    for (var i = 0, len = segsNorm.length; i < len; i++) {
	      segs[i][0] = segsNorm[i][0] + fx;
	      segs[i][1] = segsNorm[i][1] + fy;
	      segs[i][2] = segsNorm[i][2] + fx;
	      segs[i][3] = segsNorm[i][3] + fy;
	      segs[i][4] = segsNorm[i][4] + fx;
	      segs[i][5] = segsNorm[i][5] + fy;
	      ctx.bezierCurveTo.apply(ctx, segs[i]);
	    }
	  };

	  /**
	   * Calculate bounding box of a elliptic-arc
	   * @param {Number} fx start point of arc
	   * @param {Number} fy
	   * @param {Number} rx horizontal radius
	   * @param {Number} ry vertical radius
	   * @param {Number} rot angle of horizontal axe
	   * @param {Number} large 1 or 0, whatever the arc is the big or the small on the 2 points
	   * @param {Number} sweep 1 or 0, 1 clockwise or counterclockwise direction
	   * @param {Number} tx end point of arc
	   * @param {Number} ty
	   */
	  fabric.util.getBoundsOfArc = function(fx, fy, rx, ry, rot, large, sweep, tx, ty) {

	    var fromX = 0, fromY = 0, bound = [ ], bounds = [ ],
	    segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot),
	    boundCopy = [[ ], [ ]];

	    for (var i = 0, len = segs.length; i < len; i++) {
	      bound = getBoundsOfCurve(fromX, fromY, segs[i][0], segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5]);
	      boundCopy[0].x = bound[0].x + fx;
	      boundCopy[0].y = bound[0].y + fy;
	      boundCopy[1].x = bound[1].x + fx;
	      boundCopy[1].y = bound[1].y + fy;
	      bounds.push(boundCopy[0]);
	      bounds.push(boundCopy[1]);
	      fromX = segs[i][4];
	      fromY = segs[i][5];
	    }
	    return bounds;
	  };

	  /**
	   * Calculate bounding box of a beziercurve
	   * @param {Number} x0 starting point
	   * @param {Number} y0
	   * @param {Number} x1 first control point
	   * @param {Number} y1
	   * @param {Number} x2 secondo control point
	   * @param {Number} y2
	   * @param {Number} x3 end of beizer
	   * @param {Number} y3
	   */
	  // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.
	  function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {
	    var argsString = _join.call(arguments);
	    if (boundsOfCurveCache[argsString]) {
	      return boundsOfCurveCache[argsString];
	    }

	    var sqrt = Math.sqrt,
	        min = Math.min, max = Math.max,
	        abs = Math.abs, tvalues = [ ],
	        bounds = [[ ], [ ]],
	        a, b, c, t, t1, t2, b2ac, sqrtb2ac;

	    b = 6 * x0 - 12 * x1 + 6 * x2;
	    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
	    c = 3 * x1 - 3 * x0;

	    for (var i = 0; i < 2; ++i) {
	      if (i > 0) {
	        b = 6 * y0 - 12 * y1 + 6 * y2;
	        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
	        c = 3 * y1 - 3 * y0;
	      }

	      if (abs(a) < 1e-12) {
	        if (abs(b) < 1e-12) {
	          continue;
	        }
	        t = -c / b;
	        if (0 < t && t < 1) {
	          tvalues.push(t);
	        }
	        continue;
	      }
	      b2ac = b * b - 4 * c * a;
	      if (b2ac < 0) {
	        continue;
	      }
	      sqrtb2ac = sqrt(b2ac);
	      t1 = (-b + sqrtb2ac) / (2 * a);
	      if (0 < t1 && t1 < 1) {
	        tvalues.push(t1);
	      }
	      t2 = (-b - sqrtb2ac) / (2 * a);
	      if (0 < t2 && t2 < 1) {
	        tvalues.push(t2);
	      }
	    }

	    var x, y, j = tvalues.length, jlen = j, mt;
	    while (j--) {
	      t = tvalues[j];
	      mt = 1 - t;
	      x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);
	      bounds[0][j] = x;

	      y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);
	      bounds[1][j] = y;
	    }

	    bounds[0][jlen] = x0;
	    bounds[1][jlen] = y0;
	    bounds[0][jlen + 1] = x3;
	    bounds[1][jlen + 1] = y3;
	    var result = [
	      {
	        x: min.apply(null, bounds[0]),
	        y: min.apply(null, bounds[1])
	      },
	      {
	        x: max.apply(null, bounds[0]),
	        y: max.apply(null, bounds[1])
	      }
	    ];
	    boundsOfCurveCache[argsString] = result;
	    return result;
	  }

	  fabric.util.getBoundsOfCurve = getBoundsOfCurve;

	})();


	(function() {

	  var slice = Array.prototype.slice;

	  /* _ES5_COMPAT_START_ */

	  if (!Array.prototype.indexOf) {
	    /**
	     * Finds index of an element in an array
	     * @param {Any} searchElement
	     * @param {Number} [fromIndex]
	     * @return {Number}
	     */
	    Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {
	      if (this === void 0 || this === null) {
	        throw new TypeError();
	      }
	      var t = Object(this), len = t.length >>> 0;
	      if (len === 0) {
	        return -1;
	      }
	      var n = 0;
	      if (arguments.length > 0) {
	        n = Number(arguments[1]);
	        if (n !== n) { // shortcut for verifying if it's NaN
	          n = 0;
	        }
	        else if (n !== 0 && n !== Number.POSITIVE_INFINITY && n !== Number.NEGATIVE_INFINITY) {
	          n = (n > 0 || -1) * Math.floor(Math.abs(n));
	        }
	      }
	      if (n >= len) {
	        return -1;
	      }
	      var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
	      for (; k < len; k++) {
	        if (k in t && t[k] === searchElement) {
	          return k;
	        }
	      }
	      return -1;
	    };
	  }

	  if (!Array.prototype.forEach) {
	    /**
	     * Iterates an array, invoking callback for each element
	     * @param {Function} fn Callback to invoke for each element
	     * @param {Object} [context] Context to invoke callback in
	     * @return {Array}
	     */
	    Array.prototype.forEach = function(fn, context) {
	      for (var i = 0, len = this.length >>> 0; i < len; i++) {
	        if (i in this) {
	          fn.call(context, this[i], i, this);
	        }
	      }
	    };
	  }

	  if (!Array.prototype.map) {
	    /**
	     * Returns a result of iterating over an array, invoking callback for each element
	     * @param {Function} fn Callback to invoke for each element
	     * @param {Object} [context] Context to invoke callback in
	     * @return {Array}
	     */
	    Array.prototype.map = function(fn, context) {
	      var result = [ ];
	      for (var i = 0, len = this.length >>> 0; i < len; i++) {
	        if (i in this) {
	          result[i] = fn.call(context, this[i], i, this);
	        }
	      }
	      return result;
	    };
	  }

	  if (!Array.prototype.every) {
	    /**
	     * Returns true if a callback returns truthy value for all elements in an array
	     * @param {Function} fn Callback to invoke for each element
	     * @param {Object} [context] Context to invoke callback in
	     * @return {Boolean}
	     */
	    Array.prototype.every = function(fn, context) {
	      for (var i = 0, len = this.length >>> 0; i < len; i++) {
	        if (i in this && !fn.call(context, this[i], i, this)) {
	          return false;
	        }
	      }
	      return true;
	    };
	  }

	  if (!Array.prototype.some) {
	    /**
	     * Returns true if a callback returns truthy value for at least one element in an array
	     * @param {Function} fn Callback to invoke for each element
	     * @param {Object} [context] Context to invoke callback in
	     * @return {Boolean}
	     */
	    Array.prototype.some = function(fn, context) {
	      for (var i = 0, len = this.length >>> 0; i < len; i++) {
	        if (i in this && fn.call(context, this[i], i, this)) {
	          return true;
	        }
	      }
	      return false;
	    };
	  }

	  if (!Array.prototype.filter) {
	    /**
	     * Returns the result of iterating over elements in an array
	     * @param {Function} fn Callback to invoke for each element
	     * @param {Object} [context] Context to invoke callback in
	     * @return {Array}
	     */
	    Array.prototype.filter = function(fn, context) {
	      var result = [ ], val;
	      for (var i = 0, len = this.length >>> 0; i < len; i++) {
	        if (i in this) {
	          val = this[i]; // in case fn mutates this
	          if (fn.call(context, val, i, this)) {
	            result.push(val);
	          }
	        }
	      }
	      return result;
	    };
	  }

	  if (!Array.prototype.reduce) {
	    /**
	     * Returns "folded" (reduced) result of iterating over elements in an array
	     * @param {Function} fn Callback to invoke for each element
	     * @param {Object} [initial] Object to use as the first argument to the first call of the callback
	     * @return {Any}
	     */
	    Array.prototype.reduce = function(fn /*, initial*/) {
	      var len = this.length >>> 0,
	          i = 0,
	          rv;

	      if (arguments.length > 1) {
	        rv = arguments[1];
	      }
	      else {
	        do {
	          if (i in this) {
	            rv = this[i++];
	            break;
	          }
	          // if array contains no values, no initial value to return
	          if (++i >= len) {
	            throw new TypeError();
	          }
	        }
	        while (true);
	      }
	      for (; i < len; i++) {
	        if (i in this) {
	          rv = fn.call(null, rv, this[i], i, this);
	        }
	      }
	      return rv;
	    };
	  }

	  /* _ES5_COMPAT_END_ */

	  /**
	   * Invokes method on all items in a given array
	   * @memberOf fabric.util.array
	   * @param {Array} array Array to iterate over
	   * @param {String} method Name of a method to invoke
	   * @return {Array}
	   */
	  function invoke(array, method) {
	    var args = slice.call(arguments, 2), result = [ ];
	    for (var i = 0, len = array.length; i < len; i++) {
	      result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);
	    }
	    return result;
	  }

	  /**
	   * Finds maximum value in array (not necessarily "first" one)
	   * @memberOf fabric.util.array
	   * @param {Array} array Array to iterate over
	   * @param {String} byProperty
	   * @return {Any}
	   */
	  function max(array, byProperty) {
	    return find(array, byProperty, function(value1, value2) {
	      return value1 >= value2;
	    });
	  }

	  /**
	   * Finds minimum value in array (not necessarily "first" one)
	   * @memberOf fabric.util.array
	   * @param {Array} array Array to iterate over
	   * @param {String} byProperty
	   * @return {Any}
	   */
	  function min(array, byProperty) {
	    return find(array, byProperty, function(value1, value2) {
	      return value1 < value2;
	    });
	  }

	  /**
	   * @private
	   */
	  function fill(array, value) {
	    var k = array.length;
	    while (k--) {
	      array[k] = value;
	    }
	    return array;
	  }

	  /**
	   * @private
	   */
	  function find(array, byProperty, condition) {
	    if (!array || array.length === 0) {
	      return;
	    }

	    var i = array.length - 1,
	        result = byProperty ? array[i][byProperty] : array[i];
	    if (byProperty) {
	      while (i--) {
	        if (condition(array[i][byProperty], result)) {
	          result = array[i][byProperty];
	        }
	      }
	    }
	    else {
	      while (i--) {
	        if (condition(array[i], result)) {
	          result = array[i];
	        }
	      }
	    }
	    return result;
	  }

	  /**
	   * @namespace fabric.util.array
	   */
	  fabric.util.array = {
	    fill: fill,
	    invoke: invoke,
	    min: min,
	    max: max
	  };

	})();


	(function() {

	  /**
	   * Copies all enumerable properties of one object to another
	   * @memberOf fabric.util.object
	   * @param {Object} destination Where to copy to
	   * @param {Object} source Where to copy from
	   * @return {Object}
	   */
	  function extend(destination, source) {
	    // JScript DontEnum bug is not taken care of
	    for (var property in source) {
	      destination[property] = source[property];
	    }
	    return destination;
	  }

	  /**
	   * Creates an empty object and copies all enumerable properties of another object to it
	   * @memberOf fabric.util.object
	   * @param {Object} object Object to clone
	   * @return {Object}
	   */
	  function clone(object) {
	    return extend({ }, object);
	  }

	  /** @namespace fabric.util.object */
	  fabric.util.object = {
	    extend: extend,
	    clone: clone
	  };

	})();


	(function() {

	  /* _ES5_COMPAT_START_ */
	  if (!String.prototype.trim) {
	    /**
	     * Trims a string (removing whitespace from the beginning and the end)
	     * @function external:String#trim
	     * @see <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/Trim">String#trim on MDN</a>
	     */
	    String.prototype.trim = function () {
	      // this trim is not fully ES3 or ES5 compliant, but it should cover most cases for now
	      return this.replace(/^[\s\xA0]+/, '').replace(/[\s\xA0]+$/, '');
	    };
	  }
	  /* _ES5_COMPAT_END_ */

	  /**
	   * Camelizes a string
	   * @memberOf fabric.util.string
	   * @param {String} string String to camelize
	   * @return {String} Camelized version of a string
	   */
	  function camelize(string) {
	    return string.replace(/-+(.)?/g, function(match, character) {
	      return character ? character.toUpperCase() : '';
	    });
	  }

	  /**
	   * Capitalizes a string
	   * @memberOf fabric.util.string
	   * @param {String} string String to capitalize
	   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized
	   * and other letters stay untouched, if false first letter is capitalized
	   * and other letters are converted to lowercase.
	   * @return {String} Capitalized version of a string
	   */
	  function capitalize(string, firstLetterOnly) {
	    return string.charAt(0).toUpperCase() +
	      (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());
	  }

	  /**
	   * Escapes XML in a string
	   * @memberOf fabric.util.string
	   * @param {String} string String to escape
	   * @return {String} Escaped version of a string
	   */
	  function escapeXml(string) {
	    return string.replace(/&/g, '&amp;')
	       .replace(/"/g, '&quot;')
	       .replace(/'/g, '&apos;')
	       .replace(/</g, '&lt;')
	       .replace(/>/g, '&gt;');
	  }

	  /**
	   * String utilities
	   * @namespace fabric.util.string
	   */
	  fabric.util.string = {
	    camelize: camelize,
	    capitalize: capitalize,
	    escapeXml: escapeXml
	  };
	}());


	/* _ES5_COMPAT_START_ */
	(function() {

	  var slice = Array.prototype.slice,
	      apply = Function.prototype.apply,
	      Dummy = function() { };

	  if (!Function.prototype.bind) {
	    /**
	     * Cross-browser approximation of ES5 Function.prototype.bind (not fully spec conforming)
	     * @see <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind">Function#bind on MDN</a>
	     * @param {Object} thisArg Object to bind function to
	     * @param {Any[]} Values to pass to a bound function
	     * @return {Function}
	     */
	    Function.prototype.bind = function(thisArg) {
	      var _this = this, args = slice.call(arguments, 1), bound;
	      if (args.length) {
	        bound = function() {
	          return apply.call(_this, this instanceof Dummy ? this : thisArg, args.concat(slice.call(arguments)));
	        };
	      }
	      else {
	        /** @ignore */
	        bound = function() {
	          return apply.call(_this, this instanceof Dummy ? this : thisArg, arguments);
	        };
	      }
	      Dummy.prototype = this.prototype;
	      bound.prototype = new Dummy();

	      return bound;
	    };
	  }

	})();
	/* _ES5_COMPAT_END_ */


	(function() {

	  var slice = Array.prototype.slice, emptyFunction = function() { },

	      IS_DONTENUM_BUGGY = (function() {
	        for (var p in { toString: 1 }) {
	          if (p === 'toString') {
	            return false;
	          }
	        }
	        return true;
	      })(),

	      /** @ignore */
	      addMethods = function(klass, source, parent) {
	        for (var property in source) {

	          if (property in klass.prototype &&
	              typeof klass.prototype[property] === 'function' &&
	              (source[property] + '').indexOf('callSuper') > -1) {

	            klass.prototype[property] = (function(property) {
	              return function() {

	                var superclass = this.constructor.superclass;
	                this.constructor.superclass = parent;
	                var returnValue = source[property].apply(this, arguments);
	                this.constructor.superclass = superclass;

	                if (property !== 'initialize') {
	                  return returnValue;
	                }
	              };
	            })(property);
	          }
	          else {
	            klass.prototype[property] = source[property];
	          }

	          if (IS_DONTENUM_BUGGY) {
	            if (source.toString !== Object.prototype.toString) {
	              klass.prototype.toString = source.toString;
	            }
	            if (source.valueOf !== Object.prototype.valueOf) {
	              klass.prototype.valueOf = source.valueOf;
	            }
	          }
	        }
	      };

	  function Subclass() { }

	  function callSuper(methodName) {
	    var fn = this.constructor.superclass.prototype[methodName];
	    return (arguments.length > 1)
	      ? fn.apply(this, slice.call(arguments, 1))
	      : fn.call(this);
	  }

	  /**
	   * Helper for creation of "classes".
	   * @memberOf fabric.util
	   * @param {Function} [parent] optional "Class" to inherit from
	   * @param {Object} [properties] Properties shared by all instances of this class
	   *                  (be careful modifying objects defined here as this would affect all instances)
	   */
	  function createClass() {
	    var parent = null,
	        properties = slice.call(arguments, 0);

	    if (typeof properties[0] === 'function') {
	      parent = properties.shift();
	    }
	    function klass() {
	      this.initialize.apply(this, arguments);
	    }

	    klass.superclass = parent;
	    klass.subclasses = [ ];

	    if (parent) {
	      Subclass.prototype = parent.prototype;
	      klass.prototype = new Subclass();
	      parent.subclasses.push(klass);
	    }
	    for (var i = 0, length = properties.length; i < length; i++) {
	      addMethods(klass, properties[i], parent);
	    }
	    if (!klass.prototype.initialize) {
	      klass.prototype.initialize = emptyFunction;
	    }
	    klass.prototype.constructor = klass;
	    klass.prototype.callSuper = callSuper;
	    return klass;
	  }

	  fabric.util.createClass = createClass;
	})();


	(function () {

	  var unknown = 'unknown';

	  /* EVENT HANDLING */

	  function areHostMethods(object) {
	    var methodNames = Array.prototype.slice.call(arguments, 1),
	        t, i, len = methodNames.length;
	    for (i = 0; i < len; i++) {
	      t = typeof object[methodNames[i]];
	      if (!(/^(?:function|object|unknown)$/).test(t)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /** @ignore */
	  var getElement,
	      setElement,
	      getUniqueId = (function () {
	        var uid = 0;
	        return function (element) {
	          return element.__uniqueID || (element.__uniqueID = 'uniqueID__' + uid++);
	        };
	      })();

	  (function () {
	    var elements = { };
	    /** @ignore */
	    getElement = function (uid) {
	      return elements[uid];
	    };
	    /** @ignore */
	    setElement = function (uid, element) {
	      elements[uid] = element;
	    };
	  })();

	  function createListener(uid, handler) {
	    return {
	      handler: handler,
	      wrappedHandler: createWrappedHandler(uid, handler)
	    };
	  }

	  function createWrappedHandler(uid, handler) {
	    return function (e) {
	      handler.call(getElement(uid), e || fabric.window.event);
	    };
	  }

	  function createDispatcher(uid, eventName) {
	    return function (e) {
	      if (handlers[uid] && handlers[uid][eventName]) {
	        var handlersForEvent = handlers[uid][eventName];
	        for (var i = 0, len = handlersForEvent.length; i < len; i++) {
	          handlersForEvent[i].call(this, e || fabric.window.event);
	        }
	      }
	    };
	  }

	  var shouldUseAddListenerRemoveListener = (
	        areHostMethods(fabric.document.documentElement, 'addEventListener', 'removeEventListener') &&
	        areHostMethods(fabric.window, 'addEventListener', 'removeEventListener')),

	      shouldUseAttachEventDetachEvent = (
	        areHostMethods(fabric.document.documentElement, 'attachEvent', 'detachEvent') &&
	        areHostMethods(fabric.window, 'attachEvent', 'detachEvent')),

	      // IE branch
	      listeners = { },

	      // DOM L0 branch
	      handlers = { },

	      addListener, removeListener;

	  if (shouldUseAddListenerRemoveListener) {
	    /** @ignore */
	    addListener = function (element, eventName, handler) {
	      element.addEventListener(eventName, handler, false);
	    };
	    /** @ignore */
	    removeListener = function (element, eventName, handler) {
	      element.removeEventListener(eventName, handler, false);
	    };
	  }

	  else if (shouldUseAttachEventDetachEvent) {
	    /** @ignore */
	    addListener = function (element, eventName, handler) {
	      var uid = getUniqueId(element);
	      setElement(uid, element);
	      if (!listeners[uid]) {
	        listeners[uid] = { };
	      }
	      if (!listeners[uid][eventName]) {
	        listeners[uid][eventName] = [ ];

	      }
	      var listener = createListener(uid, handler);
	      listeners[uid][eventName].push(listener);
	      element.attachEvent('on' + eventName, listener.wrappedHandler);
	    };
	    /** @ignore */
	    removeListener = function (element, eventName, handler) {
	      var uid = getUniqueId(element), listener;
	      if (listeners[uid] && listeners[uid][eventName]) {
	        for (var i = 0, len = listeners[uid][eventName].length; i < len; i++) {
	          listener = listeners[uid][eventName][i];
	          if (listener && listener.handler === handler) {
	            element.detachEvent('on' + eventName, listener.wrappedHandler);
	            listeners[uid][eventName][i] = null;
	          }
	        }
	      }
	    };
	  }
	  else {
	    /** @ignore */
	    addListener = function (element, eventName, handler) {
	      var uid = getUniqueId(element);
	      if (!handlers[uid]) {
	        handlers[uid] = { };
	      }
	      if (!handlers[uid][eventName]) {
	        handlers[uid][eventName] = [ ];
	        var existingHandler = element['on' + eventName];
	        if (existingHandler) {
	          handlers[uid][eventName].push(existingHandler);
	        }
	        element['on' + eventName] = createDispatcher(uid, eventName);
	      }
	      handlers[uid][eventName].push(handler);
	    };
	    /** @ignore */
	    removeListener = function (element, eventName, handler) {
	      var uid = getUniqueId(element);
	      if (handlers[uid] && handlers[uid][eventName]) {
	        var handlersForEvent = handlers[uid][eventName];
	        for (var i = 0, len = handlersForEvent.length; i < len; i++) {
	          if (handlersForEvent[i] === handler) {
	            handlersForEvent.splice(i, 1);
	          }
	        }
	      }
	    };
	  }

	  /**
	   * Adds an event listener to an element
	   * @function
	   * @memberOf fabric.util
	   * @param {HTMLElement} element
	   * @param {String} eventName
	   * @param {Function} handler
	   */
	  fabric.util.addListener = addListener;

	  /**
	   * Removes an event listener from an element
	   * @function
	   * @memberOf fabric.util
	   * @param {HTMLElement} element
	   * @param {String} eventName
	   * @param {Function} handler
	   */
	  fabric.util.removeListener = removeListener;

	  /**
	   * Cross-browser wrapper for getting event's coordinates
	   * @memberOf fabric.util
	   * @param {Event} event Event object
	   */
	  function getPointer(event) {
	    event || (event = fabric.window.event);

	    var element = event.target ||
	                  (typeof event.srcElement !== unknown ? event.srcElement : null),

	        scroll = fabric.util.getScrollLeftTop(element);

	    return {
	      x: pointerX(event) + scroll.left,
	      y: pointerY(event) + scroll.top
	    };
	  }

	  var pointerX = function(event) {
	    // looks like in IE (<9) clientX at certain point (apparently when mouseup fires on VML element)
	    // is represented as COM object, with all the consequences, like "unknown" type and error on [[Get]]
	    // need to investigate later
	    return (typeof event.clientX !== unknown ? event.clientX : 0);
	  },

	  pointerY = function(event) {
	    return (typeof event.clientY !== unknown ? event.clientY : 0);
	  };

	  function _getPointer(event, pageProp, clientProp) {
	    var touchProp = event.type === 'touchend' ? 'changedTouches' : 'touches';

	    return (event[touchProp] && event[touchProp][0]
	      ? (event[touchProp][0][pageProp] - (event[touchProp][0][pageProp] - event[touchProp][0][clientProp]))
	        || event[clientProp]
	      : event[clientProp]);
	  }

	  if (fabric.isTouchSupported) {
	    pointerX = function(event) {
	      return _getPointer(event, 'pageX', 'clientX');
	    };
	    pointerY = function(event) {
	      return _getPointer(event, 'pageY', 'clientY');
	    };
	  }

	  fabric.util.getPointer = getPointer;

	  fabric.util.object.extend(fabric.util, fabric.Observable);

	})();


	(function () {

	  /**
	   * Cross-browser wrapper for setting element's style
	   * @memberOf fabric.util
	   * @param {HTMLElement} element
	   * @param {Object} styles
	   * @return {HTMLElement} Element that was passed as a first argument
	   */
	  function setStyle(element, styles) {
	    var elementStyle = element.style;
	    if (!elementStyle) {
	      return element;
	    }
	    if (typeof styles === 'string') {
	      element.style.cssText += ';' + styles;
	      return styles.indexOf('opacity') > -1
	        ? setOpacity(element, styles.match(/opacity:\s*(\d?\.?\d*)/)[1])
	        : element;
	    }
	    for (var property in styles) {
	      if (property === 'opacity') {
	        setOpacity(element, styles[property]);
	      }
	      else {
	        var normalizedProperty = (property === 'float' || property === 'cssFloat')
	          ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')
	          : property;
	        elementStyle[normalizedProperty] = styles[property];
	      }
	    }
	    return element;
	  }

	  var parseEl = fabric.document.createElement('div'),
	      supportsOpacity = typeof parseEl.style.opacity === 'string',
	      supportsFilters = typeof parseEl.style.filter === 'string',
	      reOpacity = /alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/,

	      /** @ignore */
	      setOpacity = function (element) { return element; };

	  if (supportsOpacity) {
	    /** @ignore */
	    setOpacity = function(element, value) {
	      element.style.opacity = value;
	      return element;
	    };
	  }
	  else if (supportsFilters) {
	    /** @ignore */
	    setOpacity = function(element, value) {
	      var es = element.style;
	      if (element.currentStyle && !element.currentStyle.hasLayout) {
	        es.zoom = 1;
	      }
	      if (reOpacity.test(es.filter)) {
	        value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');
	        es.filter = es.filter.replace(reOpacity, value);
	      }
	      else {
	        es.filter += ' alpha(opacity=' + (value * 100) + ')';
	      }
	      return element;
	    };
	  }

	  fabric.util.setStyle = setStyle;

	})();


	(function() {

	  var _slice = Array.prototype.slice;

	  /**
	   * Takes id and returns an element with that id (if one exists in a document)
	   * @memberOf fabric.util
	   * @param {String|HTMLElement} id
	   * @return {HTMLElement|null}
	   */
	  function getById(id) {
	    return typeof id === 'string' ? fabric.document.getElementById(id) : id;
	  }

	  var sliceCanConvertNodelists,
	      /**
	       * Converts an array-like object (e.g. arguments or NodeList) to an array
	       * @memberOf fabric.util
	       * @param {Object} arrayLike
	       * @return {Array}
	       */
	      toArray = function(arrayLike) {
	        return _slice.call(arrayLike, 0);
	      };

	  try {
	    sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;
	  }
	  catch (err) { }

	  if (!sliceCanConvertNodelists) {
	    toArray = function(arrayLike) {
	      var arr = new Array(arrayLike.length), i = arrayLike.length;
	      while (i--) {
	        arr[i] = arrayLike[i];
	      }
	      return arr;
	    };
	  }

	  /**
	   * Creates specified element with specified attributes
	   * @memberOf fabric.util
	   * @param {String} tagName Type of an element to create
	   * @param {Object} [attributes] Attributes to set on an element
	   * @return {HTMLElement} Newly created element
	   */
	  function makeElement(tagName, attributes) {
	    var el = fabric.document.createElement(tagName);
	    for (var prop in attributes) {
	      if (prop === 'class') {
	        el.className = attributes[prop];
	      }
	      else if (prop === 'for') {
	        el.htmlFor = attributes[prop];
	      }
	      else {
	        el.setAttribute(prop, attributes[prop]);
	      }
	    }
	    return el;
	  }

	  /**
	   * Adds class to an element
	   * @memberOf fabric.util
	   * @param {HTMLElement} element Element to add class to
	   * @param {String} className Class to add to an element
	   */
	  function addClass(element, className) {
	    if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {
	      element.className += (element.className ? ' ' : '') + className;
	    }
	  }

	  /**
	   * Wraps element with another element
	   * @memberOf fabric.util
	   * @param {HTMLElement} element Element to wrap
	   * @param {HTMLElement|String} wrapper Element to wrap with
	   * @param {Object} [attributes] Attributes to set on a wrapper
	   * @return {HTMLElement} wrapper
	   */
	  function wrapElement(element, wrapper, attributes) {
	    if (typeof wrapper === 'string') {
	      wrapper = makeElement(wrapper, attributes);
	    }
	    if (element.parentNode) {
	      element.parentNode.replaceChild(wrapper, element);
	    }
	    wrapper.appendChild(element);
	    return wrapper;
	  }

	  /**
	   * Returns element scroll offsets
	   * @memberOf fabric.util
	   * @param {HTMLElement} element Element to operate on
	   * @return {Object} Object with left/top values
	   */
	  function getScrollLeftTop(element) {

	    var left = 0,
	        top = 0,
	        docElement = fabric.document.documentElement,
	        body = fabric.document.body || {
	          scrollLeft: 0, scrollTop: 0
	        };

	    // While loop checks (and then sets element to) .parentNode OR .host
	    //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,
	    //  but the .parentNode of a root ShadowDOM node will always be null, instead
	    //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938
	    while (element && (element.parentNode || element.host)) {

	      // Set element to element parent, or 'host' in case of ShadowDOM
	      element = element.parentNode || element.host;

	      if (element === fabric.document) {
	        left = body.scrollLeft || docElement.scrollLeft || 0;
	        top = body.scrollTop ||  docElement.scrollTop || 0;
	      }
	      else {
	        left += element.scrollLeft || 0;
	        top += element.scrollTop || 0;
	      }

	      if (element.nodeType === 1 &&
	          fabric.util.getElementStyle(element, 'position') === 'fixed') {
	        break;
	      }
	    }

	    return { left: left, top: top };
	  }

	  /**
	   * Returns offset for a given element
	   * @function
	   * @memberOf fabric.util
	   * @param {HTMLElement} element Element to get offset for
	   * @return {Object} Object with "left" and "top" properties
	   */
	  function getElementOffset(element) {
	    var docElem,
	        doc = element && element.ownerDocument,
	        box = { left: 0, top: 0 },
	        offset = { left: 0, top: 0 },
	        scrollLeftTop,
	        offsetAttributes = {
	          borderLeftWidth: 'left',
	          borderTopWidth:  'top',
	          paddingLeft:     'left',
	          paddingTop:      'top'
	        };

	    if (!doc) {
	      return offset;
	    }

	    for (var attr in offsetAttributes) {
	      offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;
	    }

	    docElem = doc.documentElement;
	    if ( typeof element.getBoundingClientRect !== 'undefined' ) {
	      box = element.getBoundingClientRect();
	    }

	    scrollLeftTop = getScrollLeftTop(element);

	    return {
	      left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,
	      top: box.top + scrollLeftTop.top - (docElem.clientTop || 0)  + offset.top
	    };
	  }

	  /**
	   * Returns style attribute value of a given element
	   * @memberOf fabric.util
	   * @param {HTMLElement} element Element to get style attribute for
	   * @param {String} attr Style attribute to get for element
	   * @return {String} Style attribute value of the given element.
	   */
	  var getElementStyle;
	  if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {
	    getElementStyle = function(element, attr) {
	      var style = fabric.document.defaultView.getComputedStyle(element, null);
	      return style ? style[attr] : undefined;
	    };
	  }
	  else {
	    getElementStyle = function(element, attr) {
	      var value = element.style[attr];
	      if (!value && element.currentStyle) {
	        value = element.currentStyle[attr];
	      }
	      return value;
	    };
	  }

	  (function () {
	    var style = fabric.document.documentElement.style,
	        selectProp = 'userSelect' in style
	          ? 'userSelect'
	          : 'MozUserSelect' in style
	            ? 'MozUserSelect'
	            : 'WebkitUserSelect' in style
	              ? 'WebkitUserSelect'
	              : 'KhtmlUserSelect' in style
	                ? 'KhtmlUserSelect'
	                : '';

	    /**
	     * Makes element unselectable
	     * @memberOf fabric.util
	     * @param {HTMLElement} element Element to make unselectable
	     * @return {HTMLElement} Element that was passed in
	     */
	    function makeElementUnselectable(element) {
	      if (typeof element.onselectstart !== 'undefined') {
	        element.onselectstart = fabric.util.falseFunction;
	      }
	      if (selectProp) {
	        element.style[selectProp] = 'none';
	      }
	      else if (typeof element.unselectable === 'string') {
	        element.unselectable = 'on';
	      }
	      return element;
	    }

	    /**
	     * Makes element selectable
	     * @memberOf fabric.util
	     * @param {HTMLElement} element Element to make selectable
	     * @return {HTMLElement} Element that was passed in
	     */
	    function makeElementSelectable(element) {
	      if (typeof element.onselectstart !== 'undefined') {
	        element.onselectstart = null;
	      }
	      if (selectProp) {
	        element.style[selectProp] = '';
	      }
	      else if (typeof element.unselectable === 'string') {
	        element.unselectable = '';
	      }
	      return element;
	    }

	    fabric.util.makeElementUnselectable = makeElementUnselectable;
	    fabric.util.makeElementSelectable = makeElementSelectable;
	  })();

	  (function() {

	    /**
	     * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading
	     * @memberOf fabric.util
	     * @param {String} url URL of a script to load
	     * @param {Function} callback Callback to execute when script is finished loading
	     */
	    function getScript(url, callback) {
	      var headEl = fabric.document.getElementsByTagName('head')[0],
	          scriptEl = fabric.document.createElement('script'),
	          loading = true;

	      /** @ignore */
	      scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {
	        if (loading) {
	          if (typeof this.readyState === 'string' &&
	              this.readyState !== 'loaded' &&
	              this.readyState !== 'complete') {
	            return;
	          }
	          loading = false;
	          callback(e || fabric.window.event);
	          scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;
	        }
	      };
	      scriptEl.src = url;
	      headEl.appendChild(scriptEl);
	      // causes issue in Opera
	      // headEl.removeChild(scriptEl);
	    }

	    fabric.util.getScript = getScript;
	  })();

	  fabric.util.getById = getById;
	  fabric.util.toArray = toArray;
	  fabric.util.makeElement = makeElement;
	  fabric.util.addClass = addClass;
	  fabric.util.wrapElement = wrapElement;
	  fabric.util.getScrollLeftTop = getScrollLeftTop;
	  fabric.util.getElementOffset = getElementOffset;
	  fabric.util.getElementStyle = getElementStyle;

	})();


	(function() {

	  function addParamToUrl(url, param) {
	    return url + (/\?/.test(url) ? '&' : '?') + param;
	  }

	  var makeXHR = (function() {
	    var factories = [
	      function() { return new ActiveXObject('Microsoft.XMLHTTP'); },
	      function() { return new ActiveXObject('Msxml2.XMLHTTP'); },
	      function() { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); },
	      function() { return new XMLHttpRequest(); }
	    ];
	    for (var i = factories.length; i--; ) {
	      try {
	        var req = factories[i]();
	        if (req) {
	          return factories[i];
	        }
	      }
	      catch (err) { }
	    }
	  })();

	  function emptyFn() { }

	  /**
	   * Cross-browser abstraction for sending XMLHttpRequest
	   * @memberOf fabric.util
	   * @param {String} url URL to send XMLHttpRequest to
	   * @param {Object} [options] Options object
	   * @param {String} [options.method="GET"]
	   * @param {Function} options.onComplete Callback to invoke when request is completed
	   * @return {XMLHttpRequest} request
	   */
	  function request(url, options) {

	    options || (options = { });

	    var method = options.method ? options.method.toUpperCase() : 'GET',
	        onComplete = options.onComplete || function() { },
	        xhr = makeXHR(),
	        body;

	    /** @ignore */
	    xhr.onreadystatechange = function() {
	      if (xhr.readyState === 4) {
	        onComplete(xhr);
	        xhr.onreadystatechange = emptyFn;
	      }
	    };

	    if (method === 'GET') {
	      body = null;
	      if (typeof options.parameters === 'string') {
	        url = addParamToUrl(url, options.parameters);
	      }
	    }

	    xhr.open(method, url, true);

	    if (method === 'POST' || method === 'PUT') {
	      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
	    }

	    xhr.send(body);
	    return xhr;
	  }

	  fabric.util.request = request;
	})();


	/**
	 * Wrapper around `console.log` (when available)
	 * @param {Any} [values] Values to log
	 */
	fabric.log = function() { };

	/**
	 * Wrapper around `console.warn` (when available)
	 * @param {Any} [values] Values to log as a warning
	 */
	fabric.warn = function() { };

	/* jshint ignore:start */
	if (typeof console !== 'undefined') {

	  ['log', 'warn'].forEach(function(methodName) {

	    if (typeof console[methodName] !== 'undefined' &&
	        typeof console[methodName].apply === 'function') {

	      fabric[methodName] = function() {
	        return console[methodName].apply(console, arguments);
	      };
	    }
	  });
	}
	/* jshint ignore:end */


	(function() {

	  /**
	   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.
	   * @memberOf fabric.util
	   * @param {Object} [options] Animation options
	   * @param {Function} [options.onChange] Callback; invoked on every value change
	   * @param {Function} [options.onComplete] Callback; invoked when value change is completed
	   * @param {Number} [options.startValue=0] Starting value
	   * @param {Number} [options.endValue=100] Ending value
	   * @param {Number} [options.byValue=100] Value to modify the property by
	   * @param {Function} [options.easing] Easing function
	   * @param {Number} [options.duration=500] Duration of change (in ms)
	   */
	  function animate(options) {

	    requestAnimFrame(function(timestamp) {
	      options || (options = { });

	      var start = timestamp || +new Date(),
	          duration = options.duration || 500,
	          finish = start + duration, time,
	          onChange = options.onChange || function() { },
	          abort = options.abort || function() { return false; },
	          easing = options.easing || function(t, b, c, d) {return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;},
	          startValue = 'startValue' in options ? options.startValue : 0,
	          endValue = 'endValue' in options ? options.endValue : 100,
	          byValue = options.byValue || endValue - startValue;

	      options.onStart && options.onStart();

	      (function tick(ticktime) {
	        time = ticktime || +new Date();
	        var currentTime = time > finish ? duration : (time - start);
	        if (abort()) {
	          options.onComplete && options.onComplete();
	          return;
	        }
	        onChange(easing(currentTime, startValue, byValue, duration));
	        if (time > finish) {
	          options.onComplete && options.onComplete();
	          return;
	        }
	        requestAnimFrame(tick);
	      })(start);
	    });

	  }

	  var _requestAnimFrame = fabric.window.requestAnimationFrame       ||
	                          fabric.window.webkitRequestAnimationFrame ||
	                          fabric.window.mozRequestAnimationFrame    ||
	                          fabric.window.oRequestAnimationFrame      ||
	                          fabric.window.msRequestAnimationFrame     ||
	                          function(callback) {
	                            fabric.window.setTimeout(callback, 1000 / 60);
	                          };

	  /**
	   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/
	   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method
	   * @memberOf fabric.util
	   * @param {Function} callback Callback to invoke
	   * @param {DOMElement} element optional Element to associate with animation
	   */
	  function requestAnimFrame() {
	    return _requestAnimFrame.apply(fabric.window, arguments);
	  }

	  fabric.util.animate = animate;
	  fabric.util.requestAnimFrame = requestAnimFrame;

	})();


	(function() {

	  function normalize(a, c, p, s) {
	    if (a < Math.abs(c)) {
	      a = c;
	      s = p / 4;
	    }
	    else {
	      //handle the 0/0 case:
	      if (c === 0 && a === 0) {
	        s = p / (2 * Math.PI) * Math.asin(1);
	      }
	      else {
	        s = p / (2 * Math.PI) * Math.asin(c / a);
	      }
	    }
	    return { a: a, c: c, p: p, s: s };
	  }

	  function elastic(opts, t, d) {
	    return opts.a *
	      Math.pow(2, 10 * (t -= 1)) *
	      Math.sin( (t * d - opts.s) * (2 * Math.PI) / opts.p );
	  }

	  /**
	   * Cubic easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutCubic(t, b, c, d) {
	    return c * ((t = t / d - 1) * t * t + 1) + b;
	  }

	  /**
	   * Cubic easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutCubic(t, b, c, d) {
	    t /= d/2;
	    if (t < 1) {
	      return c / 2 * t * t * t + b;
	    }
	    return c / 2 * ((t -= 2) * t * t + 2) + b;
	  }

	  /**
	   * Quartic easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInQuart(t, b, c, d) {
	    return c * (t /= d) * t * t * t + b;
	  }

	  /**
	   * Quartic easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutQuart(t, b, c, d) {
	    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
	  }

	  /**
	   * Quartic easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutQuart(t, b, c, d) {
	    t /= d / 2;
	    if (t < 1) {
	      return c / 2 * t * t * t * t + b;
	    }
	    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
	  }

	  /**
	   * Quintic easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInQuint(t, b, c, d) {
	    return c * (t /= d) * t * t * t * t + b;
	  }

	  /**
	   * Quintic easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutQuint(t, b, c, d) {
	    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
	  }

	  /**
	   * Quintic easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutQuint(t, b, c, d) {
	    t /= d / 2;
	    if (t < 1) {
	      return c / 2 * t * t * t * t * t + b;
	    }
	    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
	  }

	  /**
	   * Sinusoidal easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInSine(t, b, c, d) {
	    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
	  }

	  /**
	   * Sinusoidal easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutSine(t, b, c, d) {
	    return c * Math.sin(t / d * (Math.PI / 2)) + b;
	  }

	  /**
	   * Sinusoidal easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutSine(t, b, c, d) {
	    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
	  }

	  /**
	   * Exponential easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInExpo(t, b, c, d) {
	    return (t === 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
	  }

	  /**
	   * Exponential easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutExpo(t, b, c, d) {
	    return (t === d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
	  }

	  /**
	   * Exponential easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutExpo(t, b, c, d) {
	    if (t === 0) {
	      return b;
	    }
	    if (t === d) {
	      return b + c;
	    }
	    t /= d / 2;
	    if (t < 1) {
	      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
	    }
	    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
	  }

	  /**
	   * Circular easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInCirc(t, b, c, d) {
	    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
	  }

	  /**
	   * Circular easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutCirc(t, b, c, d) {
	    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
	  }

	  /**
	   * Circular easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutCirc(t, b, c, d) {
	    t /= d / 2;
	    if (t < 1) {
	      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
	    }
	    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
	  }

	  /**
	   * Elastic easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInElastic(t, b, c, d) {
	    var s = 1.70158, p = 0, a = c;
	    if (t === 0) {
	      return b;
	    }
	    t /= d;
	    if (t === 1) {
	      return b + c;
	    }
	    if (!p) {
	      p = d * 0.3;
	    }
	    var opts = normalize(a, c, p, s);
	    return -elastic(opts, t, d) + b;
	  }

	  /**
	   * Elastic easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutElastic(t, b, c, d) {
	    var s = 1.70158, p = 0, a = c;
	    if (t === 0) {
	      return b;
	    }
	    t /= d;
	    if (t === 1) {
	      return b + c;
	    }
	    if (!p) {
	      p = d * 0.3;
	    }
	    var opts = normalize(a, c, p, s);
	    return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) + opts.c + b;
	  }

	  /**
	   * Elastic easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutElastic(t, b, c, d) {
	    var s = 1.70158, p = 0, a = c;
	    if (t === 0) {
	      return b;
	    }
	    t /= d / 2;
	    if (t === 2) {
	      return b + c;
	    }
	    if (!p) {
	      p = d * (0.3 * 1.5);
	    }
	    var opts = normalize(a, c, p, s);
	    if (t < 1) {
	      return -0.5 * elastic(opts, t, d) + b;
	    }
	    return opts.a * Math.pow(2, -10 * (t -= 1)) *
	      Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p ) * 0.5 + opts.c + b;
	  }

	  /**
	   * Backwards easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInBack(t, b, c, d, s) {
	    if (s === undefined) {
	      s = 1.70158;
	    }
	    return c * (t /= d) * t * ((s + 1) * t - s) + b;
	  }

	  /**
	   * Backwards easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutBack(t, b, c, d, s) {
	    if (s === undefined) {
	      s = 1.70158;
	    }
	    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
	  }

	  /**
	   * Backwards easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutBack(t, b, c, d, s) {
	    if (s === undefined) {
	      s = 1.70158;
	    }
	    t /= d / 2;
	    if (t < 1) {
	      return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
	    }
	    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
	  }

	  /**
	   * Bouncing easing in
	   * @memberOf fabric.util.ease
	   */
	  function easeInBounce(t, b, c, d) {
	    return c - easeOutBounce (d - t, 0, c, d) + b;
	  }

	  /**
	   * Bouncing easing out
	   * @memberOf fabric.util.ease
	   */
	  function easeOutBounce(t, b, c, d) {
	    if ((t /= d) < (1 / 2.75)) {
	      return c * (7.5625 * t * t) + b;
	    }
	    else if (t < (2/2.75)) {
	      return c * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75) + b;
	    }
	    else if (t < (2.5/2.75)) {
	      return c * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375) + b;
	    }
	    else {
	      return c * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375) + b;
	    }
	  }

	  /**
	   * Bouncing easing in and out
	   * @memberOf fabric.util.ease
	   */
	  function easeInOutBounce(t, b, c, d) {
	    if (t < d / 2) {
	      return easeInBounce (t * 2, 0, c, d) * 0.5 + b;
	    }
	    return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
	  }

	  /**
	   * Easing functions
	   * See <a href="http://gizma.com/easing/">Easing Equations by Robert Penner</a>
	   * @namespace fabric.util.ease
	   */
	  fabric.util.ease = {

	    /**
	     * Quadratic easing in
	     * @memberOf fabric.util.ease
	     */
	    easeInQuad: function(t, b, c, d) {
	      return c * (t /= d) * t + b;
	    },

	    /**
	     * Quadratic easing out
	     * @memberOf fabric.util.ease
	     */
	    easeOutQuad: function(t, b, c, d) {
	      return -c * (t /= d) * (t - 2) + b;
	    },

	    /**
	     * Quadratic easing in and out
	     * @memberOf fabric.util.ease
	     */
	    easeInOutQuad: function(t, b, c, d) {
	      t /= (d / 2);
	      if (t < 1) {
	        return c / 2 * t * t + b;
	      }
	      return -c / 2 * ((--t) * (t - 2) - 1) + b;
	    },

	    /**
	     * Cubic easing in
	     * @memberOf fabric.util.ease
	     */
	    easeInCubic: function(t, b, c, d) {
	      return c * (t /= d) * t * t + b;
	    },

	    easeOutCubic: easeOutCubic,
	    easeInOutCubic: easeInOutCubic,
	    easeInQuart: easeInQuart,
	    easeOutQuart: easeOutQuart,
	    easeInOutQuart: easeInOutQuart,
	    easeInQuint: easeInQuint,
	    easeOutQuint: easeOutQuint,
	    easeInOutQuint: easeInOutQuint,
	    easeInSine: easeInSine,
	    easeOutSine: easeOutSine,
	    easeInOutSine: easeInOutSine,
	    easeInExpo: easeInExpo,
	    easeOutExpo: easeOutExpo,
	    easeInOutExpo: easeInOutExpo,
	    easeInCirc: easeInCirc,
	    easeOutCirc: easeOutCirc,
	    easeInOutCirc: easeInOutCirc,
	    easeInElastic: easeInElastic,
	    easeOutElastic: easeOutElastic,
	    easeInOutElastic: easeInOutElastic,
	    easeInBack: easeInBack,
	    easeOutBack: easeOutBack,
	    easeInOutBack: easeInOutBack,
	    easeInBounce: easeInBounce,
	    easeOutBounce: easeOutBounce,
	    easeInOutBounce: easeInOutBounce
	  };

	}());


	(function(global) {

	  'use strict';

	  /**
	   * @name fabric
	   * @namespace
	   */

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      capitalize = fabric.util.string.capitalize,
	      clone = fabric.util.object.clone,
	      toFixed = fabric.util.toFixed,
	      parseUnit = fabric.util.parseUnit,
	      multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,

	      reAllowedSVGTagNames = /^(path|circle|polygon|polyline|ellipse|rect|line|image|text)$/i,
	      reViewBoxTagNames = /^(symbol|image|marker|pattern|view|svg)$/i,
	      reNotAllowedAncestors = /^(?:pattern|defs|symbol|metadata)$/i,
	      reAllowedParents = /^(symbol|g|a|svg)$/i,

	      attributesMap = {
	        cx:                   'left',
	        x:                    'left',
	        r:                    'radius',
	        cy:                   'top',
	        y:                    'top',
	        display:              'visible',
	        visibility:           'visible',
	        transform:            'transformMatrix',
	        'fill-opacity':       'fillOpacity',
	        'fill-rule':          'fillRule',
	        'font-family':        'fontFamily',
	        'font-size':          'fontSize',
	        'font-style':         'fontStyle',
	        'font-weight':        'fontWeight',
	        'stroke-dasharray':   'strokeDashArray',
	        'stroke-linecap':     'strokeLineCap',
	        'stroke-linejoin':    'strokeLineJoin',
	        'stroke-miterlimit':  'strokeMiterLimit',
	        'stroke-opacity':     'strokeOpacity',
	        'stroke-width':       'strokeWidth',
	        'text-decoration':    'textDecoration',
	        'text-anchor':        'originX'
	      },

	      colorAttributes = {
	        stroke: 'strokeOpacity',
	        fill:   'fillOpacity'
	      };

	  fabric.cssRules = { };
	  fabric.gradientDefs = { };

	  function normalizeAttr(attr) {
	    // transform attribute names
	    if (attr in attributesMap) {
	      return attributesMap[attr];
	    }
	    return attr;
	  }

	  function normalizeValue(attr, value, parentAttributes, fontSize) {
	    var isArray = Object.prototype.toString.call(value) === '[object Array]',
	        parsed;

	    if ((attr === 'fill' || attr === 'stroke') && value === 'none') {
	      value = '';
	    }
	    else if (attr === 'strokeDashArray') {
	      value = value.replace(/,/g, ' ').split(/\s+/).map(function(n) {
	        return parseFloat(n);
	      });
	    }
	    else if (attr === 'transformMatrix') {
	      if (parentAttributes && parentAttributes.transformMatrix) {
	        value = multiplyTransformMatrices(
	          parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));
	      }
	      else {
	        value = fabric.parseTransformAttribute(value);
	      }
	    }
	    else if (attr === 'visible') {
	      value = (value === 'none' || value === 'hidden') ? false : true;
	      // display=none on parent element always takes precedence over child element
	      if (parentAttributes && parentAttributes.visible === false) {
	        value = false;
	      }
	    }
	    else if (attr === 'originX' /* text-anchor */) {
	      value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';
	    }
	    else {
	      parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);
	    }

	    return (!isArray && isNaN(parsed) ? value : parsed);
	  }

	  /**
	   * @private
	   * @param {Object} attributes Array of attributes to parse
	   */
	  function _setStrokeFillOpacity(attributes) {
	    for (var attr in colorAttributes) {

	      if (typeof attributes[colorAttributes[attr]] === 'undefined' || attributes[attr] === '') {
	        continue;
	      }

	      if (typeof attributes[attr] === 'undefined') {
	        if (!fabric.Object.prototype[attr]) {
	          continue;
	        }
	        attributes[attr] = fabric.Object.prototype[attr];
	      }

	      if (attributes[attr].indexOf('url(') === 0) {
	        continue;
	      }

	      var color = new fabric.Color(attributes[attr]);
	      attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();
	    }
	    return attributes;
	  }

	  /**
	   * Parses "transform" attribute, returning an array of values
	   * @static
	   * @function
	   * @memberOf fabric
	   * @param {String} attributeValue String containing attribute value
	   * @return {Array} Array of 6 elements representing transformation matrix
	   */
	  fabric.parseTransformAttribute = (function() {
	    function rotateMatrix(matrix, args) {
	      var angle = args[0],
	          x = (args.length === 3) ? args[1] : 0,
	          y = (args.length === 3) ? args[2] : 0;

	      matrix[0] = Math.cos(angle);
	      matrix[1] = Math.sin(angle);
	      matrix[2] = -Math.sin(angle);
	      matrix[3] = Math.cos(angle);
	      matrix[4] = x - (matrix[0] * x + matrix[2] * y);
	      matrix[5] = y - (matrix[1] * x + matrix[3] * y);
	    }

	    function scaleMatrix(matrix, args) {
	      var multiplierX = args[0],
	          multiplierY = (args.length === 2) ? args[1] : args[0];

	      matrix[0] = multiplierX;
	      matrix[3] = multiplierY;
	    }

	    function skewXMatrix(matrix, args) {
	      matrix[2] = Math.tan(fabric.util.degreesToRadians(args[0]));
	    }

	    function skewYMatrix(matrix, args) {
	      matrix[1] = Math.tan(fabric.util.degreesToRadians(args[0]));
	    }

	    function translateMatrix(matrix, args) {
	      matrix[4] = args[0];
	      if (args.length === 2) {
	        matrix[5] = args[1];
	      }
	    }

	    // identity matrix
	    var iMatrix = [
	          1, // a
	          0, // b
	          0, // c
	          1, // d
	          0, // e
	          0  // f
	        ],

	        // == begin transform regexp
	        number = fabric.reNum,

	        commaWsp = '(?:\\s+,?\\s*|,\\s*)',

	        skewX = '(?:(skewX)\\s*\\(\\s*(' + number + ')\\s*\\))',

	        skewY = '(?:(skewY)\\s*\\(\\s*(' + number + ')\\s*\\))',

	        rotate = '(?:(rotate)\\s*\\(\\s*(' + number + ')(?:' +
	                    commaWsp + '(' + number + ')' +
	                    commaWsp + '(' + number + '))?\\s*\\))',

	        scale = '(?:(scale)\\s*\\(\\s*(' + number + ')(?:' +
	                    commaWsp + '(' + number + '))?\\s*\\))',

	        translate = '(?:(translate)\\s*\\(\\s*(' + number + ')(?:' +
	                    commaWsp + '(' + number + '))?\\s*\\))',

	        matrix = '(?:(matrix)\\s*\\(\\s*' +
	                  '(' + number + ')' + commaWsp +
	                  '(' + number + ')' + commaWsp +
	                  '(' + number + ')' + commaWsp +
	                  '(' + number + ')' + commaWsp +
	                  '(' + number + ')' + commaWsp +
	                  '(' + number + ')' +
	                  '\\s*\\))',

	        transform = '(?:' +
	                    matrix + '|' +
	                    translate + '|' +
	                    scale + '|' +
	                    rotate + '|' +
	                    skewX + '|' +
	                    skewY +
	                    ')',

	        transforms = '(?:' + transform + '(?:' + commaWsp + '*' + transform + ')*' + ')',

	        transformList = '^\\s*(?:' + transforms + '?)\\s*$',

	        // http://www.w3.org/TR/SVG/coords.html#TransformAttribute
	        reTransformList = new RegExp(transformList),
	        // == end transform regexp

	        reTransform = new RegExp(transform, 'g');

	    return function(attributeValue) {

	      // start with identity matrix
	      var matrix = iMatrix.concat(),
	          matrices = [ ];

	      // return if no argument was given or
	      // an argument does not match transform attribute regexp
	      if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {
	        return matrix;
	      }

	      attributeValue.replace(reTransform, function(match) {

	        var m = new RegExp(transform).exec(match).filter(function (match) {
	              return (match !== '' && match != null);
	            }),
	            operation = m[1],
	            args = m.slice(2).map(parseFloat);

	        switch (operation) {
	          case 'translate':
	            translateMatrix(matrix, args);
	            break;
	          case 'rotate':
	            args[0] = fabric.util.degreesToRadians(args[0]);
	            rotateMatrix(matrix, args);
	            break;
	          case 'scale':
	            scaleMatrix(matrix, args);
	            break;
	          case 'skewX':
	            skewXMatrix(matrix, args);
	            break;
	          case 'skewY':
	            skewYMatrix(matrix, args);
	            break;
	          case 'matrix':
	            matrix = args;
	            break;
	        }

	        // snapshot current matrix into matrices array
	        matrices.push(matrix.concat());
	        // reset
	        matrix = iMatrix.concat();
	      });

	      var combinedMatrix = matrices[0];
	      while (matrices.length > 1) {
	        matrices.shift();
	        combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);
	      }
	      return combinedMatrix;
	    };
	  })();

	  /**
	   * @private
	   */
	  function parseStyleString(style, oStyle) {
	    var attr, value;
	    style.replace(/;\s*$/, '').split(';').forEach(function (chunk) {
	      var pair = chunk.split(':');

	      attr = normalizeAttr(pair[0].trim().toLowerCase());
	      value = normalizeValue(attr, pair[1].trim());

	      oStyle[attr] = value;
	    });
	  }

	  /**
	   * @private
	   */
	  function parseStyleObject(style, oStyle) {
	    var attr, value;
	    for (var prop in style) {
	      if (typeof style[prop] === 'undefined') {
	        continue;
	      }

	      attr = normalizeAttr(prop.toLowerCase());
	      value = normalizeValue(attr, style[prop]);

	      oStyle[attr] = value;
	    }
	  }

	  /**
	   * @private
	   */
	  function getGlobalStylesForElement(element, svgUid) {
	    var styles = { };
	    for (var rule in fabric.cssRules[svgUid]) {
	      if (elementMatchesRule(element, rule.split(' '))) {
	        for (var property in fabric.cssRules[svgUid][rule]) {
	          styles[property] = fabric.cssRules[svgUid][rule][property];
	        }
	      }
	    }
	    return styles;
	  }

	  /**
	   * @private
	   */
	  function elementMatchesRule(element, selectors) {
	    var firstMatching, parentMatching = true;
	    //start from rightmost selector.
	    firstMatching = selectorMatches(element, selectors.pop());
	    if (firstMatching && selectors.length) {
	      parentMatching = doesSomeParentMatch(element, selectors);
	    }
	    return firstMatching && parentMatching && (selectors.length === 0);
	  }

	  function doesSomeParentMatch(element, selectors) {
	    var selector, parentMatching = true;
	    while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {
	      if (parentMatching) {
	        selector = selectors.pop();
	      }
	      element = element.parentNode;
	      parentMatching = selectorMatches(element, selector);
	    }
	    return selectors.length === 0;
	  }

	  /**
	   * @private
	   */
	  function selectorMatches(element, selector) {
	    var nodeName = element.nodeName,
	        classNames = element.getAttribute('class'),
	        id = element.getAttribute('id'), matcher;
	    // i check if a selector matches slicing away part from it.
	    // if i get empty string i should match
	    matcher = new RegExp('^' + nodeName, 'i');
	    selector = selector.replace(matcher, '');
	    if (id && selector.length) {
	      matcher = new RegExp('#' + id + '(?![a-zA-Z\\-]+)', 'i');
	      selector = selector.replace(matcher, '');
	    }
	    if (classNames && selector.length) {
	      classNames = classNames.split(' ');
	      for (var i = classNames.length; i--;) {
	        matcher = new RegExp('\\.' + classNames[i] + '(?![a-zA-Z\\-]+)', 'i');
	        selector = selector.replace(matcher, '');
	      }
	    }
	    return selector.length === 0;
	  }

	  /**
	   * @private
	   * to support IE8 missing getElementById on SVGdocument
	   */
	  function elementById(doc, id) {
	    var el;
	    doc.getElementById && (el = doc.getElementById(id));
	    if (el) {
	      return el;
	    }
	    var node, i, nodelist = doc.getElementsByTagName('*');
	    for (i = 0; i < nodelist.length; i++) {
	      node = nodelist[i];
	      if (id === node.getAttribute('id')) {
	        return node;
	      }
	    }
	  }

	  /**
	   * @private
	   */
	  function parseUseDirectives(doc) {
	    var nodelist = doc.getElementsByTagName('use'), i = 0;
	    while (nodelist.length && i < nodelist.length) {
	      var el = nodelist[i],
	          xlink = el.getAttribute('xlink:href').substr(1),
	          x = el.getAttribute('x') || 0,
	          y = el.getAttribute('y') || 0,
	          el2 = elementById(doc, xlink).cloneNode(true),
	          currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',
	          parentNode, oldLength = nodelist.length, attr, j, attrs, l;

	      applyViewboxTransform(el2);
	      if (/^svg$/i.test(el2.nodeName)) {
	        var el3 = el2.ownerDocument.createElement('g');
	        for (j = 0, attrs = el2.attributes, l = attrs.length; j < l; j++) {
	          attr = attrs.item(j);
	          el3.setAttribute(attr.nodeName, attr.nodeValue);
	        }
	        while (el2.firstChild != null) {
	          el3.appendChild(el2.firstChild);
	        }
	        el2 = el3;
	      }

	      for (j = 0, attrs = el.attributes, l = attrs.length; j < l; j++) {
	        attr = attrs.item(j);
	        if (attr.nodeName === 'x' || attr.nodeName === 'y' || attr.nodeName === 'xlink:href') {
	          continue;
	        }

	        if (attr.nodeName === 'transform') {
	          currentTrans = attr.nodeValue + ' ' + currentTrans;
	        }
	        else {
	          el2.setAttribute(attr.nodeName, attr.nodeValue);
	        }
	      }

	      el2.setAttribute('transform', currentTrans);
	      el2.setAttribute('instantiated_by_use', '1');
	      el2.removeAttribute('id');
	      parentNode = el.parentNode;
	      parentNode.replaceChild(el2, el);
	      // some browsers do not shorten nodelist after replaceChild (IE8)
	      if (nodelist.length === oldLength) {
	        i++;
	      }
	    }
	  }

	  // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute
	  // matches, e.g.: +14.56e-12, etc.
	  var reViewBoxAttrValue = new RegExp(
	    '^' +
	    '\\s*(' + fabric.reNum + '+)\\s*,?' +
	    '\\s*(' + fabric.reNum + '+)\\s*,?' +
	    '\\s*(' + fabric.reNum + '+)\\s*,?' +
	    '\\s*(' + fabric.reNum + '+)\\s*' +
	    '$'
	  );

	  /**
	   * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements
	   */
	  function applyViewboxTransform(element) {

	    var viewBoxAttr = element.getAttribute('viewBox'),
	        scaleX = 1,
	        scaleY = 1,
	        minX = 0,
	        minY = 0,
	        viewBoxWidth, viewBoxHeight, matrix, el,
	        widthAttr = element.getAttribute('width'),
	        heightAttr = element.getAttribute('height'),
	        x = element.getAttribute('x') || 0,
	        y = element.getAttribute('y') || 0,
	        preserveAspectRatio = element.getAttribute('preserveAspectRatio') || '',
	        missingViewBox = (!viewBoxAttr || !reViewBoxTagNames.test(element.tagName)
	                           || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))),
	        missingDimAttr = (!widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%'),
	        toBeParsed = missingViewBox && missingDimAttr,
	        parsedDim = { }, translateMatrix = '';

	    parsedDim.width = 0;
	    parsedDim.height = 0;
	    parsedDim.toBeParsed = toBeParsed;

	    if (toBeParsed) {
	      return parsedDim;
	    }

	    if (missingViewBox) {
	      parsedDim.width = parseUnit(widthAttr);
	      parsedDim.height = parseUnit(heightAttr);
	      return parsedDim;
	    }

	    minX = -parseFloat(viewBoxAttr[1]),
	    minY = -parseFloat(viewBoxAttr[2]),
	    viewBoxWidth = parseFloat(viewBoxAttr[3]),
	    viewBoxHeight = parseFloat(viewBoxAttr[4]);

	    if (!missingDimAttr) {
	      parsedDim.width = parseUnit(widthAttr);
	      parsedDim.height = parseUnit(heightAttr);
	      scaleX = parsedDim.width / viewBoxWidth;
	      scaleY = parsedDim.height / viewBoxHeight;
	    }
	    else {
	      parsedDim.width = viewBoxWidth;
	      parsedDim.height = viewBoxHeight;
	    }

	    // default is to preserve aspect ratio
	    preserveAspectRatio = fabric.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);
	    if (preserveAspectRatio.alignX !== 'none') {
	      //translate all container for the effect of Mid, Min, Max
	      scaleY = scaleX = (scaleX > scaleY ? scaleY : scaleX);
	    }

	    if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0 && x === 0 && y === 0) {
	      return parsedDim;
	    }

	    if (x || y) {
	      translateMatrix = ' translate(' + parseUnit(x) + ' ' + parseUnit(y) + ') ';
	    }

	    matrix = translateMatrix + ' matrix(' + scaleX +
	                  ' 0' +
	                  ' 0 ' +
	                  scaleY + ' ' +
	                  (minX * scaleX) + ' ' +
	                  (minY * scaleY) + ') ';

	    if (element.tagName === 'svg') {
	      el = element.ownerDocument.createElement('g');
	      while (element.firstChild != null) {
	        el.appendChild(element.firstChild);
	      }
	      element.appendChild(el);
	    }
	    else {
	      el = element;
	      matrix = el.getAttribute('transform') + matrix;
	    }

	    el.setAttribute('transform', matrix);
	    return parsedDim;
	  }

	  /**
	   * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback
	   * @static
	   * @function
	   * @memberOf fabric
	   * @param {SVGDocument} doc SVG document to parse
	   * @param {Function} callback Callback to call when parsing is finished; It's being passed an array of elements (parsed from a document).
	   * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
	   */
	  fabric.parseSVGDocument = (function() {

	    function hasAncestorWithNodeName(element, nodeName) {
	      while (element && (element = element.parentNode)) {
	        if (nodeName.test(element.nodeName) && !element.getAttribute('instantiated_by_use')) {
	          return true;
	        }
	      }
	      return false;
	    }

	    return function(doc, callback, reviver) {
	      if (!doc) {
	        return;
	      }

	      parseUseDirectives(doc);

	      var startTime = new Date(),
	          svgUid =  fabric.Object.__uid++,
	          options = applyViewboxTransform(doc),
	          descendants = fabric.util.toArray(doc.getElementsByTagName('*'));

	      options.svgUid = svgUid;

	      if (descendants.length === 0 && fabric.isLikelyNode) {
	        // we're likely in node, where "o3-xml" library fails to gEBTN("*")
	        // https://github.com/ajaxorg/node-o3-xml/issues/21
	        descendants = doc.selectNodes('//*[name(.)!="svg"]');
	        var arr = [ ];
	        for (var i = 0, len = descendants.length; i < len; i++) {
	          arr[i] = descendants[i];
	        }
	        descendants = arr;
	      }

	      var elements = descendants.filter(function(el) {
	        applyViewboxTransform(el);
	        return reAllowedSVGTagNames.test(el.tagName) &&
	              !hasAncestorWithNodeName(el, reNotAllowedAncestors); // http://www.w3.org/TR/SVG/struct.html#DefsElement
	      });

	      if (!elements || (elements && !elements.length)) {
	        callback && callback([], {});
	        return;
	      }

	      fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);
	      fabric.cssRules[svgUid] = fabric.getCSSRules(doc);
	      // Precedence of rules:   style > class > attribute
	      fabric.parseElements(elements, function(instances) {
	        fabric.documentParsingTime = new Date() - startTime;
	        if (callback) {
	          callback(instances, options);
	        }
	      }, clone(options), reviver);
	    };
	  })();

	  /**
	   * Used for caching SVG documents (loaded via `fabric.Canvas#loadSVGFromURL`)
	   * @namespace
	   */
	  var svgCache = {

	    /**
	     * @param {String} name
	     * @param {Function} callback
	     */
	    has: function (name, callback) {
	      callback(false);
	    },

	    get: function () {
	      /* NOOP */
	    },

	    set: function () {
	      /* NOOP */
	    }
	  };

	  /**
	   * @private
	   */
	  function _enlivenCachedObject(cachedObject) {

	    var objects = cachedObject.objects,
	        options = cachedObject.options;

	    objects = objects.map(function (o) {
	      return fabric[capitalize(o.type)].fromObject(o);
	    });

	    return ({ objects: objects, options: options });
	  }

	  /**
	   * @private
	   */
	  function _createSVGPattern(markup, canvas, property) {
	    if (canvas[property] && canvas[property].toSVG) {
	      markup.push(
	        '\t<pattern x="0" y="0" id="', property, 'Pattern" ',
	          'width="', canvas[property].source.width,
	          '" height="', canvas[property].source.height,
	          '" patternUnits="userSpaceOnUse">\n',
	        '\t\t<image x="0" y="0" ',
	        'width="', canvas[property].source.width,
	        '" height="', canvas[property].source.height,
	        '" xlink:href="', canvas[property].source.src,
	        '"></image>\n\t</pattern>\n'
	      );
	    }
	  }

	  var reFontDeclaration = new RegExp(
	    '(normal|italic)?\\s*(normal|small-caps)?\\s*' +
	    '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*(' +
	      fabric.reNum +
	    '(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|' + fabric.reNum + '))?\\s+(.*)');

	  extend(fabric, {
	    /**
	     * Parses a short font declaration, building adding its properties to a style object
	     * @static
	     * @function
	     * @memberOf fabric
	     * @param {String} value font declaration
	     * @param {Object} oStyle definition
	     */
	    parseFontDeclaration: function(value, oStyle) {
	      var match = value.match(reFontDeclaration);

	      if (!match) {
	        return;
	      }
	      var fontStyle = match[1],
	          // font variant is not used
	          // fontVariant = match[2],
	          fontWeight = match[3],
	          fontSize = match[4],
	          lineHeight = match[5],
	          fontFamily = match[6];

	      if (fontStyle) {
	        oStyle.fontStyle = fontStyle;
	      }
	      if (fontWeight) {
	        oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);
	      }
	      if (fontSize) {
	        oStyle.fontSize = parseUnit(fontSize);
	      }
	      if (fontFamily) {
	        oStyle.fontFamily = fontFamily;
	      }
	      if (lineHeight) {
	        oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;
	      }
	    },

	    /**
	     * Parses an SVG document, returning all of the gradient declarations found in it
	     * @static
	     * @function
	     * @memberOf fabric
	     * @param {SVGDocument} doc SVG document to parse
	     * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element
	     */
	    getGradientDefs: function(doc) {
	      var linearGradientEls = doc.getElementsByTagName('linearGradient'),
	          radialGradientEls = doc.getElementsByTagName('radialGradient'),
	          el, i, j = 0, id, xlink, elList = [ ],
	          gradientDefs = { }, idsToXlinkMap = { };

	      elList.length = linearGradientEls.length + radialGradientEls.length;
	      i = linearGradientEls.length;
	      while (i--) {
	        elList[j++] = linearGradientEls[i];
	      }
	      i = radialGradientEls.length;
	      while (i--) {
	        elList[j++] = radialGradientEls[i];
	      }

	      while (j--) {
	        el = elList[j];
	        xlink = el.getAttribute('xlink:href');
	        id = el.getAttribute('id');
	        if (xlink) {
	          idsToXlinkMap[id] = xlink.substr(1);
	        }
	        gradientDefs[id] = el;
	      }

	      for (id in idsToXlinkMap) {
	        var el2 = gradientDefs[idsToXlinkMap[id]].cloneNode(true);
	        el = gradientDefs[id];
	        while (el2.firstChild) {
	          el.appendChild(el2.firstChild);
	        }
	      }
	      return gradientDefs;
	    },

	    /**
	     * Returns an object of attributes' name/value, given element and an array of attribute names;
	     * Parses parent "g" nodes recursively upwards.
	     * @static
	     * @memberOf fabric
	     * @param {DOMElement} element Element to parse
	     * @param {Array} attributes Array of attributes to parse
	     * @return {Object} object containing parsed attributes' names/values
	     */
	    parseAttributes: function(element, attributes, svgUid) {

	      if (!element) {
	        return;
	      }

	      var value,
	          parentAttributes = { },
	          fontSize;

	      if (typeof svgUid === 'undefined') {
	        svgUid = element.getAttribute('svgUid');
	      }
	      // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards
	      if (element.parentNode && reAllowedParents.test(element.parentNode.nodeName)) {
	        parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);
	      }
	      fontSize = (parentAttributes && parentAttributes.fontSize ) ||
	                 element.getAttribute('font-size') || fabric.Text.DEFAULT_SVG_FONT_SIZE;

	      var ownAttributes = attributes.reduce(function(memo, attr) {
	        value = element.getAttribute(attr);
	        if (value) {
	          attr = normalizeAttr(attr);
	          value = normalizeValue(attr, value, parentAttributes, fontSize);

	          memo[attr] = value;
	        }
	        return memo;
	      }, { });

	      // add values parsed from style, which take precedence over attributes
	      // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)
	      ownAttributes = extend(ownAttributes,
	        extend(getGlobalStylesForElement(element, svgUid), fabric.parseStyleAttribute(element)));
	      if (ownAttributes.font) {
	        fabric.parseFontDeclaration(ownAttributes.font, ownAttributes);
	      }
	      return _setStrokeFillOpacity(extend(parentAttributes, ownAttributes));
	    },

	    /**
	     * Transforms an array of svg elements to corresponding fabric.* instances
	     * @static
	     * @memberOf fabric
	     * @param {Array} elements Array of elements to parse
	     * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)
	     * @param {Object} [options] Options object
	     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
	     */
	    parseElements: function(elements, callback, options, reviver) {
	      new fabric.ElementsParser(elements, callback, options, reviver).parse();
	    },

	    /**
	     * Parses "style" attribute, retuning an object with values
	     * @static
	     * @memberOf fabric
	     * @param {SVGElement} element Element to parse
	     * @return {Object} Objects with values parsed from style attribute of an element
	     */
	    parseStyleAttribute: function(element) {
	      var oStyle = { },
	          style = element.getAttribute('style');

	      if (!style) {
	        return oStyle;
	      }

	      if (typeof style === 'string') {
	        parseStyleString(style, oStyle);
	      }
	      else {
	        parseStyleObject(style, oStyle);
	      }

	      return oStyle;
	    },

	    /**
	     * Parses "points" attribute, returning an array of values
	     * @static
	     * @memberOf fabric
	     * @param {String} points points attribute string
	     * @return {Array} array of points
	     */
	    parsePointsAttribute: function(points) {

	      // points attribute is required and must not be empty
	      if (!points) {
	        return null;
	      }

	      // replace commas with whitespace and remove bookending whitespace
	      points = points.replace(/,/g, ' ').trim();

	      points = points.split(/\s+/);
	      var parsedPoints = [ ], i, len;

	      i = 0;
	      len = points.length;
	      for (; i < len; i+=2) {
	        parsedPoints.push({
	          x: parseFloat(points[i]),
	          y: parseFloat(points[i + 1])
	        });
	      }

	      // odd number of points is an error
	      // if (parsedPoints.length % 2 !== 0) {
	      //   return null;
	      // }

	      return parsedPoints;
	    },

	    /**
	     * Returns CSS rules for a given SVG document
	     * @static
	     * @function
	     * @memberOf fabric
	     * @param {SVGDocument} doc SVG document to parse
	     * @return {Object} CSS rules of this document
	     */
	    getCSSRules: function(doc) {
	      var styles = doc.getElementsByTagName('style'),
	          allRules = { }, rules;

	      // very crude parsing of style contents
	      for (var i = 0, len = styles.length; i < len; i++) {
	        // IE9 doesn't support textContent, but provides text instead.
	        var styleContents = styles[i].textContent || styles[i].text;

	        // remove comments
	        styleContents = styleContents.replace(/\/\*[\s\S]*?\*\//g, '');
	        if (styleContents.trim() === '') {
	          continue;
	        }
	        rules = styleContents.match(/[^{]*\{[\s\S]*?\}/g);
	        rules = rules.map(function(rule) { return rule.trim(); });

	        rules.forEach(function(rule) {

	          var match = rule.match(/([\s\S]*?)\s*\{([^}]*)\}/),
	          ruleObj = { }, declaration = match[2].trim(),
	          propertyValuePairs = declaration.replace(/;$/, '').split(/\s*;\s*/);

	          for (var i = 0, len = propertyValuePairs.length; i < len; i++) {
	            var pair = propertyValuePairs[i].split(/\s*:\s*/),
	                property = normalizeAttr(pair[0]),
	                value = normalizeValue(property, pair[1], pair[0]);
	            ruleObj[property] = value;
	          }
	          rule = match[1];
	          rule.split(',').forEach(function(_rule) {
	            _rule = _rule.replace(/^svg/i, '').trim();
	            if (_rule === '') {
	              return;
	            }
	            allRules[_rule] = fabric.util.object.clone(ruleObj);
	          });
	        });
	      }
	      return allRules;
	    },

	    /**
	     * Takes url corresponding to an SVG document, and parses it into a set of fabric objects. Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)
	     * @memberOf fabric
	     * @param {String} url
	     * @param {Function} callback
	     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
	     */
	    loadSVGFromURL: function(url, callback, reviver) {

	      url = url.replace(/^\n\s*/, '').trim();
	      svgCache.has(url, function (hasUrl) {
	        if (hasUrl) {
	          svgCache.get(url, function (value) {
	            var enlivedRecord = _enlivenCachedObject(value);
	            callback(enlivedRecord.objects, enlivedRecord.options);
	          });
	        }
	        else {
	          new fabric.util.request(url, {
	            method: 'get',
	            onComplete: onComplete
	          });
	        }
	      });

	      function onComplete(r) {

	        var xml = r.responseXML;
	        if (xml && !xml.documentElement && fabric.window.ActiveXObject && r.responseText) {
	          xml = new ActiveXObject('Microsoft.XMLDOM');
	          xml.async = 'false';
	          //IE chokes on DOCTYPE
	          xml.loadXML(r.responseText.replace(/<!DOCTYPE[\s\S]*?(\[[\s\S]*\])*?>/i, ''));
	        }
	        if (!xml || !xml.documentElement) {
	          return;
	        }

	        fabric.parseSVGDocument(xml.documentElement, function (results, options) {
	          svgCache.set(url, {
	            objects: fabric.util.array.invoke(results, 'toObject'),
	            options: options
	          });
	          callback(results, options);
	        }, reviver);
	      }
	    },

	    /**
	     * Takes string corresponding to an SVG document, and parses it into a set of fabric objects
	     * @memberOf fabric
	     * @param {String} string
	     * @param {Function} callback
	     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
	     */
	    loadSVGFromString: function(string, callback, reviver) {
	      string = string.trim();
	      var doc;
	      if (typeof DOMParser !== 'undefined') {
	        var parser = new DOMParser();
	        if (parser && parser.parseFromString) {
	          doc = parser.parseFromString(string, 'text/xml');
	        }
	      }
	      else if (fabric.window.ActiveXObject) {
	        doc = new ActiveXObject('Microsoft.XMLDOM');
	        doc.async = 'false';
	        // IE chokes on DOCTYPE
	        doc.loadXML(string.replace(/<!DOCTYPE[\s\S]*?(\[[\s\S]*\])*?>/i, ''));
	      }

	      fabric.parseSVGDocument(doc.documentElement, function (results, options) {
	        callback(results, options);
	      }, reviver);
	    },

	    /**
	     * Creates markup containing SVG font faces,
	     * font URLs for font faces must be collected by developers
	     * and are not extracted from the DOM by fabricjs
	     * @param {Array} objects Array of fabric objects
	     * @return {String}
	     */
	    createSVGFontFacesMarkup: function(objects) {
	      var markup = '', fontList = { }, obj, fontFamily,
	          style, row, rowIndex, char, charIndex,
	          fontPaths = fabric.fontPaths;

	      for (var i = 0, len = objects.length; i < len; i++) {
	        obj = objects[i];
	        fontFamily = obj.fontFamily;
	        if (obj.type.indexOf('text') === -1 || fontList[fontFamily] || !fontPaths[fontFamily]) {
	          continue;
	        }
	        fontList[fontFamily] = true;
	        if (!obj.styles) {
	          continue;
	        }
	        style = obj.styles;
	        for (rowIndex in style) {
	          char = style[rowIndex];
	          for (charIndex in row) {
	            char = row[charIndex];
	            fontFamily = char.fontFamily;
	            if (!fontList[fontFamily] && fontPaths[fontFamily]) {
	              fontList[fontFamily] = true;
	            }
	          }
	        }
	      }

	      for (var j in fontList) {
	        markup += [
	          //jscs:disable validateIndentation
	          '\t\t@font-face {\n',
	            '\t\t\tfont-family: \'', j, '\';\n',
	            '\t\t\tsrc: url(\'', fontPaths[j], '\');\n',
	          '\t\t}\n'
	          //jscs:enable validateIndentation
	        ].join('');
	      }

	      if (markup) {
	        markup = [
	          //jscs:disable validateIndentation
	          '\t<style type="text/css">',
	            '<![CDATA[\n',
	              markup,
	            ']]>',
	          '</style>\n'
	          //jscs:enable validateIndentation
	        ].join('');
	      }

	      return markup;
	    },

	    /**
	     * Creates markup containing SVG referenced elements like patterns, gradients etc.
	     * @param {fabric.Canvas} canvas instance of fabric.Canvas
	     * @return {String}
	     */
	    createSVGRefElementsMarkup: function(canvas) {
	      var markup = [ ];

	      _createSVGPattern(markup, canvas, 'backgroundColor');
	      _createSVGPattern(markup, canvas, 'overlayColor');

	      return markup.join('');
	    }
	  });

	})( true ? exports : this);


	fabric.ElementsParser = function(elements, callback, options, reviver) {
	  this.elements = elements;
	  this.callback = callback;
	  this.options = options;
	  this.reviver = reviver;
	  this.svgUid = (options && options.svgUid) || 0;
	};

	fabric.ElementsParser.prototype.parse = function() {
	  this.instances = new Array(this.elements.length);
	  this.numElements = this.elements.length;

	  this.createObjects();
	};

	fabric.ElementsParser.prototype.createObjects = function() {
	  for (var i = 0, len = this.elements.length; i < len; i++) {
	    this.elements[i].setAttribute('svgUid', this.svgUid);
	    (function(_this, i) {
	      setTimeout(function() {
	        _this.createObject(_this.elements[i], i);
	      }, 0);
	    })(this, i);
	  }
	};

	fabric.ElementsParser.prototype.createObject = function(el, index) {
	  var klass = fabric[fabric.util.string.capitalize(el.tagName)];
	  if (klass && klass.fromElement) {
	    try {
	      this._createObject(klass, el, index);
	    }
	    catch (err) {
	      fabric.log(err);
	    }
	  }
	  else {
	    this.checkIfDone();
	  }
	};

	fabric.ElementsParser.prototype._createObject = function(klass, el, index) {
	  if (klass.async) {
	    klass.fromElement(el, this.createCallback(index, el), this.options);
	  }
	  else {
	    var obj = klass.fromElement(el, this.options);
	    this.resolveGradient(obj, 'fill');
	    this.resolveGradient(obj, 'stroke');
	    this.reviver && this.reviver(el, obj);
	    this.instances[index] = obj;
	    this.checkIfDone();
	  }
	};

	fabric.ElementsParser.prototype.createCallback = function(index, el) {
	  var _this = this;
	  return function(obj) {
	    _this.resolveGradient(obj, 'fill');
	    _this.resolveGradient(obj, 'stroke');
	    _this.reviver && _this.reviver(el, obj);
	    _this.instances[index] = obj;
	    _this.checkIfDone();
	  };
	};

	fabric.ElementsParser.prototype.resolveGradient = function(obj, property) {

	  var instanceFillValue = obj.get(property);
	  if (!(/^url\(/).test(instanceFillValue)) {
	    return;
	  }
	  var gradientId = instanceFillValue.slice(5, instanceFillValue.length - 1);
	  if (fabric.gradientDefs[this.svgUid][gradientId]) {
	    obj.set(property,
	      fabric.Gradient.fromElement(fabric.gradientDefs[this.svgUid][gradientId], obj));
	  }
	};

	fabric.ElementsParser.prototype.checkIfDone = function() {
	  if (--this.numElements === 0) {
	    this.instances = this.instances.filter(function(el) {
	      return el != null;
	    });
	    this.callback(this.instances);
	  }
	};


	(function(global) {

	  'use strict';

	  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */

	  var fabric = global.fabric || (global.fabric = { });

	  if (fabric.Point) {
	    fabric.warn('fabric.Point is already defined');
	    return;
	  }

	  fabric.Point = Point;

	  /**
	   * Point class
	   * @class fabric.Point
	   * @memberOf fabric
	   * @constructor
	   * @param {Number} x
	   * @param {Number} y
	   * @return {fabric.Point} thisArg
	   */
	  function Point(x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  Point.prototype = /** @lends fabric.Point.prototype */ {

	    constructor: Point,

	    /**
	     * Adds another point to this one and returns another one
	     * @param {fabric.Point} that
	     * @return {fabric.Point} new Point instance with added values
	     */
	    add: function (that) {
	      return new Point(this.x + that.x, this.y + that.y);
	    },

	    /**
	     * Adds another point to this one
	     * @param {fabric.Point} that
	     * @return {fabric.Point} thisArg
	     */
	    addEquals: function (that) {
	      this.x += that.x;
	      this.y += that.y;
	      return this;
	    },

	    /**
	     * Adds value to this point and returns a new one
	     * @param {Number} scalar
	     * @return {fabric.Point} new Point with added value
	     */
	    scalarAdd: function (scalar) {
	      return new Point(this.x + scalar, this.y + scalar);
	    },

	    /**
	     * Adds value to this point
	     * @param {Number} scalar
	     * @return {fabric.Point} thisArg
	     */
	    scalarAddEquals: function (scalar) {
	      this.x += scalar;
	      this.y += scalar;
	      return this;
	    },

	    /**
	     * Subtracts another point from this point and returns a new one
	     * @param {fabric.Point} that
	     * @return {fabric.Point} new Point object with subtracted values
	     */
	    subtract: function (that) {
	      return new Point(this.x - that.x, this.y - that.y);
	    },

	    /**
	     * Subtracts another point from this point
	     * @param {fabric.Point} that
	     * @return {fabric.Point} thisArg
	     */
	    subtractEquals: function (that) {
	      this.x -= that.x;
	      this.y -= that.y;
	      return this;
	    },

	    /**
	     * Subtracts value from this point and returns a new one
	     * @param {Number} scalar
	     * @return {fabric.Point}
	     */
	    scalarSubtract: function (scalar) {
	      return new Point(this.x - scalar, this.y - scalar);
	    },

	    /**
	     * Subtracts value from this point
	     * @param {Number} scalar
	     * @return {fabric.Point} thisArg
	     */
	    scalarSubtractEquals: function (scalar) {
	      this.x -= scalar;
	      this.y -= scalar;
	      return this;
	    },

	    /**
	     * Miltiplies this point by a value and returns a new one
	     * @param {Number} scalar
	     * @return {fabric.Point}
	     */
	    multiply: function (scalar) {
	      return new Point(this.x * scalar, this.y * scalar);
	    },

	    /**
	     * Miltiplies this point by a value
	     * @param {Number} scalar
	     * @return {fabric.Point} thisArg
	     */
	    multiplyEquals: function (scalar) {
	      this.x *= scalar;
	      this.y *= scalar;
	      return this;
	    },

	    /**
	     * Divides this point by a value and returns a new one
	     * @param {Number} scalar
	     * @return {fabric.Point}
	     */
	    divide: function (scalar) {
	      return new Point(this.x / scalar, this.y / scalar);
	    },

	    /**
	     * Divides this point by a value
	     * @param {Number} scalar
	     * @return {fabric.Point} thisArg
	     */
	    divideEquals: function (scalar) {
	      this.x /= scalar;
	      this.y /= scalar;
	      return this;
	    },

	    /**
	     * Returns true if this point is equal to another one
	     * @param {fabric.Point} that
	     * @return {Boolean}
	     */
	    eq: function (that) {
	      return (this.x === that.x && this.y === that.y);
	    },

	    /**
	     * Returns true if this point is less than another one
	     * @param {fabric.Point} that
	     * @return {Boolean}
	     */
	    lt: function (that) {
	      return (this.x < that.x && this.y < that.y);
	    },

	    /**
	     * Returns true if this point is less than or equal to another one
	     * @param {fabric.Point} that
	     * @return {Boolean}
	     */
	    lte: function (that) {
	      return (this.x <= that.x && this.y <= that.y);
	    },

	    /**

	     * Returns true if this point is greater another one
	     * @param {fabric.Point} that
	     * @return {Boolean}
	     */
	    gt: function (that) {
	      return (this.x > that.x && this.y > that.y);
	    },

	    /**
	     * Returns true if this point is greater than or equal to another one
	     * @param {fabric.Point} that
	     * @return {Boolean}
	     */
	    gte: function (that) {
	      return (this.x >= that.x && this.y >= that.y);
	    },

	    /**
	     * Returns new point which is the result of linear interpolation with this one and another one
	     * @param {fabric.Point} that
	     * @param {Number} t
	     * @return {fabric.Point}
	     */
	    lerp: function (that, t) {
	      return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);
	    },

	    /**
	     * Returns distance from this point and another one
	     * @param {fabric.Point} that
	     * @return {Number}
	     */
	    distanceFrom: function (that) {
	      var dx = this.x - that.x,
	          dy = this.y - that.y;
	      return Math.sqrt(dx * dx + dy * dy);
	    },

	    /**
	     * Returns the point between this point and another one
	     * @param {fabric.Point} that
	     * @return {fabric.Point}
	     */
	    midPointFrom: function (that) {
	      return new Point(this.x + (that.x - this.x)/2, this.y + (that.y - this.y)/2);
	    },

	    /**
	     * Returns a new point which is the min of this and another one
	     * @param {fabric.Point} that
	     * @return {fabric.Point}
	     */
	    min: function (that) {
	      return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));
	    },

	    /**
	     * Returns a new point which is the max of this and another one
	     * @param {fabric.Point} that
	     * @return {fabric.Point}
	     */
	    max: function (that) {
	      return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));
	    },

	    /**
	     * Returns string representation of this point
	     * @return {String}
	     */
	    toString: function () {
	      return this.x + ',' + this.y;
	    },

	    /**
	     * Sets x/y of this point
	     * @param {Number} x
	     * @param {Number} y
	     */
	    setXY: function (x, y) {
	      this.x = x;
	      this.y = y;
	    },

	    /**
	     * Sets x/y of this point from another point
	     * @param {fabric.Point} that
	     */
	    setFromPoint: function (that) {
	      this.x = that.x;
	      this.y = that.y;
	    },

	    /**
	     * Swaps x/y of this point and another point
	     * @param {fabric.Point} that
	     */
	    swap: function (that) {
	      var x = this.x,
	          y = this.y;
	      this.x = that.x;
	      this.y = that.y;
	      that.x = x;
	      that.y = y;
	    }
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */
	  var fabric = global.fabric || (global.fabric = { });

	  if (fabric.Intersection) {
	    fabric.warn('fabric.Intersection is already defined');
	    return;
	  }

	  /**
	   * Intersection class
	   * @class fabric.Intersection
	   * @memberOf fabric
	   * @constructor
	   */
	  function Intersection(status) {
	    this.status = status;
	    this.points = [];
	  }

	  fabric.Intersection = Intersection;

	  fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */ {

	    /**
	     * Appends a point to intersection
	     * @param {fabric.Point} point
	     */
	    appendPoint: function (point) {
	      this.points.push(point);
	    },

	    /**
	     * Appends points to intersection
	     * @param {Array} points
	     */
	    appendPoints: function (points) {
	      this.points = this.points.concat(points);
	    }
	  };

	  /**
	   * Checks if one line intersects another
	   * @static
	   * @param {fabric.Point} a1
	   * @param {fabric.Point} a2
	   * @param {fabric.Point} b1
	   * @param {fabric.Point} b2
	   * @return {fabric.Intersection}
	   */
	  fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {
	    var result,
	        uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),
	        ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),
	        uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
	    if (uB !== 0) {
	      var ua = uaT / uB,
	          ub = ubT / uB;
	      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
	        result = new Intersection('Intersection');
	        result.points.push(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));
	      }
	      else {
	        result = new Intersection();
	      }
	    }
	    else {
	      if (uaT === 0 || ubT === 0) {
	        result = new Intersection('Coincident');
	      }
	      else {
	        result = new Intersection('Parallel');
	      }
	    }
	    return result;
	  };

	  /**
	   * Checks if line intersects polygon
	   * @static
	   * @param {fabric.Point} a1
	   * @param {fabric.Point} a2
	   * @param {Array} points
	   * @return {fabric.Intersection}
	   */
	  fabric.Intersection.intersectLinePolygon = function(a1, a2, points) {
	    var result = new Intersection(),
	        length = points.length;

	    for (var i = 0; i < length; i++) {
	      var b1 = points[i],
	          b2 = points[(i + 1) % length],
	          inter = Intersection.intersectLineLine(a1, a2, b1, b2);

	      result.appendPoints(inter.points);
	    }
	    if (result.points.length > 0) {
	      result.status = 'Intersection';
	    }
	    return result;
	  };

	  /**
	   * Checks if polygon intersects another polygon
	   * @static
	   * @param {Array} points1
	   * @param {Array} points2
	   * @return {fabric.Intersection}
	   */
	  fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {
	    var result = new Intersection(),
	        length = points1.length;

	    for (var i = 0; i < length; i++) {
	      var a1 = points1[i],
	          a2 = points1[(i + 1) % length],
	          inter = Intersection.intersectLinePolygon(a1, a2, points2);

	      result.appendPoints(inter.points);
	    }
	    if (result.points.length > 0) {
	      result.status = 'Intersection';
	    }
	    return result;
	  };

	  /**
	   * Checks if polygon intersects rectangle
	   * @static
	   * @param {Array} points
	   * @param {Number} r1
	   * @param {Number} r2
	   * @return {fabric.Intersection}
	   */
	  fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {
	    var min = r1.min(r2),
	        max = r1.max(r2),
	        topRight = new fabric.Point(max.x, min.y),
	        bottomLeft = new fabric.Point(min.x, max.y),
	        inter1 = Intersection.intersectLinePolygon(min, topRight, points),
	        inter2 = Intersection.intersectLinePolygon(topRight, max, points),
	        inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),
	        inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),
	        result = new Intersection();

	    result.appendPoints(inter1.points);
	    result.appendPoints(inter2.points);
	    result.appendPoints(inter3.points);
	    result.appendPoints(inter4.points);

	    if (result.points.length > 0) {
	      result.status = 'Intersection';
	    }
	    return result;
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { });

	  if (fabric.Color) {
	    fabric.warn('fabric.Color is already defined.');
	    return;
	  }

	  /**
	   * Color class
	   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;
	   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.
	   *
	   * @class fabric.Color
	   * @param {String} color optional in hex or rgb(a) format
	   * @return {fabric.Color} thisArg
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}
	   */
	  function Color(color) {
	    if (!color) {
	      this.setSource([0, 0, 0, 1]);
	    }
	    else {
	      this._tryParsingColor(color);
	    }
	  }

	  fabric.Color = Color;

	  fabric.Color.prototype = /** @lends fabric.Color.prototype */ {

	    /**
	     * @private
	     * @param {String|Array} color Color value to parse
	     */
	    _tryParsingColor: function(color) {
	      var source;

	      if (color in Color.colorNameMap) {
	        color = Color.colorNameMap[color];
	      }

	      if (color === 'transparent') {
	        this.setSource([255, 255, 255, 0]);
	        return;
	      }

	      source = Color.sourceFromHex(color);

	      if (!source) {
	        source = Color.sourceFromRgb(color);
	      }
	      if (!source) {
	        source = Color.sourceFromHsl(color);
	      }
	      if (source) {
	        this.setSource(source);
	      }
	    },

	    /**
	     * Adapted from <a href="https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html">https://github.com/mjijackson</a>
	     * @private
	     * @param {Number} r Red color value
	     * @param {Number} g Green color value
	     * @param {Number} b Blue color value
	     * @return {Array} Hsl color
	     */
	    _rgbToHsl: function(r, g, b) {
	      r /= 255, g /= 255, b /= 255;

	      var h, s, l,
	          max = fabric.util.array.max([r, g, b]),
	          min = fabric.util.array.min([r, g, b]);

	      l = (max + min) / 2;

	      if (max === min) {
	        h = s = 0; // achromatic
	      }
	      else {
	        var d = max - min;
	        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	        switch (max) {
	          case r:
	            h = (g - b) / d + (g < b ? 6 : 0);
	            break;
	          case g:
	            h = (b - r) / d + 2;
	            break;
	          case b:
	            h = (r - g) / d + 4;
	            break;
	        }
	        h /= 6;
	      }

	      return [
	        Math.round(h * 360),
	        Math.round(s * 100),
	        Math.round(l * 100)
	      ];
	    },

	    /**
	     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])
	     * @return {Array}
	     */
	    getSource: function() {
	      return this._source;
	    },

	    /**
	     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])
	     * @param {Array} source
	     */
	    setSource: function(source) {
	      this._source = source;
	    },

	    /**
	     * Returns color represenation in RGB format
	     * @return {String} ex: rgb(0-255,0-255,0-255)
	     */
	    toRgb: function() {
	      var source = this.getSource();
	      return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';
	    },

	    /**
	     * Returns color represenation in RGBA format
	     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)
	     */
	    toRgba: function() {
	      var source = this.getSource();
	      return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';
	    },

	    /**
	     * Returns color represenation in HSL format
	     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)
	     */
	    toHsl: function() {
	      var source = this.getSource(),
	          hsl = this._rgbToHsl(source[0], source[1], source[2]);

	      return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';
	    },

	    /**
	     * Returns color represenation in HSLA format
	     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)
	     */
	    toHsla: function() {
	      var source = this.getSource(),
	          hsl = this._rgbToHsl(source[0], source[1], source[2]);

	      return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';
	    },

	    /**
	     * Returns color represenation in HEX format
	     * @return {String} ex: FF5555
	     */
	    toHex: function() {
	      var source = this.getSource(), r, g, b;

	      r = source[0].toString(16);
	      r = (r.length === 1) ? ('0' + r) : r;

	      g = source[1].toString(16);
	      g = (g.length === 1) ? ('0' + g) : g;

	      b = source[2].toString(16);
	      b = (b.length === 1) ? ('0' + b) : b;

	      return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();
	    },

	    /**
	     * Gets value of alpha channel for this color
	     * @return {Number} 0-1
	     */
	    getAlpha: function() {
	      return this.getSource()[3];
	    },

	    /**
	     * Sets value of alpha channel for this color
	     * @param {Number} alpha Alpha value 0-1
	     * @return {fabric.Color} thisArg
	     */
	    setAlpha: function(alpha) {
	      var source = this.getSource();
	      source[3] = alpha;
	      this.setSource(source);
	      return this;
	    },

	    /**
	     * Transforms color to its grayscale representation
	     * @return {fabric.Color} thisArg
	     */
	    toGrayscale: function() {
	      var source = this.getSource(),
	          average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),
	          currentAlpha = source[3];
	      this.setSource([average, average, average, currentAlpha]);
	      return this;
	    },

	    /**
	     * Transforms color to its black and white representation
	     * @param {Number} threshold
	     * @return {fabric.Color} thisArg
	     */
	    toBlackWhite: function(threshold) {
	      var source = this.getSource(),
	          average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),
	          currentAlpha = source[3];

	      threshold = threshold || 127;

	      average = (Number(average) < Number(threshold)) ? 0 : 255;
	      this.setSource([average, average, average, currentAlpha]);
	      return this;
	    },

	    /**
	     * Overlays color with another color
	     * @param {String|fabric.Color} otherColor
	     * @return {fabric.Color} thisArg
	     */
	    overlayWith: function(otherColor) {
	      if (!(otherColor instanceof Color)) {
	        otherColor = new Color(otherColor);
	      }

	      var result = [],
	          alpha = this.getAlpha(),
	          otherAlpha = 0.5,
	          source = this.getSource(),
	          otherSource = otherColor.getSource();

	      for (var i = 0; i < 3; i++) {
	        result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));
	      }

	      result[3] = alpha;
	      this.setSource(result);
	      return this;
	    }
	  };

	  /**
	   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))
	   * @static
	   * @field
	   * @memberOf fabric.Color
	   */
	  fabric.Color.reRGBa = /^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/;

	  /**
	   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))
	   * @static
	   * @field
	   * @memberOf fabric.Color
	   */
	  fabric.Color.reHSLa = /^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/;

	  /**
	   * Regex matching color in HEX format (ex: #FF5555, 010155, aff)
	   * @static
	   * @field
	   * @memberOf fabric.Color
	   */
	  fabric.Color.reHex = /^#?([0-9a-f]{6}|[0-9a-f]{3})$/i;

	  /**
	   * Map of the 17 basic color names with HEX code
	   * @static
	   * @field
	   * @memberOf fabric.Color
	   * @see: http://www.w3.org/TR/CSS2/syndata.html#color-units
	   */
	  fabric.Color.colorNameMap = {
	    aqua:    '#00FFFF',
	    black:   '#000000',
	    blue:    '#0000FF',
	    fuchsia: '#FF00FF',
	    gray:    '#808080',
	    green:   '#008000',
	    lime:    '#00FF00',
	    maroon:  '#800000',
	    navy:    '#000080',
	    olive:   '#808000',
	    orange:  '#FFA500',
	    purple:  '#800080',
	    red:     '#FF0000',
	    silver:  '#C0C0C0',
	    teal:    '#008080',
	    white:   '#FFFFFF',
	    yellow:  '#FFFF00'
	  };

	  /**
	   * @private
	   * @param {Number} p
	   * @param {Number} q
	   * @param {Number} t
	   * @return {Number}
	   */
	  function hue2rgb(p, q, t) {
	    if (t < 0) {
	      t += 1;
	    }
	    if (t > 1) {
	      t -= 1;
	    }
	    if (t < 1/6) {
	      return p + (q - p) * 6 * t;
	    }
	    if (t < 1/2) {
	      return q;
	    }
	    if (t < 2/3) {
	      return p + (q - p) * (2/3 - t) * 6;
	    }
	    return p;
	  }

	  /**
	   * Returns new color object, when given a color in RGB format
	   * @memberOf fabric.Color
	   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)
	   * @return {fabric.Color}
	   */
	  fabric.Color.fromRgb = function(color) {
	    return Color.fromSource(Color.sourceFromRgb(color));
	  };

	  /**
	   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format
	   * @memberOf fabric.Color
	   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)
	   * @return {Array} source
	   */
	  fabric.Color.sourceFromRgb = function(color) {
	    var match = color.match(Color.reRGBa);
	    if (match) {
	      var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),
	          g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),
	          b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);

	      return [
	        parseInt(r, 10),
	        parseInt(g, 10),
	        parseInt(b, 10),
	        match[4] ? parseFloat(match[4]) : 1
	      ];
	    }
	  };

	  /**
	   * Returns new color object, when given a color in RGBA format
	   * @static
	   * @function
	   * @memberOf fabric.Color
	   * @param {String} color
	   * @return {fabric.Color}
	   */
	  fabric.Color.fromRgba = Color.fromRgb;

	  /**
	   * Returns new color object, when given a color in HSL format
	   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)
	   * @memberOf fabric.Color
	   * @return {fabric.Color}
	   */
	  fabric.Color.fromHsl = function(color) {
	    return Color.fromSource(Color.sourceFromHsl(color));
	  };

	  /**
	   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.
	   * Adapted from <a href="https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html">https://github.com/mjijackson</a>
	   * @memberOf fabric.Color
	   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)
	   * @return {Array} source
	   * @see http://http://www.w3.org/TR/css3-color/#hsl-color
	   */
	  fabric.Color.sourceFromHsl = function(color) {
	    var match = color.match(Color.reHSLa);
	    if (!match) {
	      return;
	    }

	    var h = (((parseFloat(match[1]) % 360) + 360) % 360) / 360,
	        s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),
	        l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),
	        r, g, b;

	    if (s === 0) {
	      r = g = b = l;
	    }
	    else {
	      var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,
	          p = l * 2 - q;

	      r = hue2rgb(p, q, h + 1/3);
	      g = hue2rgb(p, q, h);
	      b = hue2rgb(p, q, h - 1/3);
	    }

	    return [
	      Math.round(r * 255),
	      Math.round(g * 255),
	      Math.round(b * 255),
	      match[4] ? parseFloat(match[4]) : 1
	    ];
	  };

	  /**
	   * Returns new color object, when given a color in HSLA format
	   * @static
	   * @function
	   * @memberOf fabric.Color
	   * @param {String} color
	   * @return {fabric.Color}
	   */
	  fabric.Color.fromHsla = Color.fromHsl;

	  /**
	   * Returns new color object, when given a color in HEX format
	   * @static
	   * @memberOf fabric.Color
	   * @param {String} color Color value ex: FF5555
	   * @return {fabric.Color}
	   */
	  fabric.Color.fromHex = function(color) {
	    return Color.fromSource(Color.sourceFromHex(color));
	  };

	  /**
	   * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in HEX format
	   * @static
	   * @memberOf fabric.Color
	   * @param {String} color ex: FF5555
	   * @return {Array} source
	   */
	  fabric.Color.sourceFromHex = function(color) {
	    if (color.match(Color.reHex)) {
	      var value = color.slice(color.indexOf('#') + 1),
	          isShortNotation = (value.length === 3),
	          r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),
	          g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),
	          b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6);

	      return [
	        parseInt(r, 16),
	        parseInt(g, 16),
	        parseInt(b, 16),
	        1
	      ];
	    }
	  };

	  /**
	   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])
	   * @static
	   * @memberOf fabric.Color
	   * @param {Array} source
	   * @return {fabric.Color}
	   */
	  fabric.Color.fromSource = function(source) {
	    var oColor = new Color();
	    oColor.setSource(source);
	    return oColor;
	  };

	})( true ? exports : this);


	(function() {

	  /* _FROM_SVG_START_ */
	  function getColorStop(el) {
	    var style = el.getAttribute('style'),
	        offset = el.getAttribute('offset') || 0,
	        color, colorAlpha, opacity;

	    // convert percents to absolute values
	    offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);
	    offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;
	    if (style) {
	      var keyValuePairs = style.split(/\s*;\s*/);

	      if (keyValuePairs[keyValuePairs.length - 1] === '') {
	        keyValuePairs.pop();
	      }

	      for (var i = keyValuePairs.length; i--; ) {

	        var split = keyValuePairs[i].split(/\s*:\s*/),
	            key = split[0].trim(),
	            value = split[1].trim();

	        if (key === 'stop-color') {
	          color = value;
	        }
	        else if (key === 'stop-opacity') {
	          opacity = value;
	        }
	      }
	    }

	    if (!color) {
	      color = el.getAttribute('stop-color') || 'rgb(0,0,0)';
	    }
	    if (!opacity) {
	      opacity = el.getAttribute('stop-opacity');
	    }

	    color = new fabric.Color(color);
	    colorAlpha = color.getAlpha();
	    opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);
	    opacity *= colorAlpha;

	    return {
	      offset: offset,
	      color: color.toRgb(),
	      opacity: opacity
	    };
	  }

	  function getLinearCoords(el) {
	    return {
	      x1: el.getAttribute('x1') || 0,
	      y1: el.getAttribute('y1') || 0,
	      x2: el.getAttribute('x2') || '100%',
	      y2: el.getAttribute('y2') || 0
	    };
	  }

	  function getRadialCoords(el) {
	    return {
	      x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',
	      y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',
	      r1: 0,
	      x2: el.getAttribute('cx') || '50%',
	      y2: el.getAttribute('cy') || '50%',
	      r2: el.getAttribute('r') || '50%'
	    };
	  }
	  /* _FROM_SVG_END_ */

	  /**
	   * Gradient class
	   * @class fabric.Gradient
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}
	   * @see {@link fabric.Gradient#initialize} for constructor definition
	   */
	  fabric.Gradient = fabric.util.createClass(/** @lends fabric.Gradient.prototype */ {

	    /**
	     * Horizontal offset for aligning gradients coming from SVG when outside pathgroups
	     * @type Number
	     * @default 0
	     */
	    offsetX: 0,

	    /**
	     * Vertical offset for aligning gradients coming from SVG when outside pathgroups
	     * @type Number
	     * @default 0
	     */
	    offsetY: 0,

	    /**
	     * Constructor
	     * @param {Object} [options] Options object with type, coords, gradientUnits and colorStops
	     * @return {fabric.Gradient} thisArg
	     */
	    initialize: function(options) {
	      options || (options = { });

	      var coords = { };

	      this.id = fabric.Object.__uid++;
	      this.type = options.type || 'linear';

	      coords = {
	        x1: options.coords.x1 || 0,
	        y1: options.coords.y1 || 0,
	        x2: options.coords.x2 || 0,
	        y2: options.coords.y2 || 0
	      };

	      if (this.type === 'radial') {
	        coords.r1 = options.coords.r1 || 0;
	        coords.r2 = options.coords.r2 || 0;
	      }
	      this.coords = coords;
	      this.colorStops = options.colorStops.slice();
	      if (options.gradientTransform) {
	        this.gradientTransform = options.gradientTransform;
	      }
	      this.offsetX = options.offsetX || this.offsetX;
	      this.offsetY = options.offsetY || this.offsetY;
	    },

	    /**
	     * Adds another colorStop
	     * @param {Object} colorStop Object with offset and color
	     * @return {fabric.Gradient} thisArg
	     */
	    addColorStop: function(colorStop) {
	      for (var position in colorStop) {
	        var color = new fabric.Color(colorStop[position]);
	        this.colorStops.push({
	          offset: position,
	          color: color.toRgb(),
	          opacity: color.getAlpha()
	        });
	      }
	      return this;
	    },

	    /**
	     * Returns object representation of a gradient
	     * @return {Object}
	     */
	    toObject: function() {
	      return {
	        type: this.type,
	        coords: this.coords,
	        colorStops: this.colorStops,
	        offsetX: this.offsetX,
	        offsetY: this.offsetY,
	        gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform
	      };
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns SVG representation of an gradient
	     * @param {Object} object Object to create a gradient for
	     * @param {Boolean} normalize Whether coords should be normalized
	     * @return {String} SVG representation of an gradient (linear/radial)
	     */
	    toSVG: function(object) {
	      var coords = fabric.util.object.clone(this.coords),
	          markup, commonAttributes;

	      // colorStops must be sorted ascending
	      this.colorStops.sort(function(a, b) {
	        return a.offset - b.offset;
	      });

	      if (!(object.group && object.group.type === 'path-group')) {
	        for (var prop in coords) {
	          if (prop === 'x1' || prop === 'x2' || prop === 'r2') {
	            coords[prop] += this.offsetX - object.width / 2;
	          }
	          else if (prop === 'y1' || prop === 'y2') {
	            coords[prop] += this.offsetY - object.height / 2;
	          }
	        }
	      }

	      commonAttributes = 'id="SVGID_' + this.id +
	                     '" gradientUnits="userSpaceOnUse"';
	      if (this.gradientTransform) {
	        commonAttributes += ' gradientTransform="matrix(' + this.gradientTransform.join(' ') + ')" ';
	      }
	      if (this.type === 'linear') {
	        markup = [
	          //jscs:disable validateIndentation
	          '<linearGradient ',
	            commonAttributes,
	            ' x1="', coords.x1,
	            '" y1="', coords.y1,
	            '" x2="', coords.x2,
	            '" y2="', coords.y2,
	          '">\n'
	          //jscs:enable validateIndentation
	        ];
	      }
	      else if (this.type === 'radial') {
	        markup = [
	          //jscs:disable validateIndentation
	          '<radialGradient ',
	            commonAttributes,
	            ' cx="', coords.x2,
	            '" cy="', coords.y2,
	            '" r="', coords.r2,
	            '" fx="', coords.x1,
	            '" fy="', coords.y1,
	          '">\n'
	          //jscs:enable validateIndentation
	        ];
	      }

	      for (var i = 0; i < this.colorStops.length; i++) {
	        markup.push(
	          //jscs:disable validateIndentation
	          '<stop ',
	            'offset="', (this.colorStops[i].offset * 100) + '%',
	            '" style="stop-color:', this.colorStops[i].color,
	            (this.colorStops[i].opacity != null ? ';stop-opacity: ' + this.colorStops[i].opacity : ';'),
	          '"/>\n'
	          //jscs:enable validateIndentation
	        );
	      }

	      markup.push((this.type === 'linear' ? '</linearGradient>\n' : '</radialGradient>\n'));

	      return markup.join('');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns an instance of CanvasGradient
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @return {CanvasGradient}
	     */
	    toLive: function(ctx, object) {
	      var gradient, prop, coords = fabric.util.object.clone(this.coords);

	      if (!this.type) {
	        return;
	      }

	      if (object.group && object.group.type === 'path-group') {
	        for (prop in coords) {
	          if (prop === 'x1' || prop === 'x2') {
	            coords[prop] += -this.offsetX + object.width / 2;
	          }
	          else if (prop === 'y1' || prop === 'y2') {
	            coords[prop] += -this.offsetY + object.height / 2;
	          }
	        }
	      }

	      if (this.type === 'linear') {
	        gradient = ctx.createLinearGradient(
	          coords.x1, coords.y1, coords.x2, coords.y2);
	      }
	      else if (this.type === 'radial') {
	        gradient = ctx.createRadialGradient(
	          coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);
	      }

	      for (var i = 0, len = this.colorStops.length; i < len; i++) {
	        var color = this.colorStops[i].color,
	            opacity = this.colorStops[i].opacity,
	            offset = this.colorStops[i].offset;

	        if (typeof opacity !== 'undefined') {
	          color = new fabric.Color(color).setAlpha(opacity).toRgba();
	        }
	        gradient.addColorStop(parseFloat(offset), color);
	      }

	      return gradient;
	    }
	  });

	  fabric.util.object.extend(fabric.Gradient, {

	    /* _FROM_SVG_START_ */
	    /**
	     * Returns {@link fabric.Gradient} instance from an SVG element
	     * @static
	     * @memberOf fabric.Gradient
	     * @param {SVGGradientElement} el SVG gradient element
	     * @param {fabric.Object} instance
	     * @return {fabric.Gradient} Gradient instance
	     * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement
	     * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement
	     */
	    fromElement: function(el, instance) {

	      /**
	       *  @example:
	       *
	       *  <linearGradient id="linearGrad1">
	       *    <stop offset="0%" stop-color="white"/>
	       *    <stop offset="100%" stop-color="black"/>
	       *  </linearGradient>
	       *
	       *  OR
	       *
	       *  <linearGradient id="linearGrad2">
	       *    <stop offset="0" style="stop-color:rgb(255,255,255)"/>
	       *    <stop offset="1" style="stop-color:rgb(0,0,0)"/>
	       *  </linearGradient>
	       *
	       *  OR
	       *
	       *  <radialGradient id="radialGrad1">
	       *    <stop offset="0%" stop-color="white" stop-opacity="1" />
	       *    <stop offset="50%" stop-color="black" stop-opacity="0.5" />
	       *    <stop offset="100%" stop-color="white" stop-opacity="1" />
	       *  </radialGradient>
	       *
	       *  OR
	       *
	       *  <radialGradient id="radialGrad2">
	       *    <stop offset="0" stop-color="rgb(255,255,255)" />
	       *    <stop offset="0.5" stop-color="rgb(0,0,0)" />
	       *    <stop offset="1" stop-color="rgb(255,255,255)" />
	       *  </radialGradient>
	       *
	       */

	      var colorStopEls = el.getElementsByTagName('stop'),
	          type = (el.nodeName === 'linearGradient' ? 'linear' : 'radial'),
	          gradientUnits = el.getAttribute('gradientUnits') || 'objectBoundingBox',
	          gradientTransform = el.getAttribute('gradientTransform'),
	          colorStops = [],
	          coords = { }, ellipseMatrix;

	      if (type === 'linear') {
	        coords = getLinearCoords(el);
	      }
	      else if (type === 'radial') {
	        coords = getRadialCoords(el);
	      }

	      for (var i = colorStopEls.length; i--; ) {
	        colorStops.push(getColorStop(colorStopEls[i]));
	      }

	      ellipseMatrix = _convertPercentUnitsToValues(instance, coords, gradientUnits);

	      var gradient = new fabric.Gradient({
	        type: type,
	        coords: coords,
	        colorStops: colorStops,
	        offsetX: -instance.left,
	        offsetY: -instance.top
	      });

	      if (gradientTransform || ellipseMatrix !== '') {
	        gradient.gradientTransform = fabric.parseTransformAttribute((gradientTransform || '') + ellipseMatrix);
	      }
	      return gradient;
	    },
	    /* _FROM_SVG_END_ */

	    /**
	     * Returns {@link fabric.Gradient} instance from its object representation
	     * @static
	     * @memberOf fabric.Gradient
	     * @param {Object} obj
	     * @param {Object} [options] Options object
	     */
	    forObject: function(obj, options) {
	      options || (options = { });
	      _convertPercentUnitsToValues(obj, options.coords, 'userSpaceOnUse');
	      return new fabric.Gradient(options);
	    }
	  });

	  /**
	   * @private
	   */
	  function _convertPercentUnitsToValues(object, options, gradientUnits) {
	    var propValue, addFactor = 0, multFactor = 1, ellipseMatrix = '';
	    for (var prop in options) {
	      propValue = parseFloat(options[prop], 10);
	      if (typeof options[prop] === 'string' && /^\d+%$/.test(options[prop])) {
	        multFactor = 0.01;
	      }
	      else {
	        multFactor = 1;
	      }
	      if (prop === 'x1' || prop === 'x2' || prop === 'r2') {
	        multFactor *= gradientUnits === 'objectBoundingBox' ? object.width : 1;
	        addFactor = gradientUnits === 'objectBoundingBox' ? object.left || 0 : 0;
	      }
	      else if (prop === 'y1' || prop === 'y2') {
	        multFactor *= gradientUnits === 'objectBoundingBox' ? object.height : 1;
	        addFactor = gradientUnits === 'objectBoundingBox' ? object.top || 0 : 0;
	      }
	      options[prop] = propValue * multFactor + addFactor;
	    }
	    if (object.type === 'ellipse' &&
	        options.r2 !== null &&
	        gradientUnits === 'objectBoundingBox' &&
	        object.rx !== object.ry) {

	      var scaleFactor = object.ry/object.rx;
	      ellipseMatrix = ' scale(1, ' + scaleFactor + ')';
	      if (options.y1) {
	        options.y1 /= scaleFactor;
	      }
	      if (options.y2) {
	        options.y2 /= scaleFactor;
	      }
	    }
	    return ellipseMatrix;
	  }
	})();


	/**
	 * Pattern class
	 * @class fabric.Pattern
	 * @see {@link http://fabricjs.com/patterns|Pattern demo}
	 * @see {@link http://fabricjs.com/dynamic-patterns|DynamicPattern demo}
	 * @see {@link fabric.Pattern#initialize} for constructor definition
	 */
	fabric.Pattern = fabric.util.createClass(/** @lends fabric.Pattern.prototype */ {

	  /**
	   * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)
	   * @type String
	   * @default
	   */
	  repeat: 'repeat',

	  /**
	   * Pattern horizontal offset from object's left/top corner
	   * @type Number
	   * @default
	   */
	  offsetX: 0,

	  /**
	   * Pattern vertical offset from object's left/top corner
	   * @type Number
	   * @default
	   */
	  offsetY: 0,

	  /**
	   * Constructor
	   * @param {Object} [options] Options object
	   * @return {fabric.Pattern} thisArg
	   */
	  initialize: function(options) {
	    options || (options = { });

	    this.id = fabric.Object.__uid++;

	    if (options.source) {
	      if (typeof options.source === 'string') {
	        // function string
	        if (typeof fabric.util.getFunctionBody(options.source) !== 'undefined') {
	          this.source = new Function(fabric.util.getFunctionBody(options.source));
	        }
	        else {
	          // img src string
	          var _this = this;
	          this.source = fabric.util.createImage();
	          fabric.util.loadImage(options.source, function(img) {
	            _this.source = img;
	          });
	        }
	      }
	      else {
	        // img element
	        this.source = options.source;
	      }
	    }
	    if (options.repeat) {
	      this.repeat = options.repeat;
	    }
	    if (options.offsetX) {
	      this.offsetX = options.offsetX;
	    }
	    if (options.offsetY) {
	      this.offsetY = options.offsetY;
	    }
	  },

	  /**
	   * Returns object representation of a pattern
	   * @return {Object} Object representation of a pattern instance
	   */
	  toObject: function() {

	    var source;

	    // callback
	    if (typeof this.source === 'function') {
	      source = String(this.source);
	    }
	    // <img> element
	    else if (typeof this.source.src === 'string') {
	      source = this.source.src;
	    }
	    // <canvas> element
	    else if (typeof this.source === 'object' && this.source.toDataURL) {
	      source = this.source.toDataURL();
	    }

	    return {
	      source: source,
	      repeat: this.repeat,
	      offsetX: this.offsetX,
	      offsetY: this.offsetY
	    };
	  },

	  /* _TO_SVG_START_ */
	  /**
	   * Returns SVG representation of a pattern
	   * @param {fabric.Object} object
	   * @return {String} SVG representation of a pattern
	   */
	  toSVG: function(object) {
	    var patternSource = typeof this.source === 'function' ? this.source() : this.source,
	        patternWidth = patternSource.width / object.getWidth(),
	        patternHeight = patternSource.height / object.getHeight(),
	        patternOffsetX = this.offsetX / object.getWidth(),
	        patternOffsetY = this.offsetY / object.getHeight(),
	        patternImgSrc = '';
	    if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {
	      patternHeight = 1;
	    }
	    if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {
	      patternWidth = 1;
	    }
	    if (patternSource.src) {
	      patternImgSrc = patternSource.src;
	    }
	    else if (patternSource.toDataURL) {
	      patternImgSrc = patternSource.toDataURL();
	    }

	    return '<pattern id="SVGID_' + this.id +
	                  '" x="' + patternOffsetX +
	                  '" y="' + patternOffsetY +
	                  '" width="' + patternWidth +
	                  '" height="' + patternHeight + '">\n' +
	             '<image x="0" y="0"' +
	                    ' width="' + patternSource.width +
	                    '" height="' + patternSource.height +
	                    '" xlink:href="' + patternImgSrc +
	             '"></image>\n' +
	           '</pattern>\n';
	  },
	  /* _TO_SVG_END_ */

	  /**
	   * Returns an instance of CanvasPattern
	   * @param {CanvasRenderingContext2D} ctx Context to create pattern
	   * @return {CanvasPattern}
	   */
	  toLive: function(ctx) {
	    var source = typeof this.source === 'function'
	      ? this.source()
	      : this.source;

	    // if the image failed to load, return, and allow rest to continue loading
	    if (!source) {
	      return '';
	    }

	    // if an image
	    if (typeof source.src !== 'undefined') {
	      if (!source.complete) {
	        return '';
	      }
	      if (source.naturalWidth === 0 || source.naturalHeight === 0) {
	        return '';
	      }
	    }
	    return ctx.createPattern(source, this.repeat);
	  }
	});


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { }),
	      toFixed = fabric.util.toFixed;

	  if (fabric.Shadow) {
	    fabric.warn('fabric.Shadow is already defined.');
	    return;
	  }

	  /**
	   * Shadow class
	   * @class fabric.Shadow
	   * @see {@link http://fabricjs.com/shadows|Shadow demo}
	   * @see {@link fabric.Shadow#initialize} for constructor definition
	   */
	  fabric.Shadow = fabric.util.createClass(/** @lends fabric.Shadow.prototype */ {

	    /**
	     * Shadow color
	     * @type String
	     * @default
	     */
	    color: 'rgb(0,0,0)',

	    /**
	     * Shadow blur
	     * @type Number
	     */
	    blur: 0,

	    /**
	     * Shadow horizontal offset
	     * @type Number
	     * @default
	     */
	    offsetX: 0,

	    /**
	     * Shadow vertical offset
	     * @type Number
	     * @default
	     */
	    offsetY: 0,

	    /**
	     * Whether the shadow should affect stroke operations
	     * @type Boolean
	     * @default
	     */
	    affectStroke: false,

	    /**
	     * Indicates whether toObject should include default values
	     * @type Boolean
	     * @default
	     */
	    includeDefaultValues: true,

	    /**
	     * Constructor
	     * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetX properties or string (e.g. "rgba(0,0,0,0.2) 2px 2px 10px, "2px 2px 10px rgba(0,0,0,0.2)")
	     * @return {fabric.Shadow} thisArg
	     */
	    initialize: function(options) {

	      if (typeof options === 'string') {
	        options = this._parseShadow(options);
	      }

	      for (var prop in options) {
	        this[prop] = options[prop];
	      }

	      this.id = fabric.Object.__uid++;
	    },

	    /**
	     * @private
	     * @param {String} shadow Shadow value to parse
	     * @return {Object} Shadow object with color, offsetX, offsetY and blur
	     */
	    _parseShadow: function(shadow) {
	      var shadowStr = shadow.trim(),
	          offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [ ],
	          color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';

	      return {
	        color: color.trim(),
	        offsetX: parseInt(offsetsAndBlur[1], 10) || 0,
	        offsetY: parseInt(offsetsAndBlur[2], 10) || 0,
	        blur: parseInt(offsetsAndBlur[3], 10) || 0
	      };
	    },

	    /**
	     * Returns a string representation of an instance
	     * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow
	     * @return {String} Returns CSS3 text-shadow declaration
	     */
	    toString: function() {
	      return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns SVG representation of a shadow
	     * @param {fabric.Object} object
	     * @return {String} SVG representation of a shadow
	     */
	    toSVG: function(object) {
	      var fBoxX = 40, fBoxY = 40, NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,
	          offset = fabric.util.rotateVector(
	            { x: this.offsetX, y: this.offsetY },
	            fabric.util.degreesToRadians(-object.angle)),
	          BLUR_BOX = 20;

	      if (object.width && object.height) {
	        //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion
	        // we add some extra space to filter box to contain the blur ( 20 )
	        fBoxX = toFixed((Math.abs(offset.x) + this.blur) / object.width, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;
	        fBoxY = toFixed((Math.abs(offset.y) + this.blur) / object.height, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;
	      }
	      if (object.flipX) {
	        offset.x *= -1;
	      }
	      if (object.flipY) {
	        offset.y *= -1;
	      }
	      return (
	        '<filter id="SVGID_' + this.id + '" y="-' + fBoxY + '%" height="' + (100 + 2 * fBoxY) + '%" ' +
	          'x="-' + fBoxX + '%" width="' + (100 + 2 * fBoxX) + '%" ' + '>\n' +
	          '\t<feGaussianBlur in="SourceAlpha" stdDeviation="' +
	            toFixed(this.blur ? this.blur / 2 : 0, NUM_FRACTION_DIGITS) + '"></feGaussianBlur>\n' +
	          '\t<feOffset dx="' + toFixed(offset.x, NUM_FRACTION_DIGITS) +
	          '" dy="' + toFixed(offset.y, NUM_FRACTION_DIGITS) + '" result="oBlur" ></feOffset>\n' +
	          '\t<feFlood flood-color="' + this.color + '"/>\n' +
	          '\t<feComposite in2="oBlur" operator="in" />\n' +
	          '\t<feMerge>\n' +
	            '\t\t<feMergeNode></feMergeNode>\n' +
	            '\t\t<feMergeNode in="SourceGraphic"></feMergeNode>\n' +
	          '\t</feMerge>\n' +
	        '</filter>\n');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns object representation of a shadow
	     * @return {Object} Object representation of a shadow instance
	     */
	    toObject: function() {
	      if (this.includeDefaultValues) {
	        return {
	          color: this.color,
	          blur: this.blur,
	          offsetX: this.offsetX,
	          offsetY: this.offsetY,
	          affectStroke: this.affectStroke
	        };
	      }
	      var obj = { }, proto = fabric.Shadow.prototype;

	      ['color', 'blur', 'offsetX', 'offsetY', 'affectStroke'].forEach(function(prop) {
	        if (this[prop] !== proto[prop]) {
	          obj[prop] = this[prop];
	        }
	      }, this);

	      return obj;
	    }
	  });

	  /**
	   * Regex matching shadow offsetX, offsetY and blur (ex: "2px 2px 10px rgba(0,0,0,0.2)", "rgb(0,255,0) 2px 2px")
	   * @static
	   * @field
	   * @memberOf fabric.Shadow
	   */
	  fabric.Shadow.reOffsetsAndBlur = /(?:\s|^)(-?\d+(?:px)?(?:\s?|$))?(-?\d+(?:px)?(?:\s?|$))?(\d+(?:px)?)?(?:\s?|$)(?:$|\s)/;

	})( true ? exports : this);


	(function () {

	  'use strict';

	  if (fabric.StaticCanvas) {
	    fabric.warn('fabric.StaticCanvas is already defined.');
	    return;
	  }

	  // aliases for faster resolution
	  var extend = fabric.util.object.extend,
	      getElementOffset = fabric.util.getElementOffset,
	      removeFromArray = fabric.util.removeFromArray,
	      toFixed = fabric.util.toFixed,

	      CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');

	  /**
	   * Static canvas class
	   * @class fabric.StaticCanvas
	   * @mixes fabric.Collection
	   * @mixes fabric.Observable
	   * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}
	   * @see {@link fabric.StaticCanvas#initialize} for constructor definition
	   * @fires before:render
	   * @fires after:render
	   * @fires canvas:cleared
	   * @fires object:added
	   * @fires object:removed
	   */
	  fabric.StaticCanvas = fabric.util.createClass(/** @lends fabric.StaticCanvas.prototype */ {

	    /**
	     * Constructor
	     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
	     * @param {Object} [options] Options object
	     * @return {Object} thisArg
	     */
	    initialize: function(el, options) {
	      options || (options = { });

	      this._initStatic(el, options);
	    },

	    /**
	     * Background color of canvas instance.
	     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.
	     * @type {(String|fabric.Pattern)}
	     * @default
	     */
	    backgroundColor: '',

	    /**
	     * Background image of canvas instance.
	     * Should be set via {@link fabric.StaticCanvas#setBackgroundImage}.
	     * <b>Backwards incompatibility note:</b> The "backgroundImageOpacity"
	     * and "backgroundImageStretch" properties are deprecated since 1.3.9.
	     * Use {@link fabric.Image#opacity}, {@link fabric.Image#width} and {@link fabric.Image#height}.
	     * @type fabric.Image
	     * @default
	     */
	    backgroundImage: null,

	    /**
	     * Overlay color of canvas instance.
	     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}
	     * @since 1.3.9
	     * @type {(String|fabric.Pattern)}
	     * @default
	     */
	    overlayColor: '',

	    /**
	     * Overlay image of canvas instance.
	     * Should be set via {@link fabric.StaticCanvas#setOverlayImage}.
	     * <b>Backwards incompatibility note:</b> The "overlayImageLeft"
	     * and "overlayImageTop" properties are deprecated since 1.3.9.
	     * Use {@link fabric.Image#left} and {@link fabric.Image#top}.
	     * @type fabric.Image
	     * @default
	     */
	    overlayImage: null,

	    /**
	     * Indicates whether toObject/toDatalessObject should include default values
	     * @type Boolean
	     * @default
	     */
	    includeDefaultValues: true,

	    /**
	     * Indicates whether objects' state should be saved
	     * @type Boolean
	     * @default
	     */
	    stateful: true,

	    /**
	     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove} should also re-render canvas.
	     * Disabling this option could give a great performance boost when adding/removing a lot of objects to/from canvas at once
	     * (followed by a manual rendering after addition/deletion)
	     * @type Boolean
	     * @default
	     */
	    renderOnAddRemove: true,

	    /**
	     * Function that determines clipping of entire canvas area
	     * Being passed context as first argument. See clipping canvas area in {@link https://github.com/kangax/fabric.js/wiki/FAQ}
	     * @type Function
	     * @default
	     */
	    clipTo: null,

	    /**
	     * Indicates whether object controls (borders/controls) are rendered above overlay image
	     * @type Boolean
	     * @default
	     */
	    controlsAboveOverlay: false,

	    /**
	     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas
	     * @type Boolean
	     * @default
	     */
	    allowTouchScrolling: false,

	    /**
	     * Indicates whether this canvas will use image smoothing, this is on by default in browsers
	     * @type Boolean
	     * @default
	     */
	    imageSmoothingEnabled: true,

	    /**
	     * Indicates whether objects should remain in current stack position when selected. When false objects are brought to top and rendered as part of the selection group
	     * @type Boolean
	     * @default
	     */
	    preserveObjectStacking: false,

	    /**
	     * The transformation (in the format of Canvas transform) which focuses the viewport
	     * @type Array
	     * @default
	     */
	    viewportTransform: [1, 0, 0, 1, 0, 0],

	    /**
	     * Callback; invoked right before object is about to be scaled/rotated
	     */
	    onBeforeScaleRotate: function () {
	      /* NOOP */
	    },

	    /**
	     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens
	     */
	    enableRetinaScaling: true,

	    /**
	     * @private
	     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
	     * @param {Object} [options] Options object
	     */
	    _initStatic: function(el, options) {
	      this._objects = [];

	      this._createLowerCanvas(el);
	      this._initOptions(options);
	      this._setImageSmoothing();

	      // only initialize retina scaling once
	      if (!this.interactive) {
	        this._initRetinaScaling();
	      }

	      if (options.overlayImage) {
	        this.setOverlayImage(options.overlayImage, this.renderAll.bind(this));
	      }
	      if (options.backgroundImage) {
	        this.setBackgroundImage(options.backgroundImage, this.renderAll.bind(this));
	      }
	      if (options.backgroundColor) {
	        this.setBackgroundColor(options.backgroundColor, this.renderAll.bind(this));
	      }
	      if (options.overlayColor) {
	        this.setOverlayColor(options.overlayColor, this.renderAll.bind(this));
	      }
	      this.calcOffset();
	    },

	    /**
	     * @private
	     */
	    _isRetinaScaling: function() {
	      return (fabric.devicePixelRatio !== 1 && this.enableRetinaScaling);
	    },

	    /**
	     * @private
	     */
	    _initRetinaScaling: function() {
	      if (!this._isRetinaScaling()) {
	        return;
	      }

	      this.lowerCanvasEl.setAttribute('width', this.width * fabric.devicePixelRatio);
	      this.lowerCanvasEl.setAttribute('height', this.height * fabric.devicePixelRatio);

	      this.contextContainer.scale(fabric.devicePixelRatio, fabric.devicePixelRatio);
	    },

	    /**
	     * Calculates canvas element offset relative to the document
	     * This method is also attached as "resize" event handler of window
	     * @return {fabric.Canvas} instance
	     * @chainable
	     */
	    calcOffset: function () {
	      this._offset = getElementOffset(this.lowerCanvasEl);
	      return this;
	    },

	    /**
	     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas
	     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to
	     * @param {Function} callback callback to invoke when image is loaded and set as an overlay
	     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}
	     * @example <caption>Normal overlayImage with left/top = 0</caption>
	     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
	     *   // Needed to position overlayImage at 0/0
	     *   originX: 'left',
	     *   originY: 'top'
	     * });
	     * @example <caption>overlayImage with different properties</caption>
	     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
	     *   opacity: 0.5,
	     *   angle: 45,
	     *   left: 400,
	     *   top: 400,
	     *   originX: 'left',
	     *   originY: 'top'
	     * });
	     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>
	     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img) {
	     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
	     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));
	     * });
	     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>
	     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
	     *   width: canvas.width,
	     *   height: canvas.height,
	     *   // Needed to position overlayImage at 0/0
	     *   originX: 'left',
	     *   originY: 'top'
	     * });
	     * @example <caption>overlayImage loaded from cross-origin</caption>
	     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
	     *   opacity: 0.5,
	     *   angle: 45,
	     *   left: 400,
	     *   top: 400,
	     *   originX: 'left',
	     *   originY: 'top',
	     *   crossOrigin: 'anonymous'
	     * });
	     */
	    setOverlayImage: function (image, callback, options) {
	      return this.__setBgOverlayImage('overlayImage', image, callback, options);
	    },

	    /**
	     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas
	     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to
	     * @param {Function} callback Callback to invoke when image is loaded and set as background
	     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/fabricjs/YH9yD/|jsFiddle demo}
	     * @example <caption>Normal backgroundImage with left/top = 0</caption>
	     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
	     *   // Needed to position backgroundImage at 0/0
	     *   originX: 'left',
	     *   originY: 'top'
	     * });
	     * @example <caption>backgroundImage with different properties</caption>
	     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
	     *   opacity: 0.5,
	     *   angle: 45,
	     *   left: 400,
	     *   top: 400,
	     *   originX: 'left',
	     *   originY: 'top'
	     * });
	     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>
	     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img) {
	     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
	     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
	     * });
	     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>
	     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
	     *   width: canvas.width,
	     *   height: canvas.height,
	     *   // Needed to position backgroundImage at 0/0
	     *   originX: 'left',
	     *   originY: 'top'
	     * });
	     * @example <caption>backgroundImage loaded from cross-origin</caption>
	     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
	     *   opacity: 0.5,
	     *   angle: 45,
	     *   left: 400,
	     *   top: 400,
	     *   originX: 'left',
	     *   originY: 'top',
	     *   crossOrigin: 'anonymous'
	     * });
	     */
	    setBackgroundImage: function (image, callback, options) {
	      return this.__setBgOverlayImage('backgroundImage', image, callback, options);
	    },

	    /**
	     * Sets {@link fabric.StaticCanvas#overlayColor|background color} for this canvas
	     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set background color to
	     * @param {Function} callback Callback to invoke when background color is set
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}
	     * @example <caption>Normal overlayColor - color value</caption>
	     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
	     * @example <caption>fabric.Pattern used as overlayColor</caption>
	     * canvas.setOverlayColor({
	     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
	     * }, canvas.renderAll.bind(canvas));
	     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>
	     * canvas.setOverlayColor({
	     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
	     *   repeat: 'repeat',
	     *   offsetX: 200,
	     *   offsetY: 100
	     * }, canvas.renderAll.bind(canvas));
	     */
	    setOverlayColor: function(overlayColor, callback) {
	      return this.__setBgOverlayColor('overlayColor', overlayColor, callback);
	    },

	    /**
	     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas
	     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to
	     * @param {Function} callback Callback to invoke when background color is set
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}
	     * @example <caption>Normal backgroundColor - color value</caption>
	     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
	     * @example <caption>fabric.Pattern used as backgroundColor</caption>
	     * canvas.setBackgroundColor({
	     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
	     * }, canvas.renderAll.bind(canvas));
	     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>
	     * canvas.setBackgroundColor({
	     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
	     *   repeat: 'repeat',
	     *   offsetX: 200,
	     *   offsetY: 100
	     * }, canvas.renderAll.bind(canvas));
	     */
	    setBackgroundColor: function(backgroundColor, callback) {
	      return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);
	    },

	    /**
	     * @private
	     * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-imagesmoothingenabled|WhatWG Canvas Standard}
	     */
	    _setImageSmoothing: function() {
	      var ctx = this.getContext();

	      ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled
	        || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;
	      ctx.imageSmoothingEnabled = this.imageSmoothingEnabled;
	    },

	    /**
	     * @private
	     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}
	     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})
	     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to
	     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay
	     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.
	     */
	    __setBgOverlayImage: function(property, image, callback, options) {
	      if (typeof image === 'string') {
	        fabric.util.loadImage(image, function(img) {
	          this[property] = new fabric.Image(img, options);
	          callback && callback(img);
	        }, this, options && options.crossOrigin);
	      }
	      else {
	        options && image.setOptions(options);
	        this[property] = image;
	        callback && callback(image);
	      }

	      return this;
	    },

	    /**
	     * @private
	     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}
	     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})
	     * @param {(Object|String|null)} color Object with pattern information, color value or null
	     * @param {Function} [callback] Callback is invoked when color is set
	     */
	    __setBgOverlayColor: function(property, color, callback) {
	      if (color && color.source) {
	        var _this = this;
	        fabric.util.loadImage(color.source, function(img) {
	          _this[property] = new fabric.Pattern({
	            source: img,
	            repeat: color.repeat,
	            offsetX: color.offsetX,
	            offsetY: color.offsetY
	          });
	          callback && callback();
	        });
	      }
	      else {
	        this[property] = color;
	        callback && callback();
	      }

	      return this;
	    },

	    /**
	     * @private
	     */
	    _createCanvasElement: function() {
	      var element = fabric.document.createElement('canvas');
	      if (!element.style) {
	        element.style = { };
	      }
	      if (!element) {
	        throw CANVAS_INIT_ERROR;
	      }
	      this._initCanvasElement(element);
	      return element;
	    },

	    /**
	     * @private
	     * @param {HTMLElement} element
	     */
	    _initCanvasElement: function(element) {
	      fabric.util.createCanvasElement(element);

	      if (typeof element.getContext === 'undefined') {
	        throw CANVAS_INIT_ERROR;
	      }
	    },

	    /**
	     * @private
	     * @param {Object} [options] Options object
	     */
	    _initOptions: function (options) {
	      for (var prop in options) {
	        this[prop] = options[prop];
	      }

	      this.width = this.width || parseInt(this.lowerCanvasEl.width, 10) || 0;
	      this.height = this.height || parseInt(this.lowerCanvasEl.height, 10) || 0;

	      if (!this.lowerCanvasEl.style) {
	        return;
	      }

	      this.lowerCanvasEl.width = this.width;
	      this.lowerCanvasEl.height = this.height;

	      this.lowerCanvasEl.style.width = this.width + 'px';
	      this.lowerCanvasEl.style.height = this.height + 'px';

	      this.viewportTransform = this.viewportTransform.slice();
	    },

	    /**
	     * Creates a bottom canvas
	     * @private
	     * @param {HTMLElement} [canvasEl]
	     */
	    _createLowerCanvas: function (canvasEl) {
	      this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();
	      this._initCanvasElement(this.lowerCanvasEl);

	      fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');

	      if (this.interactive) {
	        this._applyCanvasStyle(this.lowerCanvasEl);
	      }

	      this.contextContainer = this.lowerCanvasEl.getContext('2d');
	    },

	    /**
	     * Returns canvas width (in px)
	     * @return {Number}
	     */
	    getWidth: function () {
	      return this.width;
	    },

	    /**
	     * Returns canvas height (in px)
	     * @return {Number}
	     */
	    getHeight: function () {
	      return this.height;
	    },

	    /**
	     * Sets width of this canvas instance
	     * @param {Number|String} value                         Value to set width to
	     * @param {Object}        [options]                     Options object
	     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
	     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    setWidth: function (value, options) {
	      return this.setDimensions({ width: value }, options);
	    },

	    /**
	     * Sets height of this canvas instance
	     * @param {Number|String} value                         Value to set height to
	     * @param {Object}        [options]                     Options object
	     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
	     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    setHeight: function (value, options) {
	      return this.setDimensions({ height: value }, options);
	    },

	    /**
	     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)
	     * @param {Object}        dimensions                    Object with width/height properties
	     * @param {Number|String} [dimensions.width]            Width of canvas element
	     * @param {Number|String} [dimensions.height]           Height of canvas element
	     * @param {Object}        [options]                     Options object
	     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
	     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    setDimensions: function (dimensions, options) {
	      var cssValue;

	      options = options || {};

	      for (var prop in dimensions) {
	        cssValue = dimensions[prop];

	        if (!options.cssOnly) {
	          this._setBackstoreDimension(prop, dimensions[prop]);
	          cssValue += 'px';
	        }

	        if (!options.backstoreOnly) {
	          this._setCssDimension(prop, cssValue);
	        }
	      }
	      this._initRetinaScaling();
	      this._setImageSmoothing();
	      this.calcOffset();

	      if (!options.cssOnly) {
	        this.renderAll();
	      }

	      return this;
	    },

	    /**
	     * Helper for setting width/height
	     * @private
	     * @param {String} prop property (width|height)
	     * @param {Number} value value to set property to
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    _setBackstoreDimension: function (prop, value) {
	      this.lowerCanvasEl[prop] = value;

	      if (this.upperCanvasEl) {
	        this.upperCanvasEl[prop] = value;
	      }

	      if (this.cacheCanvasEl) {
	        this.cacheCanvasEl[prop] = value;
	      }

	      this[prop] = value;

	      return this;
	    },

	    /**
	     * Helper for setting css width/height
	     * @private
	     * @param {String} prop property (width|height)
	     * @param {String} value value to set property to
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    _setCssDimension: function (prop, value) {
	      this.lowerCanvasEl.style[prop] = value;

	      if (this.upperCanvasEl) {
	        this.upperCanvasEl.style[prop] = value;
	      }

	      if (this.wrapperEl) {
	        this.wrapperEl.style[prop] = value;
	      }

	      return this;
	    },

	    /**
	     * Returns canvas zoom level
	     * @return {Number}
	     */
	    getZoom: function () {
	      return Math.sqrt(this.viewportTransform[0] * this.viewportTransform[3]);
	    },

	    /**
	     * Sets viewport transform of this canvas instance
	     * @param {Array} vpt the transform in the form of context.transform
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    setViewportTransform: function (vpt) {
	      var activeGroup = this.getActiveGroup();
	      this.viewportTransform = vpt;
	      this.renderAll();
	      for (var i = 0, len = this._objects.length; i < len; i++) {
	        this._objects[i].setCoords();
	      }
	      if (activeGroup) {
	        activeGroup.setCoords();
	      }
	      return this;
	    },

	    /**
	     * Sets zoom level of this canvas instance, zoom centered around point
	     * @param {fabric.Point} point to zoom with respect to
	     * @param {Number} value to set zoom to, less than 1 zooms out
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    zoomToPoint: function (point, value) {
	      // TODO: just change the scale, preserve other transformations
	      var before = point;
	      point = fabric.util.transformPoint(point, fabric.util.invertTransform(this.viewportTransform));
	      this.viewportTransform[0] = value;
	      this.viewportTransform[3] = value;
	      var after = fabric.util.transformPoint(point, this.viewportTransform);
	      this.viewportTransform[4] += before.x - after.x;
	      this.viewportTransform[5] += before.y - after.y;
	      this.renderAll();
	      for (var i = 0, len = this._objects.length; i < len; i++) {
	        this._objects[i].setCoords();
	      }
	      return this;
	    },

	    /**
	     * Sets zoom level of this canvas instance
	     * @param {Number} value to set zoom to, less than 1 zooms out
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    setZoom: function (value) {
	      this.zoomToPoint(new fabric.Point(0, 0), value);
	      return this;
	    },

	    /**
	     * Pan viewport so as to place point at top left corner of canvas
	     * @param {fabric.Point} point to move to
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    absolutePan: function (point) {
	      this.viewportTransform[4] = -point.x;
	      this.viewportTransform[5] = -point.y;
	      this.renderAll();
	      for (var i = 0, len = this._objects.length; i < len; i++) {
	        this._objects[i].setCoords();
	      }
	      return this;
	    },

	    /**
	     * Pans viewpoint relatively
	     * @param {fabric.Point} point (position vector) to move by
	     * @return {fabric.Canvas} instance
	     * @chainable true
	     */
	    relativePan: function (point) {
	      return this.absolutePan(new fabric.Point(
	        -point.x - this.viewportTransform[4],
	        -point.y - this.viewportTransform[5]
	      ));
	    },

	    /**
	     * Returns &lt;canvas> element corresponding to this instance
	     * @return {HTMLCanvasElement}
	     */
	    getElement: function () {
	      return this.lowerCanvasEl;
	    },

	    /**
	     * Returns currently selected object, if any
	     * @return {fabric.Object}
	     */
	    getActiveObject: function() {
	      return null;
	    },

	    /**
	     * Returns currently selected group of object, if any
	     * @return {fabric.Group}
	     */
	    getActiveGroup: function() {
	      return null;
	    },

	    /**
	     * @private
	     * @param {fabric.Object} obj Object that was added
	     */
	    _onObjectAdded: function(obj) {
	      this.stateful && obj.setupState();
	      obj._set('canvas', this);
	      obj.setCoords();
	      this.fire('object:added', { target: obj });
	      obj.fire('added');
	    },

	    /**
	     * @private
	     * @param {fabric.Object} obj Object that was removed
	     */
	    _onObjectRemoved: function(obj) {
	      // removing active object should fire "selection:cleared" events
	      if (this.getActiveObject() === obj) {
	        this.fire('before:selection:cleared', { target: obj });
	        this._discardActiveObject();
	        this.fire('selection:cleared');
	      }

	      this.fire('object:removed', { target: obj });
	      obj.fire('removed');
	    },

	    /**
	     * Clears specified context of canvas element
	     * @param {CanvasRenderingContext2D} ctx Context to clear
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    clearContext: function(ctx) {
	      ctx.clearRect(0, 0, this.width, this.height);
	      return this;
	    },

	    /**
	     * Returns context of canvas where objects are drawn
	     * @return {CanvasRenderingContext2D}
	     */
	    getContext: function () {
	      return this.contextContainer;
	    },

	    /**
	     * Clears all contexts (background, main, top) of an instance
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    clear: function () {
	      this._objects.length = 0;
	      if (this.discardActiveGroup) {
	        this.discardActiveGroup();
	      }
	      if (this.discardActiveObject) {
	        this.discardActiveObject();
	      }
	      this.clearContext(this.contextContainer);
	      if (this.contextTop) {
	        this.clearContext(this.contextTop);
	      }
	      this.fire('canvas:cleared');
	      this.renderAll();
	      return this;
	    },

	    /**
	     * Divides objects in two groups, one to render immediately
	     * and one to render as activeGroup.
	     * return objects to render immediately and pushes the other in the activeGroup.
	     */
	    _chooseObjectsToRender: function() {
	      var activeGroup = this.getActiveGroup(),
	          object, objsToRender = [ ], activeGroupObjects = [ ];

	      if (activeGroup && !this.preserveObjectStacking) {
	        for (var i = 0, length = this._objects.length; i < length; i++) {
	          object = this._objects[i];
	          if (!activeGroup.contains(object)) {
	            objsToRender.push(object);
	          }
	          else {
	            activeGroupObjects.push(object);
	          }
	        }
	        activeGroup._set('_objects', activeGroupObjects);
	      }
	      else {
	        objsToRender = this._objects;
	      }
	      return objsToRender;
	    },

	    /**
	     * Renders both the top canvas and the secondary container canvas.
	     * @param {Boolean} [allOnTop] Whether we want to force all images to be rendered on the top canvas
	     * @return {fabric.Canvas} instance
	     * @chainable
	     */
	    renderAll: function () {
	      var canvasToDrawOn = this.contextContainer, objsToRender;

	      if (this.contextTop && this.selection && !this._groupSelector && !this.isDrawingMode) {
	        this.clearContext(this.contextTop);
	      }

	      this.clearContext(canvasToDrawOn);

	      this.fire('before:render');

	      if (this.clipTo) {
	        fabric.util.clipContext(this, canvasToDrawOn);
	      }
	      this._renderBackground(canvasToDrawOn);

	      canvasToDrawOn.save();
	      objsToRender = this._chooseObjectsToRender();
	      //apply viewport transform once for all rendering process
	      canvasToDrawOn.transform.apply(canvasToDrawOn, this.viewportTransform);
	      this._renderObjects(canvasToDrawOn, objsToRender);
	      this.preserveObjectStacking || this._renderObjects(canvasToDrawOn, [this.getActiveGroup()]);
	      canvasToDrawOn.restore();

	      if (!this.controlsAboveOverlay && this.interactive) {
	        this.drawControls(canvasToDrawOn);
	      }
	      if (this.clipTo) {
	        canvasToDrawOn.restore();
	      }
	      this._renderOverlay(canvasToDrawOn);
	      if (this.controlsAboveOverlay && this.interactive) {
	        this.drawControls(canvasToDrawOn);
	      }

	      this.fire('after:render');
	      return this;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Array} objects to render
	     */
	    _renderObjects: function(ctx, objects) {
	      for (var i = 0, length = objects.length; i < length; ++i) {
	        objects[i] && objects[i].render(ctx);
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {string} property 'background' or 'overlay'
	     */
	    _renderBackgroundOrOverlay: function(ctx, property) {
	      var object = this[property + 'Color'];
	      if (object) {
	        ctx.fillStyle = object.toLive
	          ? object.toLive(ctx)
	          : object;

	        ctx.fillRect(
	          object.offsetX || 0,
	          object.offsetY || 0,
	          this.width,
	          this.height);
	      }
	      object = this[property + 'Image'];
	      if (object) {
	        object.render(ctx);
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderBackground: function(ctx) {
	      this._renderBackgroundOrOverlay(ctx, 'background');
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderOverlay: function(ctx) {
	      this._renderBackgroundOrOverlay(ctx, 'overlay');
	    },

	    /**
	     * Method to render only the top canvas.
	     * Also used to render the group selection box.
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    renderTop: function () {
	      var ctx = this.contextTop || this.contextContainer;
	      this.clearContext(ctx);

	      // we render the top context - last object
	      if (this.selection && this._groupSelector) {
	        this._drawSelection();
	      }

	      this.fire('after:render');

	      return this;
	    },

	    /**
	     * Returns coordinates of a center of canvas.
	     * Returned value is an object with top and left properties
	     * @return {Object} object with "top" and "left" number values
	     */
	    getCenter: function () {
	      return {
	        top: this.getHeight() / 2,
	        left: this.getWidth() / 2
	      };
	    },

	    /**
	     * Centers object horizontally.
	     * You might need to call `setCoords` on an object after centering, to update controls area.
	     * @param {fabric.Object} object Object to center horizontally
	     * @return {fabric.Canvas} thisArg
	     */
	    centerObjectH: function (object) {
	      this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));
	      this.renderAll();
	      return this;
	    },

	    /**
	     * Centers object vertically.
	     * You might need to call `setCoords` on an object after centering, to update controls area.
	     * @param {fabric.Object} object Object to center vertically
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    centerObjectV: function (object) {
	      this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));
	      this.renderAll();
	      return this;
	    },

	    /**
	     * Centers object vertically and horizontally.
	     * You might need to call `setCoords` on an object after centering, to update controls area.
	     * @param {fabric.Object} object Object to center vertically and horizontally
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    centerObject: function(object) {
	      var center = this.getCenter();

	      this._centerObject(object, new fabric.Point(center.left, center.top));
	      this.renderAll();
	      return this;
	    },

	    /**
	     * @private
	     * @param {fabric.Object} object Object to center
	     * @param {fabric.Point} center Center point
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    _centerObject: function(object, center) {
	      object.setPositionByOrigin(center, 'center', 'center');
	      return this;
	    },

	    /**
	     * Returs dataless JSON representation of canvas
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {String} json string
	     */
	    toDatalessJSON: function (propertiesToInclude) {
	      return this.toDatalessObject(propertiesToInclude);
	    },

	    /**
	     * Returns object representation of canvas
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function (propertiesToInclude) {
	      return this._toObjectMethod('toObject', propertiesToInclude);
	    },

	    /**
	     * Returns dataless object representation of canvas
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toDatalessObject: function (propertiesToInclude) {
	      return this._toObjectMethod('toDatalessObject', propertiesToInclude);
	    },

	    /**
	     * @private
	     */
	    _toObjectMethod: function (methodName, propertiesToInclude) {

	      var data = {
	        objects: this._toObjects(methodName, propertiesToInclude)
	      };

	      extend(data, this.__serializeBgOverlay());

	      fabric.util.populateWithProperties(this, data, propertiesToInclude);

	      return data;
	    },

	    /**
	     * @private
	     */
	    _toObjects: function(methodName, propertiesToInclude) {
	      return this.getObjects().map(function(instance) {
	        return this._toObject(instance, methodName, propertiesToInclude);
	      }, this);
	    },

	    /**
	     * @private
	     */
	    _toObject: function(instance, methodName, propertiesToInclude) {
	      var originalValue;

	      if (!this.includeDefaultValues) {
	        originalValue = instance.includeDefaultValues;
	        instance.includeDefaultValues = false;
	      }

	      //If the object is part of the current selection group, it should
	      //be transformed appropriately
	      //i.e. it should be serialised as it would appear if the selection group
	      //were to be destroyed.
	      var originalProperties = this._realizeGroupTransformOnObject(instance),
	          object = instance[methodName](propertiesToInclude);
	      if (!this.includeDefaultValues) {
	        instance.includeDefaultValues = originalValue;
	      }

	      //Undo the damage we did by changing all of its properties
	      this._unwindGroupTransformOnObject(instance, originalProperties);

	      return object;
	    },

	    /**
	     * Realises an object's group transformation on it
	     * @private
	     * @param {fabric.Object} [instance] the object to transform (gets mutated)
	     * @returns the original values of instance which were changed
	     */
	    _realizeGroupTransformOnObject: function(instance) {
	      var layoutProps = ['angle', 'flipX', 'flipY', 'height', 'left', 'scaleX', 'scaleY', 'top', 'width'];
	      if (instance.group && instance.group === this.getActiveGroup()) {
	        //Copy all the positionally relevant properties across now
	        var originalValues = {};
	        layoutProps.forEach(function(prop) {
	          originalValues[prop] = instance[prop];
	        });
	        this.getActiveGroup().realizeTransform(instance);
	        return originalValues;
	      }
	      else {
	        return null;
	      }
	    },

	    /**
	     * Restores the changed properties of instance
	     * @private
	     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)
	     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject
	     */
	    _unwindGroupTransformOnObject: function(instance, originalValues) {
	      if (originalValues) {
	        instance.set(originalValues);
	      }
	    },

	    /**
	     * @private
	     */
	    __serializeBgOverlay: function() {
	      var data = {
	        background: (this.backgroundColor && this.backgroundColor.toObject)
	          ? this.backgroundColor.toObject()
	          : this.backgroundColor
	      };

	      if (this.overlayColor) {
	        data.overlay = this.overlayColor.toObject
	          ? this.overlayColor.toObject()
	          : this.overlayColor;
	      }
	      if (this.backgroundImage) {
	        data.backgroundImage = this.backgroundImage.toObject();
	      }
	      if (this.overlayImage) {
	        data.overlayImage = this.overlayImage.toObject();
	      }

	      return data;
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,
	     * a zoomed canvas will then produce zoomed SVG output.
	     * @type Boolean
	     * @default
	     */
	    svgViewportTransformation: true,

	    /**
	     * Returns SVG representation of canvas
	     * @function
	     * @param {Object} [options] Options object for SVG output
	     * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included
	     * @param {Object} [options.viewBox] SVG viewbox object
	     * @param {Number} [options.viewBox.x] x-cooridnate of viewbox
	     * @param {Number} [options.viewBox.y] y-coordinate of viewbox
	     * @param {Number} [options.viewBox.width] Width of viewbox
	     * @param {Number} [options.viewBox.height] Height of viewbox
	     * @param {String} [options.encoding=UTF-8] Encoding of SVG output
	     * @param {String} [options.width] desired width of svg with or without units
	     * @param {String} [options.height] desired height of svg with or without units
	     * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.
	     * @return {String} SVG string
	     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}
	     * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}
	     * @example <caption>Normal SVG output</caption>
	     * var svg = canvas.toSVG();
	     * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>
	     * var svg = canvas.toSVG({suppressPreamble: true});
	     * @example <caption>SVG output with viewBox attribute</caption>
	     * var svg = canvas.toSVG({
	     *   viewBox: {
	     *     x: 100,
	     *     y: 100,
	     *     width: 200,
	     *     height: 300
	     *   }
	     * });
	     * @example <caption>SVG output with different encoding (default: UTF-8)</caption>
	     * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});
	     * @example <caption>Modify SVG output with reviver function</caption>
	     * var svg = canvas.toSVG(null, function(svg) {
	     *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');
	     * });
	     */
	    toSVG: function(options, reviver) {
	      options || (options = { });

	      var markup = [];

	      this._setSVGPreamble(markup, options);
	      this._setSVGHeader(markup, options);

	      this._setSVGBgOverlayColor(markup, 'backgroundColor');
	      this._setSVGBgOverlayImage(markup, 'backgroundImage');

	      this._setSVGObjects(markup, reviver);

	      this._setSVGBgOverlayColor(markup, 'overlayColor');
	      this._setSVGBgOverlayImage(markup, 'overlayImage');

	      markup.push('</svg>');

	      return markup.join('');
	    },

	    /**
	     * @private
	     */
	    _setSVGPreamble: function(markup, options) {
	      if (options.suppressPreamble) {
	        return;
	      }
	      markup.push(
	        '<?xml version="1.0" encoding="', (options.encoding || 'UTF-8'), '" standalone="no" ?>\n',
	          '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ',
	            '"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n'
	      );
	    },

	    /**
	     * @private
	     */
	    _setSVGHeader: function(markup, options) {
	      var width = options.width || this.width,
	          height = options.height || this.height,
	          vpt, viewBox = 'viewBox="0 0 ' + this.width + ' ' + this.height + '" ',
	          NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;

	      if (options.viewBox) {
	        viewBox = 'viewBox="' +
	                options.viewBox.x + ' ' +
	                options.viewBox.y + ' ' +
	                options.viewBox.width + ' ' +
	                options.viewBox.height + '" ';
	      }
	      else {
	        if (this.svgViewportTransformation) {
	          vpt = this.viewportTransform;
	          viewBox = 'viewBox="' +
	                  toFixed(-vpt[4] / vpt[0], NUM_FRACTION_DIGITS) + ' ' +
	                  toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS) + ' ' +
	                  toFixed(this.width / vpt[0], NUM_FRACTION_DIGITS) + ' ' +
	                  toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS) + '" ';
	        }
	      }

	      markup.push(
	        '<svg ',
	          'xmlns="http://www.w3.org/2000/svg" ',
	          'xmlns:xlink="http://www.w3.org/1999/xlink" ',
	          'version="1.1" ',
	          'width="', width, '" ',
	          'height="', height, '" ',
	          (this.backgroundColor && !this.backgroundColor.toLive
	            ? 'style="background-color: ' + this.backgroundColor + '" '
	            : null),
	          viewBox,
	          'xml:space="preserve">\n',
	        '<desc>Created with Fabric.js ', fabric.version, '</desc>\n',
	        '<defs>',
	          fabric.createSVGFontFacesMarkup(this.getObjects()),
	          fabric.createSVGRefElementsMarkup(this),
	        '</defs>\n'
	      );
	    },

	    /**
	     * @private
	     */
	    _setSVGObjects: function(markup, reviver) {
	      for (var i = 0, objects = this.getObjects(), len = objects.length; i < len; i++) {
	        var instance = objects[i],
	            //If the object is in a selection group, simulate what would happen to that
	            //object when the group is deselected
	            originalProperties = this._realizeGroupTransformOnObject(instance);
	        markup.push(instance.toSVG(reviver));
	        this._unwindGroupTransformOnObject(instance, originalProperties);
	      }
	    },

	    /**
	     * @private
	     */
	    _setSVGBgOverlayImage: function(markup, property) {
	      if (this[property] && this[property].toSVG) {
	        markup.push(this[property].toSVG());
	      }
	    },

	    /**
	     * @private
	     */
	    _setSVGBgOverlayColor: function(markup, property) {
	      if (this[property] && this[property].source) {
	        markup.push(
	          '<rect x="', this[property].offsetX, '" y="', this[property].offsetY, '" ',
	            'width="',
	              (this[property].repeat === 'repeat-y' || this[property].repeat === 'no-repeat'
	                ? this[property].source.width
	                : this.width),
	            '" height="',
	              (this[property].repeat === 'repeat-x' || this[property].repeat === 'no-repeat'
	                ? this[property].source.height
	                : this.height),
	            '" fill="url(#' + property + 'Pattern)"',
	          '></rect>\n'
	        );
	      }
	      else if (this[property] && property === 'overlayColor') {
	        markup.push(
	          '<rect x="0" y="0" ',
	            'width="', this.width,
	            '" height="', this.height,
	            '" fill="', this[property], '"',
	          '></rect>\n'
	        );
	      }
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Moves an object or the objects of a multiple selection
	     * to the bottom of the stack of drawn objects
	     * @param {fabric.Object} object Object to send to back
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    sendToBack: function (object) {
	      if (!object) {
	        return this;
	      }
	      var activeGroup = this.getActiveGroup ? this.getActiveGroup() : null,
	          i, obj, objs;
	      if (object === activeGroup) {
	        objs = activeGroup._objects;
	        for (i = objs.length; i--;) {
	          obj = objs[i];
	          removeFromArray(this._objects, obj);
	          this._objects.unshift(obj);
	        }
	      }
	      else {
	        removeFromArray(this._objects, object);
	        this._objects.unshift(object);
	      }
	      return this.renderAll && this.renderAll();
	    },

	    /**
	     * Moves an object or the objects of a multiple selection
	     * to the top of the stack of drawn objects
	     * @param {fabric.Object} object Object to send
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    bringToFront: function (object) {
	      if (!object) {
	        return this;
	      }
	      var activeGroup = this.getActiveGroup ? this.getActiveGroup() : null,
	          i, obj, objs;
	      if (object === activeGroup) {
	        objs = activeGroup._objects;
	        for (i = 0; i < objs.length; i++) {
	          obj = objs[i];
	          removeFromArray(this._objects, obj);
	          this._objects.push(obj);
	        }
	      }
	      else {
	        removeFromArray(this._objects, object);
	        this._objects.push(object);
	      }
	      return this.renderAll && this.renderAll();
	    },

	    /**
	     * Moves an object or a selection down in stack of drawn objects
	     * @param {fabric.Object} object Object to send
	     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    sendBackwards: function (object, intersecting) {
	      if (!object) {
	        return this;
	      }
	      var activeGroup = this.getActiveGroup ? this.getActiveGroup() : null,
	          i, obj, idx, newIdx, objs;

	      if (object === activeGroup) {
	        objs = activeGroup._objects;
	        for (i = 0; i < objs.length; i++) {
	          obj = objs[i];
	          idx = this._objects.indexOf(obj);
	          if (idx !== 0) {
	            newIdx = idx - 1;
	            removeFromArray(this._objects, obj);
	            this._objects.splice(newIdx, 0, obj);
	          }
	        }
	      }
	      else {
	        idx = this._objects.indexOf(object);
	        if (idx !== 0) {
	          // if object is not on the bottom of stack
	          newIdx = this._findNewLowerIndex(object, idx, intersecting);
	          removeFromArray(this._objects, object);
	          this._objects.splice(newIdx, 0, object);
	        }
	      }
	      this.renderAll && this.renderAll();
	      return this;
	    },

	    /**
	     * @private
	     */
	    _findNewLowerIndex: function(object, idx, intersecting) {
	      var newIdx;

	      if (intersecting) {
	        newIdx = idx;

	        // traverse down the stack looking for the nearest intersecting object
	        for (var i = idx - 1; i >= 0; --i) {

	          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||
	                               object.isContainedWithinObject(this._objects[i]) ||
	                               this._objects[i].isContainedWithinObject(object);

	          if (isIntersecting) {
	            newIdx = i;
	            break;
	          }
	        }
	      }
	      else {
	        newIdx = idx - 1;
	      }

	      return newIdx;
	    },

	    /**
	     * Moves an object or a selection up in stack of drawn objects
	     * @param {fabric.Object} object Object to send
	     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    bringForward: function (object, intersecting) {
	      if (!object) {
	        return this;
	      }
	      var activeGroup = this.getActiveGroup ? this.getActiveGroup() : null,
	          i, obj, idx, newIdx, objs;

	      if (object === activeGroup) {
	        objs = activeGroup._objects;
	        for (i = objs.length; i--;) {
	          obj = objs[i];
	          idx = this._objects.indexOf(obj);
	          if (idx !== this._objects.length - 1) {
	            newIdx = idx + 1;
	            removeFromArray(this._objects, obj);
	            this._objects.splice(newIdx, 0, obj);
	          }
	        }
	      }
	      else {
	        idx = this._objects.indexOf(object);
	        if (idx !== this._objects.length - 1) {
	          // if object is not on top of stack (last item in an array)
	          newIdx = this._findNewUpperIndex(object, idx, intersecting);
	          removeFromArray(this._objects, object);
	          this._objects.splice(newIdx, 0, object);
	        }
	      }
	      this.renderAll && this.renderAll();
	      return this;
	    },

	    /**
	     * @private
	     */
	    _findNewUpperIndex: function(object, idx, intersecting) {
	      var newIdx;

	      if (intersecting) {
	        newIdx = idx;

	        // traverse up the stack looking for the nearest intersecting object
	        for (var i = idx + 1; i < this._objects.length; ++i) {

	          var isIntersecting = object.intersectsWithObject(this._objects[i]) ||
	                               object.isContainedWithinObject(this._objects[i]) ||
	                               this._objects[i].isContainedWithinObject(object);

	          if (isIntersecting) {
	            newIdx = i;
	            break;
	          }
	        }
	      }
	      else {
	        newIdx = idx + 1;
	      }

	      return newIdx;
	    },

	    /**
	     * Moves an object to specified level in stack of drawn objects
	     * @param {fabric.Object} object Object to send
	     * @param {Number} index Position to move to
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    moveTo: function (object, index) {
	      removeFromArray(this._objects, object);
	      this._objects.splice(index, 0, object);
	      return this.renderAll && this.renderAll();
	    },

	    /**
	     * Clears a canvas element and removes all event listeners
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    dispose: function () {
	      this.clear();
	      return this;
	    },

	    /**
	     * Returns a string representation of an instance
	     * @return {String} string representation of an instance
	     */
	    toString: function () {
	      return '#<fabric.Canvas (' + this.complexity() + '): ' +
	               '{ objects: ' + this.getObjects().length + ' }>';
	    }
	  });

	  extend(fabric.StaticCanvas.prototype, fabric.Observable);
	  extend(fabric.StaticCanvas.prototype, fabric.Collection);
	  extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);

	  extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */ {

	    /**
	     * @static
	     * @type String
	     * @default
	     */
	    EMPTY_JSON: '{"objects": [], "background": "white"}',

	    /**
	     * Provides a way to check support of some of the canvas methods
	     * (either those of HTMLCanvasElement itself, or rendering context)
	     *
	     * @param {String} methodName Method to check support for;
	     *                            Could be one of "getImageData", "toDataURL", "toDataURLWithQuality" or "setLineDash"
	     * @return {Boolean | null} `true` if method is supported (or at least exists),
	     *                          `null` if canvas element or context can not be initialized
	     */
	    supports: function (methodName) {
	      var el = fabric.util.createCanvasElement();

	      if (!el || !el.getContext) {
	        return null;
	      }

	      var ctx = el.getContext('2d');
	      if (!ctx) {
	        return null;
	      }

	      switch (methodName) {

	        case 'getImageData':
	          return typeof ctx.getImageData !== 'undefined';

	        case 'setLineDash':
	          return typeof ctx.setLineDash !== 'undefined';

	        case 'toDataURL':
	          return typeof el.toDataURL !== 'undefined';

	        case 'toDataURLWithQuality':
	          try {
	            el.toDataURL('image/jpeg', 0);
	            return true;
	          }
	          catch (e) { }
	          return false;

	        default:
	          return null;
	      }
	    }
	  });

	  /**
	   * Returns JSON representation of canvas
	   * @function
	   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	   * @return {String} JSON string
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}
	   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}
	   * @example <caption>JSON without additional properties</caption>
	   * var json = canvas.toJSON();
	   * @example <caption>JSON with additional properties included</caption>
	   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY', 'lockUniScaling']);
	   * @example <caption>JSON without default values</caption>
	   * canvas.includeDefaultValues = false;
	   * var json = canvas.toJSON();
	   */
	  fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;

	})();


	/**
	 * BaseBrush class
	 * @class fabric.BaseBrush
	 * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}
	 */
	fabric.BaseBrush = fabric.util.createClass(/** @lends fabric.BaseBrush.prototype */ {

	  /**
	   * Color of a brush
	   * @type String
	   * @default
	   */
	  color:            'rgb(0, 0, 0)',

	  /**
	   * Width of a brush
	   * @type Number
	   * @default
	   */
	  width:            1,

	  /**
	   * Shadow object representing shadow of this shape.
	   * <b>Backwards incompatibility note:</b> This property replaces "shadowColor" (String), "shadowOffsetX" (Number),
	   * "shadowOffsetY" (Number) and "shadowBlur" (Number) since v1.2.12
	   * @type fabric.Shadow
	   * @default
	   */
	  shadow:           null,

	  /**
	   * Line endings style of a brush (one of "butt", "round", "square")
	   * @type String
	   * @default
	   */
	  strokeLineCap:    'round',

	  /**
	   * Corner style of a brush (one of "bevil", "round", "miter")
	   * @type String
	   * @default
	   */
	  strokeLineJoin:   'round',

	  /**
	   * Stroke Dash Array.
	   * @type Array
	   * @default
	   */
	  strokeDashArray:  null,

	  /**
	   * Sets shadow of an object
	   * @param {Object|String} [options] Options object or string (e.g. "2px 2px 10px rgba(0,0,0,0.2)")
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  setShadow: function(options) {
	    this.shadow = new fabric.Shadow(options);
	    return this;
	  },

	  /**
	   * Sets brush styles
	   * @private
	   */
	  _setBrushStyles: function() {
	    var ctx = this.canvas.contextTop;

	    ctx.strokeStyle = this.color;
	    ctx.lineWidth = this.width;
	    ctx.lineCap = this.strokeLineCap;
	    ctx.lineJoin = this.strokeLineJoin;
	    if (this.strokeDashArray && fabric.StaticCanvas.supports('setLineDash')) {
	      ctx.setLineDash(this.strokeDashArray);
	    }
	  },

	  /**
	   * Sets brush shadow styles
	   * @private
	   */
	  _setShadow: function() {
	    if (!this.shadow) {
	      return;
	    }

	    var ctx = this.canvas.contextTop;

	    ctx.shadowColor = this.shadow.color;
	    ctx.shadowBlur = this.shadow.blur;
	    ctx.shadowOffsetX = this.shadow.offsetX;
	    ctx.shadowOffsetY = this.shadow.offsetY;
	  },

	  /**
	   * Removes brush shadow styles
	   * @private
	   */
	  _resetShadow: function() {
	    var ctx = this.canvas.contextTop;

	    ctx.shadowColor = '';
	    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;
	  }
	});


	(function() {

	  /**
	   * PencilBrush class
	   * @class fabric.PencilBrush
	   * @extends fabric.BaseBrush
	   */
	  fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */ {

	    /**
	     * Constructor
	     * @param {fabric.Canvas} canvas
	     * @return {fabric.PencilBrush} Instance of a pencil brush
	     */
	    initialize: function(canvas) {
	      this.canvas = canvas;
	      this._points = [ ];
	    },

	    /**
	     * Inovoked on mouse down
	     * @param {Object} pointer
	     */
	    onMouseDown: function(pointer) {
	      this._prepareForDrawing(pointer);
	      // capture coordinates immediately
	      // this allows to draw dots (when movement never occurs)
	      this._captureDrawingPath(pointer);
	      this._render();
	    },

	    /**
	     * Inovoked on mouse move
	     * @param {Object} pointer
	     */
	    onMouseMove: function(pointer) {
	      this._captureDrawingPath(pointer);
	      // redraw curve
	      // clear top canvas
	      this.canvas.clearContext(this.canvas.contextTop);
	      this._render();
	    },

	    /**
	     * Invoked on mouse up
	     */
	    onMouseUp: function() {
	      this._finalizeAndAddPath();
	    },

	    /**
	     * @private
	     * @param {Object} pointer Actual mouse position related to the canvas.
	     */
	    _prepareForDrawing: function(pointer) {

	      var p = new fabric.Point(pointer.x, pointer.y);

	      this._reset();
	      this._addPoint(p);

	      this.canvas.contextTop.moveTo(p.x, p.y);
	    },

	    /**
	     * @private
	     * @param {fabric.Point} point Point to be added to points array
	     */
	    _addPoint: function(point) {
	      this._points.push(point);
	    },

	    /**
	     * Clear points array and set contextTop canvas style.
	     * @private
	     */
	    _reset: function() {
	      this._points.length = 0;

	      this._setBrushStyles();
	      this._setShadow();
	    },

	    /**
	     * @private
	     * @param {Object} pointer Actual mouse position related to the canvas.
	     */
	    _captureDrawingPath: function(pointer) {
	      var pointerPoint = new fabric.Point(pointer.x, pointer.y);
	      this._addPoint(pointerPoint);
	    },

	    /**
	     * Draw a smooth path on the topCanvas using quadraticCurveTo
	     * @private
	     */
	    _render: function() {
	      var ctx  = this.canvas.contextTop,
	          v = this.canvas.viewportTransform,
	          p1 = this._points[0],
	          p2 = this._points[1];

	      ctx.save();
	      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
	      ctx.beginPath();

	      //if we only have 2 points in the path and they are the same
	      //it means that the user only clicked the canvas without moving the mouse
	      //then we should be drawing a dot. A path isn't drawn between two identical dots
	      //that's why we set them apart a bit
	      if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {
	        p1.x -= 0.5;
	        p2.x += 0.5;
	      }
	      ctx.moveTo(p1.x, p1.y);

	      for (var i = 1, len = this._points.length; i < len; i++) {
	        // we pick the point between pi + 1 & pi + 2 as the
	        // end point and p1 as our control point.
	        var midPoint = p1.midPointFrom(p2);
	        ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);

	        p1 = this._points[i];
	        p2 = this._points[i + 1];
	      }
	      // Draw last line as a straight line while
	      // we wait for the next point to be able to calculate
	      // the bezier control point
	      ctx.lineTo(p1.x, p1.y);
	      ctx.stroke();
	      ctx.restore();
	    },

	    /**
	     * Converts points to SVG path
	     * @param {Array} points Array of points
	     * @param {Number} minX
	     * @param {Number} minY
	     * @return {String} SVG path
	     */
	    convertPointsToSVGPath: function(points) {
	      var path = [],
	          p1 = new fabric.Point(points[0].x, points[0].y),
	          p2 = new fabric.Point(points[1].x, points[1].y);

	      path.push('M ', points[0].x, ' ', points[0].y, ' ');
	      for (var i = 1, len = points.length; i < len; i++) {
	        var midPoint = p1.midPointFrom(p2);
	        // p1 is our bezier control point
	        // midpoint is our endpoint
	        // start point is p(i-1) value.
	        path.push('Q ', p1.x, ' ', p1.y, ' ', midPoint.x, ' ', midPoint.y, ' ');
	        p1 = new fabric.Point(points[i].x, points[i].y);
	        if ((i + 1) < points.length) {
	          p2 = new fabric.Point(points[i + 1].x, points[i + 1].y);
	        }
	      }
	      path.push('L ', p1.x, ' ', p1.y, ' ');
	      return path;
	    },

	    /**
	     * Creates fabric.Path object to add on canvas
	     * @param {String} pathData Path data
	     * @return {fabric.Path} Path to add on canvas
	     */
	    createPath: function(pathData) {
	      var path = new fabric.Path(pathData, {
	                   fill: null,
	                   stroke: this.color,
	                   strokeWidth: this.width,
	                   strokeLineCap: this.strokeLineCap,
	                   strokeLineJoin: this.strokeLineJoin,
	                   strokeDashArray: this.strokeDashArray,
	                   originX: 'center',
	                   originY: 'center'
	                 });

	      if (this.shadow) {
	        this.shadow.affectStroke = true;
	        path.setShadow(this.shadow);
	      }

	      return path;
	    },

	    /**
	     * On mouseup after drawing the path on contextTop canvas
	     * we use the points captured to create an new fabric path object
	     * and add it to the fabric canvas.
	     */
	    _finalizeAndAddPath: function() {
	      var ctx = this.canvas.contextTop;
	      ctx.closePath();

	      var pathData = this.convertPointsToSVGPath(this._points).join('');
	      if (pathData === 'M 0 0 Q 0 0 0 0 L 0 0') {
	        // do not create 0 width/height paths, as they are
	        // rendered inconsistently across browsers
	        // Firefox 4, for example, renders a dot,
	        // whereas Chrome 10 renders nothing
	        this.canvas.renderAll();
	        return;
	      }

	      var path = this.createPath(pathData);

	      this.canvas.add(path);
	      path.setCoords();

	      this.canvas.clearContext(this.canvas.contextTop);
	      this._resetShadow();
	      this.canvas.renderAll();

	      // fire event 'path' created
	      this.canvas.fire('path:created', { path: path });
	    }
	  });
	})();


	/**
	 * CircleBrush class
	 * @class fabric.CircleBrush
	 */
	fabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */ {

	  /**
	   * Width of a brush
	   * @type Number
	   * @default
	   */
	  width: 10,

	  /**
	   * Constructor
	   * @param {fabric.Canvas} canvas
	   * @return {fabric.CircleBrush} Instance of a circle brush
	   */
	  initialize: function(canvas) {
	    this.canvas = canvas;
	    this.points = [ ];
	  },

	  /**
	   * Invoked inside on mouse down and mouse move
	   * @param {Object} pointer
	   */
	  drawDot: function(pointer) {
	    var point = this.addPoint(pointer),
	        ctx = this.canvas.contextTop,
	        v = this.canvas.viewportTransform;
	    ctx.save();
	    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);

	    ctx.fillStyle = point.fill;
	    ctx.beginPath();
	    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);
	    ctx.closePath();
	    ctx.fill();

	    ctx.restore();
	  },

	  /**
	   * Invoked on mouse down
	   */
	  onMouseDown: function(pointer) {
	    this.points.length = 0;
	    this.canvas.clearContext(this.canvas.contextTop);
	    this._setShadow();
	    this.drawDot(pointer);
	  },

	  /**
	   * Invoked on mouse move
	   * @param {Object} pointer
	   */
	  onMouseMove: function(pointer) {
	    this.drawDot(pointer);
	  },

	  /**
	   * Invoked on mouse up
	   */
	  onMouseUp: function() {
	    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;
	    this.canvas.renderOnAddRemove = false;

	    var circles = [ ];

	    for (var i = 0, len = this.points.length; i < len; i++) {
	      var point = this.points[i],
	          circle = new fabric.Circle({
	            radius: point.radius,
	            left: point.x,
	            top: point.y,
	            originX: 'center',
	            originY: 'center',
	            fill: point.fill
	          });

	      this.shadow && circle.setShadow(this.shadow);

	      circles.push(circle);
	    }
	    var group = new fabric.Group(circles, { originX: 'center', originY: 'center' });
	    group.canvas = this.canvas;

	    this.canvas.add(group);
	    this.canvas.fire('path:created', { path: group });

	    this.canvas.clearContext(this.canvas.contextTop);
	    this._resetShadow();
	    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;
	    this.canvas.renderAll();
	  },

	  /**
	   * @param {Object} pointer
	   * @return {fabric.Point} Just added pointer point
	   */
	  addPoint: function(pointer) {
	    var pointerPoint = new fabric.Point(pointer.x, pointer.y),

	        circleRadius = fabric.util.getRandomInt(
	                        Math.max(0, this.width - 20), this.width + 20) / 2,

	        circleColor = new fabric.Color(this.color)
	                        .setAlpha(fabric.util.getRandomInt(0, 100) / 100)
	                        .toRgba();

	    pointerPoint.radius = circleRadius;
	    pointerPoint.fill = circleColor;

	    this.points.push(pointerPoint);

	    return pointerPoint;
	  }
	});


	/**
	 * SprayBrush class
	 * @class fabric.SprayBrush
	 */
	fabric.SprayBrush = fabric.util.createClass( fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */ {

	  /**
	   * Width of a spray
	   * @type Number
	   * @default
	   */
	  width:              10,

	  /**
	   * Density of a spray (number of dots per chunk)
	   * @type Number
	   * @default
	   */
	  density:            20,

	  /**
	   * Width of spray dots
	   * @type Number
	   * @default
	   */
	  dotWidth:           1,

	  /**
	   * Width variance of spray dots
	   * @type Number
	   * @default
	   */
	  dotWidthVariance:   1,

	  /**
	   * Whether opacity of a dot should be random
	   * @type Boolean
	   * @default
	   */
	  randomOpacity:        false,

	  /**
	   * Whether overlapping dots (rectangles) should be removed (for performance reasons)
	   * @type Boolean
	   * @default
	   */
	  optimizeOverlapping:  true,

	  /**
	   * Constructor
	   * @param {fabric.Canvas} canvas
	   * @return {fabric.SprayBrush} Instance of a spray brush
	   */
	  initialize: function(canvas) {
	    this.canvas = canvas;
	    this.sprayChunks = [ ];
	  },

	  /**
	   * Invoked on mouse down
	   * @param {Object} pointer
	   */
	  onMouseDown: function(pointer) {
	    this.sprayChunks.length = 0;
	    this.canvas.clearContext(this.canvas.contextTop);
	    this._setShadow();

	    this.addSprayChunk(pointer);
	    this.render();
	  },

	  /**
	   * Invoked on mouse move
	   * @param {Object} pointer
	   */
	  onMouseMove: function(pointer) {
	    this.addSprayChunk(pointer);
	    this.render();
	  },

	  /**
	   * Invoked on mouse up
	   */
	  onMouseUp: function() {
	    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;
	    this.canvas.renderOnAddRemove = false;

	    var rects = [ ];

	    for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {
	      var sprayChunk = this.sprayChunks[i];

	      for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {

	        var rect = new fabric.Rect({
	          width: sprayChunk[j].width,
	          height: sprayChunk[j].width,
	          left: sprayChunk[j].x + 1,
	          top: sprayChunk[j].y + 1,
	          originX: 'center',
	          originY: 'center',
	          fill: this.color
	        });

	        this.shadow && rect.setShadow(this.shadow);
	        rects.push(rect);
	      }
	    }

	    if (this.optimizeOverlapping) {
	      rects = this._getOptimizedRects(rects);
	    }

	    var group = new fabric.Group(rects, { originX: 'center', originY: 'center' });
	    group.canvas = this.canvas;

	    this.canvas.add(group);
	    this.canvas.fire('path:created', { path: group });

	    this.canvas.clearContext(this.canvas.contextTop);
	    this._resetShadow();
	    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;
	    this.canvas.renderAll();
	  },

	  /**
	   * @private
	   * @param {Array} rects
	   */
	  _getOptimizedRects: function(rects) {

	    // avoid creating duplicate rects at the same coordinates
	    var uniqueRects = { }, key;

	    for (var i = 0, len = rects.length; i < len; i++) {
	      key = rects[i].left + '' + rects[i].top;
	      if (!uniqueRects[key]) {
	        uniqueRects[key] = rects[i];
	      }
	    }
	    var uniqueRectsArray = [ ];
	    for (key in uniqueRects) {
	      uniqueRectsArray.push(uniqueRects[key]);
	    }

	    return uniqueRectsArray;
	  },

	  /**
	   * Renders brush
	   */
	  render: function() {
	    var ctx = this.canvas.contextTop;
	    ctx.fillStyle = this.color;

	    var v = this.canvas.viewportTransform;
	    ctx.save();
	    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);

	    for (var i = 0, len = this.sprayChunkPoints.length; i < len; i++) {
	      var point = this.sprayChunkPoints[i];
	      if (typeof point.opacity !== 'undefined') {
	        ctx.globalAlpha = point.opacity;
	      }
	      ctx.fillRect(point.x, point.y, point.width, point.width);
	    }
	    ctx.restore();
	  },

	  /**
	   * @param {Object} pointer
	   */
	  addSprayChunk: function(pointer) {
	    this.sprayChunkPoints = [ ];

	    var x, y, width, radius = this.width / 2;

	    for (var i = 0; i < this.density; i++) {

	      x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);
	      y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);

	      if (this.dotWidthVariance) {
	        width = fabric.util.getRandomInt(
	          // bottom clamp width to 1
	          Math.max(1, this.dotWidth - this.dotWidthVariance),
	          this.dotWidth + this.dotWidthVariance);
	      }
	      else {
	        width = this.dotWidth;
	      }

	      var point = new fabric.Point(x, y);
	      point.width = width;

	      if (this.randomOpacity) {
	        point.opacity = fabric.util.getRandomInt(0, 100) / 100;
	      }

	      this.sprayChunkPoints.push(point);
	    }

	    this.sprayChunks.push(this.sprayChunkPoints);
	  }
	});


	/**
	 * PatternBrush class
	 * @class fabric.PatternBrush
	 * @extends fabric.BaseBrush
	 */
	fabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */ {

	  getPatternSrc: function() {

	    var dotWidth = 20,
	        dotDistance = 5,
	        patternCanvas = fabric.document.createElement('canvas'),
	        patternCtx = patternCanvas.getContext('2d');

	    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;

	    patternCtx.fillStyle = this.color;
	    patternCtx.beginPath();
	    patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);
	    patternCtx.closePath();
	    patternCtx.fill();

	    return patternCanvas;
	  },

	  getPatternSrcFunction: function() {
	    return String(this.getPatternSrc).replace('this.color', '"' + this.color + '"');
	  },

	  /**
	   * Creates "pattern" instance property
	   */
	  getPattern: function() {
	    return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), 'repeat');
	  },

	  /**
	   * Sets brush styles
	   */
	  _setBrushStyles: function() {
	    this.callSuper('_setBrushStyles');
	    this.canvas.contextTop.strokeStyle = this.getPattern();
	  },

	  /**
	   * Creates path
	   */
	  createPath: function(pathData) {
	    var path = this.callSuper('createPath', pathData);
	    path.stroke = new fabric.Pattern({
	      source: this.source || this.getPatternSrcFunction()
	    });
	    return path;
	  }
	});


	(function() {

	  var getPointer = fabric.util.getPointer,
	      degreesToRadians = fabric.util.degreesToRadians,
	      radiansToDegrees = fabric.util.radiansToDegrees,
	      atan2 = Math.atan2,
	      abs = Math.abs,

	      STROKE_OFFSET = 0.5;

	  /**
	   * Canvas class
	   * @class fabric.Canvas
	   * @extends fabric.StaticCanvas
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}
	   * @see {@link fabric.Canvas#initialize} for constructor definition
	   *
	   * @fires object:modified
	   * @fires object:rotating
	   * @fires object:scaling
	   * @fires object:moving
	   * @fires object:selected
	   *
	   * @fires before:selection:cleared
	   * @fires selection:cleared
	   * @fires selection:created
	   *
	   * @fires path:created
	   * @fires mouse:down
	   * @fires mouse:move
	   * @fires mouse:up
	   * @fires mouse:over
	   * @fires mouse:out
	   *
	   */
	  fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */ {

	    /**
	     * Constructor
	     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
	     * @param {Object} [options] Options object
	     * @return {Object} thisArg
	     */
	    initialize: function(el, options) {
	      options || (options = { });

	      this._initStatic(el, options);
	      this._initInteractive();
	      this._createCacheCanvas();
	    },

	    /**
	     * When true, objects can be transformed by one side (unproportionally)
	     * @type Boolean
	     * @default
	     */
	    uniScaleTransform:      false,

	    /**
	     * When true, objects use center point as the origin of scale transformation.
	     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
	     * @since 1.3.4
	     * @type Boolean
	     * @default
	     */
	    centeredScaling:        false,

	    /**
	     * When true, objects use center point as the origin of rotate transformation.
	     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
	     * @since 1.3.4
	     * @type Boolean
	     * @default
	     */
	    centeredRotation:       false,

	    /**
	     * Indicates that canvas is interactive. This property should not be changed.
	     * @type Boolean
	     * @default
	     */
	    interactive:            true,

	    /**
	     * Indicates whether group selection should be enabled
	     * @type Boolean
	     * @default
	     */
	    selection:              true,

	    /**
	     * Color of selection
	     * @type String
	     * @default
	     */
	    selectionColor:         'rgba(100, 100, 255, 0.3)', // blue

	    /**
	     * Default dash array pattern
	     * If not empty the selection border is dashed
	     * @type Array
	     */
	    selectionDashArray:     [ ],

	    /**
	     * Color of the border of selection (usually slightly darker than color of selection itself)
	     * @type String
	     * @default
	     */
	    selectionBorderColor:   'rgba(255, 255, 255, 0.3)',

	    /**
	     * Width of a line used in object/group selection
	     * @type Number
	     * @default
	     */
	    selectionLineWidth:     1,

	    /**
	     * Default cursor value used when hovering over an object on canvas
	     * @type String
	     * @default
	     */
	    hoverCursor:            'move',

	    /**
	     * Default cursor value used when moving an object on canvas
	     * @type String
	     * @default
	     */
	    moveCursor:             'move',

	    /**
	     * Default cursor value used for the entire canvas
	     * @type String
	     * @default
	     */
	    defaultCursor:          'default',

	    /**
	     * Cursor value used during free drawing
	     * @type String
	     * @default
	     */
	    freeDrawingCursor:      'crosshair',

	    /**
	     * Cursor value used for rotation point
	     * @type String
	     * @default
	     */
	    rotationCursor:         'crosshair',

	    /**
	     * Default element class that's given to wrapper (div) element of canvas
	     * @type String
	     * @default
	     */
	    containerClass:         'canvas-container',

	    /**
	     * When true, object detection happens on per-pixel basis rather than on per-bounding-box
	     * @type Boolean
	     * @default
	     */
	    perPixelTargetFind:     false,

	    /**
	     * Number of pixels around target pixel to tolerate (consider active) during object detection
	     * @type Number
	     * @default
	     */
	    targetFindTolerance:    0,

	    /**
	     * When true, target detection is skipped when hovering over canvas. This can be used to improve performance.
	     * @type Boolean
	     * @default
	     */
	    skipTargetFind:         false,

	    /**
	     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.
	     * After mousedown, mousemove creates a shape,
	     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.
	     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}
	     * @type Boolean
	     * @default
	     */
	    isDrawingMode:          false,

	    /**
	     * @private
	     */
	    _initInteractive: function() {
	      this._currentTransform = null;
	      this._groupSelector = null;
	      this._initWrapperElement();
	      this._createUpperCanvas();
	      this._initEventListeners();

	      this._initRetinaScaling();

	      this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);

	      this.calcOffset();
	    },

	    /**
	     * Resets the current transform to its original values and chooses the type of resizing based on the event
	     * @private
	     * @param {Event} e Event object fired on mousemove
	     */
	    _resetCurrentTransform: function() {
	      var t = this._currentTransform;

	      t.target.set({
	        scaleX: t.original.scaleX,
	        scaleY: t.original.scaleY,
	        skewX: t.original.skewX,
	        skewY: t.original.skewY,
	        left: t.original.left,
	        top: t.original.top
	      });

	      if (this._shouldCenterTransform(t.target)) {
	        if (t.action === 'rotate') {
	          this._setOriginToCenter(t.target);
	        }
	        else {
	          if (t.originX !== 'center') {
	            if (t.originX === 'right') {
	              t.mouseXSign = -1;
	            }
	            else {
	              t.mouseXSign = 1;
	            }
	          }
	          if (t.originY !== 'center') {
	            if (t.originY === 'bottom') {
	              t.mouseYSign = -1;
	            }
	            else {
	              t.mouseYSign = 1;
	            }
	          }

	          t.originX = 'center';
	          t.originY = 'center';
	        }
	      }
	      else {
	        t.originX = t.original.originX;
	        t.originY = t.original.originY;
	      }
	    },

	    /**
	     * Checks if point is contained within an area of given object
	     * @param {Event} e Event object
	     * @param {fabric.Object} target Object to test against
	     * @return {Boolean} true if point is contained within an area of given object
	     */
	    containsPoint: function (e, target) {
	      var pointer = this.getPointer(e, true),
	          xy = this._normalizePointer(target, pointer);

	      // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html
	      // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html
	      return (target.containsPoint(xy) || target._findTargetCorner(pointer));
	    },

	    /**
	     * @private
	     */
	    _normalizePointer: function (object, pointer) {
	      var activeGroup = this.getActiveGroup(),
	          isObjectInGroup = (
	            activeGroup &&
	            object.type !== 'group' &&
	            activeGroup.contains(object)),
	          lt, m;

	      if (isObjectInGroup) {
	        m = fabric.util.multiplyTransformMatrices(
	              this.viewportTransform,
	              activeGroup.calcTransformMatrix());

	        m = fabric.util.invertTransform(m);
	        pointer = fabric.util.transformPoint(pointer, m , false);
	        lt = fabric.util.transformPoint(activeGroup.getCenterPoint(), m , false);
	        pointer.x -= lt.x;
	        pointer.y -= lt.y;
	      }
	      return { x: pointer.x, y: pointer.y };
	    },

	    /**
	     * Returns true if object is transparent at a certain location
	     * @param {fabric.Object} target Object to check
	     * @param {Number} x Left coordinate
	     * @param {Number} y Top coordinate
	     * @return {Boolean}
	     */
	    isTargetTransparent: function (target, x, y) {
	      var hasBorders = target.hasBorders,
	          transparentCorners = target.transparentCorners,
	          ctx = this.contextCache,
	          shouldTransform = target.group && target.group === this.getActiveGroup();

	      target.hasBorders = target.transparentCorners = false;

	      if (shouldTransform) {
	        ctx.save();
	        ctx.transform.apply(ctx, target.group.calcTransformMatrix());
	      }
	      target.render(ctx);
	      target.active && target._renderControls(ctx);

	      target.hasBorders = hasBorders;
	      target.transparentCorners = transparentCorners;

	      var isTransparent = fabric.util.isTransparent(
	        ctx, x, y, this.targetFindTolerance);
	      shouldTransform && ctx.restore();

	      this.clearContext(ctx);

	      return isTransparent;
	    },

	    /**
	     * @private
	     * @param {Event} e Event object
	     * @param {fabric.Object} target
	     */
	    _shouldClearSelection: function (e, target) {
	      var activeGroup = this.getActiveGroup(),
	          activeObject = this.getActiveObject();

	      return (
	        !target
	        ||
	        (target &&
	          activeGroup &&
	          !activeGroup.contains(target) &&
	          activeGroup !== target &&
	          !e.shiftKey)
	        ||
	        (target && !target.evented)
	        ||
	        (target &&
	          !target.selectable &&
	          activeObject &&
	          activeObject !== target)
	      );
	    },

	    /**
	     * @private
	     * @param {fabric.Object} target
	     */
	    _shouldCenterTransform: function (target) {
	      if (!target) {
	        return;
	      }

	      var t = this._currentTransform,
	          centerTransform;

	      if (t.action === 'scale' || t.action === 'scaleX' || t.action === 'scaleY') {
	        centerTransform = this.centeredScaling || target.centeredScaling;
	      }
	      else if (t.action === 'rotate') {
	        centerTransform = this.centeredRotation || target.centeredRotation;
	      }

	      return centerTransform ? !t.altKey : t.altKey;
	    },

	    /**
	     * @private
	     */
	    _getOriginFromCorner: function(target, corner) {
	      var origin = {
	        x: target.originX,
	        y: target.originY
	      };

	      if (corner === 'ml' || corner === 'tl' || corner === 'bl') {
	        origin.x = 'right';
	      }
	      else if (corner === 'mr' || corner === 'tr' || corner === 'br') {
	        origin.x = 'left';
	      }

	      if (corner === 'tl' || corner === 'mt' || corner === 'tr') {
	        origin.y = 'bottom';
	      }
	      else if (corner === 'bl' || corner === 'mb' || corner === 'br') {
	        origin.y = 'top';
	      }

	      return origin;
	    },

	    /**
	     * @private
	     */
	    _getActionFromCorner: function(target, corner, e) {
	      if (!corner) {
	        return 'drag';
	      }

	      switch (corner) {
	        case 'mtr':
	          return 'rotate';
	        case 'ml':
	        case 'mr':
	          return e.shiftKey ? 'skewY' : 'scaleX';
	        case 'mt':
	        case 'mb':
	          return e.shiftKey ? 'skewX' : 'scaleY';
	        default:
	          return 'scale';
	      }
	    },

	    /**
	     * @private
	     * @param {Event} e Event object
	     * @param {fabric.Object} target
	     */
	    _setupCurrentTransform: function (e, target) {
	      if (!target) {
	        return;
	      }

	      var pointer = this.getPointer(e),
	          corner = target._findTargetCorner(this.getPointer(e, true)),
	          action = this._getActionFromCorner(target, corner, e),
	          origin = this._getOriginFromCorner(target, corner);

	      this._currentTransform = {
	        target: target,
	        action: action,
	        corner: corner,
	        scaleX: target.scaleX,
	        scaleY: target.scaleY,
	        skewX: target.skewX,
	        skewY: target.skewY,
	        offsetX: pointer.x - target.left,
	        offsetY: pointer.y - target.top,
	        originX: origin.x,
	        originY: origin.y,
	        ex: pointer.x,
	        ey: pointer.y,
	        lastX: pointer.x,
	        lastY: pointer.y,
	        left: target.left,
	        top: target.top,
	        theta: degreesToRadians(target.angle),
	        width: target.width * target.scaleX,
	        mouseXSign: 1,
	        mouseYSign: 1,
	        shiftKey: e.shiftKey,
	        altKey: e.altKey
	      };

	      this._currentTransform.original = {
	        left: target.left,
	        top: target.top,
	        scaleX: target.scaleX,
	        scaleY: target.scaleY,
	        skewX: target.skewX,
	        skewY: target.skewY,
	        originX: origin.x,
	        originY: origin.y
	      };

	      this._resetCurrentTransform();
	    },

	    /**
	     * Translates object by "setting" its left/top
	     * @private
	     * @param {Number} x pointer's x coordinate
	     * @param {Number} y pointer's y coordinate
	     * @return {Boolean} true if the translation occurred
	     */
	    _translateObject: function (x, y) {
	      var transform = this._currentTransform,
	          target = transform.target,
	          newLeft = x - transform.offsetX,
	          newTop = y - transform.offsetY,
	          moveX = !target.get('lockMovementX') && target.left !== newLeft,
	          moveY = !target.get('lockMovementY') && target.top !== newTop;

	      moveX && target.set('left', newLeft);
	      moveY && target.set('top', newTop);
	      return moveX || moveY;
	    },

	    /**
	     * Check if we are increasing a positive skew or lower it,
	     * checking mouse direction and pressed corner.
	     * @private
	     */
	    _changeSkewTransformOrigin: function(mouseMove, t, by) {
	      var property = 'originX', origins = { 0: 'center' },
	          skew = t.target.skewX, originA = 'left', originB = 'right',
	          corner = t.corner === 'mt' || t.corner === 'ml' ? 1 : -1,
	          flipSign = 1;

	      mouseMove = mouseMove > 0 ? 1 : -1;
	      if (by === 'y') {
	        skew = t.target.skewY;
	        originA = 'top';
	        originB = 'bottom';
	        property = 'originY';
	      }
	      origins[-1] = originA;
	      origins[1] = originB;

	      t.target.flipX && (flipSign *= -1);
	      t.target.flipY && (flipSign *= -1);

	      if (skew === 0) {
	        t.skewSign = -corner * mouseMove * flipSign;
	        t[property] = origins[-mouseMove];
	      }
	      else {
	        skew = skew > 0 ? 1 : -1;
	        t.skewSign = skew;
	        t[property] = origins[skew * corner * flipSign];
	      }
	    },

	    /**
	     * Skew object by mouse events
	     * @private
	     * @param {Number} x pointer's x coordinate
	     * @param {Number} y pointer's y coordinate
	     * @param {String} by Either 'x' or 'y'
	     * @return {Boolean} true if the skewing occurred
	     */
	    _skewObject: function (x, y, by) {
	      var t = this._currentTransform,
	          target = t.target, skewed = false,
	          lockSkewingX = target.get('lockSkewingX'),
	          lockSkewingY = target.get('lockSkewingY');

	      if ((lockSkewingX && by === 'x') || (lockSkewingY && by === 'y')) {
	        return false;
	      }

	      // Get the constraint point
	      var center = target.getCenterPoint(),
	          actualMouseByCenter = target.toLocalPoint(new fabric.Point(x, y), 'center', 'center')[by],
	          lastMouseByCenter = target.toLocalPoint(new fabric.Point(t.lastX, t.lastY), 'center', 'center')[by],
	          actualMouseByOrigin, constraintPosition, dim = target._getTransformedDimensions();

	      this._changeSkewTransformOrigin(actualMouseByCenter - lastMouseByCenter, t, by);
	      actualMouseByOrigin = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY)[by],

	      constraintPosition = target.translateToOriginPoint(center, t.originX, t.originY);
	      // Actually skew the object
	      skewed = this._setObjectSkew(actualMouseByOrigin, t, by, dim);
	      t.lastX = x;
	      t.lastY = y;
	      // Make sure the constraints apply
	      target.setPositionByOrigin(constraintPosition, t.originX, t.originY);
	      return skewed;
	    },

	    /**
	     * Set object skew
	     * @private
	     * @return {Boolean} true if the skewing occurred
	     */
	    _setObjectSkew: function(localMouse, transform, by, _dim) {
	      var target = transform.target, newValue, skewed = false,
	          skewSign = transform.skewSign, newDim, dimNoSkew,
	          otherBy, _otherBy, _by, newDimMouse, skewX, skewY;

	      if (by === 'x') {
	        otherBy = 'y';
	        _otherBy = 'Y';
	        _by = 'X';
	        skewX = 0;
	        skewY = target.skewY;
	      }
	      else {
	        otherBy = 'x';
	        _otherBy = 'X';
	        _by = 'Y';
	        skewX = target.skewX;
	        skewY = 0;
	      }

	      dimNoSkew = target._getTransformedDimensions(skewX, skewY);
	      newDimMouse = 2 * Math.abs(localMouse) - dimNoSkew[by];
	      if (newDimMouse <= 2) {
	        newValue = 0;
	      }
	      else {
	        newValue = skewSign * Math.atan((newDimMouse / target['scale' + _by]) /
	                                        (dimNoSkew[otherBy] / target['scale' + _otherBy]));
	        newValue = fabric.util.radiansToDegrees(newValue);
	      }
	      skewed = target['skew' + _by] !== newValue;
	      target.set('skew' + _by, newValue);
	      if (target['skew' + _otherBy] !== 0) {
	        newDim = target._getTransformedDimensions();
	        newValue = (_dim[otherBy] / newDim[otherBy]) * target['scale' + _otherBy];
	        target.set('scale' + _otherBy, newValue);
	      }
	      return skewed;
	    },

	    /**
	     * Scales object by invoking its scaleX/scaleY methods
	     * @private
	     * @param {Number} x pointer's x coordinate
	     * @param {Number} y pointer's y coordinate
	     * @param {String} by Either 'x' or 'y' - specifies dimension constraint by which to scale an object.
	     *                    When not provided, an object is scaled by both dimensions equally
	     * @return {Boolean} true if the scaling occurred
	     */
	    _scaleObject: function (x, y, by) {
	      var t = this._currentTransform,
	          target = t.target,
	          lockScalingX = target.get('lockScalingX'),
	          lockScalingY = target.get('lockScalingY'),
	          lockScalingFlip = target.get('lockScalingFlip');

	      if (lockScalingX && lockScalingY) {
	        return false;
	      }

	      // Get the constraint point
	      var constraintPosition = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY),
	          localMouse = target.toLocalPoint(new fabric.Point(x, y), t.originX, t.originY),
	          dim = target._getTransformedDimensions(), scaled = false;

	      this._setLocalMouse(localMouse, t);

	      // Actually scale the object
	      scaled = this._setObjectScale(localMouse, t, lockScalingX, lockScalingY, by, lockScalingFlip, dim);

	      // Make sure the constraints apply
	      target.setPositionByOrigin(constraintPosition, t.originX, t.originY);
	      return scaled;
	    },

	    /**
	     * @private
	     * @return {Boolean} true if the scaling occurred
	     */
	    _setObjectScale: function(localMouse, transform, lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {
	      var target = transform.target, forbidScalingX = false, forbidScalingY = false, scaled = false,
	          changeX, changeY, scaleX, scaleY;

	      scaleX = localMouse.x * target.scaleX / _dim.x;
	      scaleY = localMouse.y * target.scaleY / _dim.y;
	      changeX = target.scaleX !== scaleX;
	      changeY = target.scaleY !== scaleY;

	      if (lockScalingFlip && scaleX <= 0 && scaleX < target.scaleX) {
	        forbidScalingX = true;
	      }

	      if (lockScalingFlip && scaleY <= 0 && scaleY < target.scaleY) {
	        forbidScalingY = true;
	      }

	      if (by === 'equally' && !lockScalingX && !lockScalingY) {
	        forbidScalingX || forbidScalingY || (scaled = this._scaleObjectEqually(localMouse, target, transform, _dim));
	      }
	      else if (!by) {
	        forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = scaled || changeX));
	        forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = scaled || changeY));
	      }
	      else if (by === 'x' && !target.get('lockUniScaling')) {
	        forbidScalingX || lockScalingX || (target.set('scaleX', scaleX) && (scaled = scaled || changeX));
	      }
	      else if (by === 'y' && !target.get('lockUniScaling')) {
	        forbidScalingY || lockScalingY || (target.set('scaleY', scaleY) && (scaled = scaled || changeY));
	      }
	      transform.newScaleX = scaleX;
	      transform.newScaleY = scaleY;
	      forbidScalingX || forbidScalingY || this._flipObject(transform, by);
	      return scaled;
	    },

	    /**
	     * @private
	     * @return {Boolean} true if the scaling occurred
	     */
	    _scaleObjectEqually: function(localMouse, target, transform, _dim) {

	      var dist = localMouse.y + localMouse.x,
	          lastDist = _dim.y * transform.original.scaleY / target.scaleY +
	                     _dim.x * transform.original.scaleX / target.scaleX,
	          scaled;

	      // We use transform.scaleX/Y instead of target.scaleX/Y
	      // because the object may have a min scale and we'll loose the proportions
	      transform.newScaleX = transform.original.scaleX * dist / lastDist;
	      transform.newScaleY = transform.original.scaleY * dist / lastDist;
	      scaled = transform.newScaleX !== target.scaleX || transform.newScaleY !== target.scaleY;
	      target.set('scaleX', transform.newScaleX);
	      target.set('scaleY', transform.newScaleY);
	      return scaled;
	    },

	    /**
	     * @private
	     */
	    _flipObject: function(transform, by) {
	      if (transform.newScaleX < 0 && by !== 'y') {
	        if (transform.originX === 'left') {
	          transform.originX = 'right';
	        }
	        else if (transform.originX === 'right') {
	          transform.originX = 'left';
	        }
	      }

	      if (transform.newScaleY < 0 && by !== 'x') {
	        if (transform.originY === 'top') {
	          transform.originY = 'bottom';
	        }
	        else if (transform.originY === 'bottom') {
	          transform.originY = 'top';
	        }
	      }
	    },

	    /**
	     * @private
	     */
	    _setLocalMouse: function(localMouse, t) {
	      var target = t.target;

	      if (t.originX === 'right') {
	        localMouse.x *= -1;
	      }
	      else if (t.originX === 'center') {
	        localMouse.x *= t.mouseXSign * 2;

	        if (localMouse.x < 0) {
	          t.mouseXSign = -t.mouseXSign;
	        }
	      }

	      if (t.originY === 'bottom') {
	        localMouse.y *= -1;
	      }
	      else if (t.originY === 'center') {
	        localMouse.y *= t.mouseYSign * 2;

	        if (localMouse.y < 0) {
	          t.mouseYSign = -t.mouseYSign;
	        }
	      }

	      // adjust the mouse coordinates when dealing with padding
	      if (abs(localMouse.x) > target.padding) {
	        if (localMouse.x < 0) {
	          localMouse.x += target.padding;
	        }
	        else {
	          localMouse.x -= target.padding;
	        }
	      }
	      else { // mouse is within the padding, set to 0
	        localMouse.x = 0;
	      }

	      if (abs(localMouse.y) > target.padding) {
	        if (localMouse.y < 0) {
	          localMouse.y += target.padding;
	        }
	        else {
	          localMouse.y -= target.padding;
	        }
	      }
	      else {
	        localMouse.y = 0;
	      }
	    },

	    /**
	     * Rotates object by invoking its rotate method
	     * @private
	     * @param {Number} x pointer's x coordinate
	     * @param {Number} y pointer's y coordinate
	     * @return {Boolean} true if the rotation occurred
	     */
	    _rotateObject: function (x, y) {

	      var t = this._currentTransform;

	      if (t.target.get('lockRotation')) {
	        return false;
	      }

	      var lastAngle = atan2(t.ey - t.top, t.ex - t.left),
	          curAngle = atan2(y - t.top, x - t.left),
	          angle = radiansToDegrees(curAngle - lastAngle + t.theta);

	      // normalize angle to positive value
	      if (angle < 0) {
	        angle = 360 + angle;
	      }

	      t.target.angle = angle % 360;
	      return true;
	    },

	    /**
	     * Set the cursor type of the canvas element
	     * @param {String} value Cursor type of the canvas element.
	     * @see http://www.w3.org/TR/css3-ui/#cursor
	     */
	    setCursor: function (value) {
	      this.upperCanvasEl.style.cursor = value;
	    },

	    /**
	     * @private
	     */
	    _resetObjectTransform: function (target) {
	      target.scaleX = 1;
	      target.scaleY = 1;
	      target.skewX = 0;
	      target.skewY = 0;
	      target.setAngle(0);
	    },

	    /**
	     * @private
	     */
	    _drawSelection: function () {
	      var ctx = this.contextTop,
	          groupSelector = this._groupSelector,
	          left = groupSelector.left,
	          top = groupSelector.top,
	          aleft = abs(left),
	          atop = abs(top);

	      ctx.fillStyle = this.selectionColor;

	      ctx.fillRect(
	        groupSelector.ex - ((left > 0) ? 0 : -left),
	        groupSelector.ey - ((top > 0) ? 0 : -top),
	        aleft,
	        atop
	      );

	      ctx.lineWidth = this.selectionLineWidth;
	      ctx.strokeStyle = this.selectionBorderColor;

	      // selection border
	      if (this.selectionDashArray.length > 1) {

	        var px = groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0: aleft),
	            py = groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0: atop);

	        ctx.beginPath();

	        fabric.util.drawDashedLine(ctx, px, py, px + aleft, py, this.selectionDashArray);
	        fabric.util.drawDashedLine(ctx, px, py + atop - 1, px + aleft, py + atop - 1, this.selectionDashArray);
	        fabric.util.drawDashedLine(ctx, px, py, px, py + atop, this.selectionDashArray);
	        fabric.util.drawDashedLine(ctx, px + aleft - 1, py, px + aleft - 1, py + atop, this.selectionDashArray);

	        ctx.closePath();
	        ctx.stroke();
	      }
	      else {
	        ctx.strokeRect(
	          groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),
	          groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),
	          aleft,
	          atop
	        );
	      }
	    },

	    /**
	     * @private
	     */
	    _isLastRenderedObject: function(e) {
	      return (
	        this.controlsAboveOverlay &&
	        this.lastRenderedObjectWithControlsAboveOverlay &&
	        this.lastRenderedObjectWithControlsAboveOverlay.visible &&
	        this.containsPoint(e, this.lastRenderedObjectWithControlsAboveOverlay) &&
	        this.lastRenderedObjectWithControlsAboveOverlay._findTargetCorner(this.getPointer(e, true)));
	    },

	    /**
	     * Method that determines what object we are clicking on
	     * @param {Event} e mouse event
	     * @param {Boolean} skipGroup when true, group is skipped and only objects are traversed through
	     */
	    findTarget: function (e, skipGroup) {
	      if (this.skipTargetFind) {
	        return;
	      }

	      if (this._isLastRenderedObject(e)) {
	        return this.lastRenderedObjectWithControlsAboveOverlay;
	      }

	      // first check current group (if one exists)
	      var activeGroup = this.getActiveGroup();
	      if (!skipGroup && this._checkTarget(e, activeGroup, this.getPointer(e, true))) {
	        return activeGroup;
	      }

	      var target = this._searchPossibleTargets(e, skipGroup);
	      this._fireOverOutEvents(target, e);

	      return target;
	    },

	    /**
	     * @private
	     */
	    _fireOverOutEvents: function(target, e) {
	      if (target) {
	        if (this._hoveredTarget !== target) {
	          if (this._hoveredTarget) {
	            this.fire('mouse:out', { target: this._hoveredTarget, e: e });
	            this._hoveredTarget.fire('mouseout');
	          }
	          this.fire('mouse:over', { target: target, e: e });
	          target.fire('mouseover');
	          this._hoveredTarget = target;
	        }
	      }
	      else if (this._hoveredTarget) {
	        this.fire('mouse:out', { target: this._hoveredTarget, e: e });
	        this._hoveredTarget.fire('mouseout');
	        this._hoveredTarget = null;
	      }
	    },

	    /**
	     * @private
	     */
	    _checkTarget: function(e, obj, pointer) {
	      if (obj &&
	          obj.visible &&
	          obj.evented &&
	          this.containsPoint(e, obj)){
	        if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {
	          var isTransparent = this.isTargetTransparent(obj, pointer.x, pointer.y);
	          if (!isTransparent) {
	            return true;
	          }
	        }
	        else {
	          return true;
	        }
	      }
	    },

	    /**
	     * @private
	     */
	    _searchPossibleTargets: function(e, skipGroup) {

	      // Cache all targets where their bounding box contains point.
	      var target,
	          pointer = this.getPointer(e, true),
	          i = this._objects.length;
	      // Do not check for currently grouped objects, since we check the parent group itself.
	      // untill we call this function specifically to search inside the activeGroup
	      while (i--) {
	        if ((!this._objects[i].group || skipGroup) && this._checkTarget(e, this._objects[i], pointer)){
	          this.relatedTarget = this._objects[i];
	          target = this._objects[i];
	          break;
	        }
	      }

	      return target;
	    },

	    /**
	     * Returns pointer coordinates relative to canvas.
	     * @param {Event} e
	     * @return {Object} object with "x" and "y" number values
	     */
	    getPointer: function (e, ignoreZoom, upperCanvasEl) {
	      if (!upperCanvasEl) {
	        upperCanvasEl = this.upperCanvasEl;
	      }
	      var pointer = getPointer(e),
	          bounds = upperCanvasEl.getBoundingClientRect(),
	          boundsWidth = bounds.width || 0,
	          boundsHeight = bounds.height || 0,
	          cssScale;

	      if (!boundsWidth || !boundsHeight ) {
	        if ('top' in bounds && 'bottom' in bounds) {
	          boundsHeight = Math.abs( bounds.top - bounds.bottom );
	        }
	        if ('right' in bounds && 'left' in bounds) {
	          boundsWidth = Math.abs( bounds.right - bounds.left );
	        }
	      }

	      this.calcOffset();

	      pointer.x = pointer.x - this._offset.left;
	      pointer.y = pointer.y - this._offset.top;
	      if (!ignoreZoom) {
	        pointer = fabric.util.transformPoint(
	          pointer,
	          fabric.util.invertTransform(this.viewportTransform)
	        );
	      }

	      if (boundsWidth === 0 || boundsHeight === 0) {
	        // If bounds are not available (i.e. not visible), do not apply scale.
	        cssScale = { width: 1, height: 1 };
	      }
	      else {
	        cssScale = {
	          width: upperCanvasEl.width / boundsWidth,
	          height: upperCanvasEl.height / boundsHeight
	        };
	      }

	      return {
	        x: pointer.x * cssScale.width,
	        y: pointer.y * cssScale.height
	      };
	    },

	    /**
	     * @private
	     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized
	     */
	    _createUpperCanvas: function () {
	      var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/, '');

	      this.upperCanvasEl = this._createCanvasElement();
	      fabric.util.addClass(this.upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);

	      this.wrapperEl.appendChild(this.upperCanvasEl);

	      this._copyCanvasStyle(this.lowerCanvasEl, this.upperCanvasEl);
	      this._applyCanvasStyle(this.upperCanvasEl);
	      this.contextTop = this.upperCanvasEl.getContext('2d');
	    },

	    /**
	     * @private
	     */
	    _createCacheCanvas: function () {
	      this.cacheCanvasEl = this._createCanvasElement();
	      this.cacheCanvasEl.setAttribute('width', this.width);
	      this.cacheCanvasEl.setAttribute('height', this.height);
	      this.contextCache = this.cacheCanvasEl.getContext('2d');
	    },

	    /**
	     * @private
	     */
	    _initWrapperElement: function () {
	      this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {
	        'class': this.containerClass
	      });
	      fabric.util.setStyle(this.wrapperEl, {
	        width: this.getWidth() + 'px',
	        height: this.getHeight() + 'px',
	        position: 'relative'
	      });
	      fabric.util.makeElementUnselectable(this.wrapperEl);
	    },

	    /**
	     * @private
	     * @param {HTMLElement} element canvas element to apply styles on
	     */
	    _applyCanvasStyle: function (element) {
	      var width = this.getWidth() || element.width,
	          height = this.getHeight() || element.height;

	      fabric.util.setStyle(element, {
	        position: 'absolute',
	        width: width + 'px',
	        height: height + 'px',
	        left: 0,
	        top: 0
	      });
	      element.width = width;
	      element.height = height;
	      fabric.util.makeElementUnselectable(element);
	    },

	    /**
	     * Copys the the entire inline style from one element (fromEl) to another (toEl)
	     * @private
	     * @param {Element} fromEl Element style is copied from
	     * @param {Element} toEl Element copied style is applied to
	     */
	    _copyCanvasStyle: function (fromEl, toEl) {
	      toEl.style.cssText = fromEl.style.cssText;
	    },

	    /**
	     * Returns context of canvas where object selection is drawn
	     * @return {CanvasRenderingContext2D}
	     */
	    getSelectionContext: function() {
	      return this.contextTop;
	    },

	    /**
	     * Returns &lt;canvas> element on which object selection is drawn
	     * @return {HTMLCanvasElement}
	     */
	    getSelectionElement: function () {
	      return this.upperCanvasEl;
	    },

	    /**
	     * @private
	     * @param {Object} object
	     */
	    _setActiveObject: function(object) {
	      if (this._activeObject) {
	        this._activeObject.set('active', false);
	      }
	      this._activeObject = object;
	      object.set('active', true);
	    },

	    /**
	     * Sets given object as the only active object on canvas
	     * @param {fabric.Object} object Object to set as an active one
	     * @param {Event} [e] Event (passed along when firing "object:selected")
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    setActiveObject: function (object, e) {
	      this._setActiveObject(object);
	      this.renderAll();
	      this.fire('object:selected', { target: object, e: e });
	      object.fire('selected', { e: e });
	      return this;
	    },

	    /**
	     * Returns currently active object
	     * @return {fabric.Object} active object
	     */
	    getActiveObject: function () {
	      return this._activeObject;
	    },

	    /**
	     * @private
	     */
	    _discardActiveObject: function() {
	      if (this._activeObject) {
	        this._activeObject.set('active', false);
	      }
	      this._activeObject = null;
	    },

	    /**
	     * Discards currently active object
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    discardActiveObject: function (e) {
	      this._discardActiveObject();
	      this.renderAll();
	      this.fire('selection:cleared', { e: e });
	      return this;
	    },

	    /**
	     * @private
	     * @param {fabric.Group} group
	     */
	    _setActiveGroup: function(group) {
	      this._activeGroup = group;
	      if (group) {
	        group.set('active', true);
	      }
	    },

	    /**
	     * Sets active group to a specified one
	     * @param {fabric.Group} group Group to set as a current one
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    setActiveGroup: function (group, e) {
	      this._setActiveGroup(group);
	      if (group) {
	        this.fire('object:selected', { target: group, e: e });
	        group.fire('selected', { e: e });
	      }
	      return this;
	    },

	    /**
	     * Returns currently active group
	     * @return {fabric.Group} Current group
	     */
	    getActiveGroup: function () {
	      return this._activeGroup;
	    },

	    /**
	     * @private
	     */
	    _discardActiveGroup: function() {
	      var g = this.getActiveGroup();
	      if (g) {
	        g.destroy();
	      }
	      this.setActiveGroup(null);
	    },

	    /**
	     * Discards currently active group
	     * @return {fabric.Canvas} thisArg
	     */
	    discardActiveGroup: function (e) {
	      this._discardActiveGroup();
	      this.fire('selection:cleared', { e: e });
	      return this;
	    },

	    /**
	     * Deactivates all objects on canvas, removing any active group or object
	     * @return {fabric.Canvas} thisArg
	     */
	    deactivateAll: function () {
	      var allObjects = this.getObjects(),
	          i = 0,
	          len = allObjects.length;
	      for ( ; i < len; i++) {
	        allObjects[i].set('active', false);
	      }
	      this._discardActiveGroup();
	      this._discardActiveObject();
	      return this;
	    },

	    /**
	     * Deactivates all objects and dispatches appropriate events
	     * @return {fabric.Canvas} thisArg
	     */
	    deactivateAllWithDispatch: function (e) {
	      var activeObject = this.getActiveGroup() || this.getActiveObject();
	      if (activeObject) {
	        this.fire('before:selection:cleared', { target: activeObject, e: e });
	      }
	      this.deactivateAll();
	      if (activeObject) {
	        this.fire('selection:cleared', { e: e });
	      }
	      return this;
	    },

	    /**
	     * Clears a canvas element and removes all event listeners
	     * @return {fabric.Canvas} thisArg
	     * @chainable
	     */
	    dispose: function () {
	      this.callSuper('dispose');
	      var wrapper = this.wrapperEl;
	      this.removeListeners();
	      wrapper.removeChild(this.upperCanvasEl);
	      wrapper.removeChild(this.lowerCanvasEl);
	      delete this.upperCanvasEl;
	      if (wrapper.parentNode) {
	        wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);
	      }
	      delete this.wrapperEl;
	      return this;
	    },

	    /**
	     * Draws objects' controls (borders/controls)
	     * @param {CanvasRenderingContext2D} ctx Context to render controls on
	     */
	    drawControls: function(ctx) {
	      var activeGroup = this.getActiveGroup();

	      if (activeGroup) {
	        activeGroup._renderControls(ctx);
	      }
	      else {
	        this._drawObjectsControls(ctx);
	      }
	    },

	    /**
	     * @private
	     */
	    _drawObjectsControls: function(ctx) {
	      for (var i = 0, len = this._objects.length; i < len; ++i) {
	        if (!this._objects[i] || !this._objects[i].active) {
	          continue;
	        }
	        this._objects[i]._renderControls(ctx);
	        this.lastRenderedObjectWithControlsAboveOverlay = this._objects[i];
	      }
	    }
	  });

	  // copying static properties manually to work around Opera's bug,
	  // where "prototype" property is enumerable and overrides existing prototype
	  for (var prop in fabric.StaticCanvas) {
	    if (prop !== 'prototype') {
	      fabric.Canvas[prop] = fabric.StaticCanvas[prop];
	    }
	  }

	  if (fabric.isTouchSupported) {
	    /** @ignore */
	    fabric.Canvas.prototype._setCursorFromEvent = function() { };
	  }

	  /**
	   * @ignore
	   * @class fabric.Element
	   * @alias fabric.Canvas
	   * @deprecated Use {@link fabric.Canvas} instead.
	   * @constructor
	   */
	  fabric.Element = fabric.Canvas;
	})();


	(function() {

	  var cursorOffset = {
	    mt: 0, // n
	    tr: 1, // ne
	    mr: 2, // e
	    br: 3, // se
	    mb: 4, // s
	    bl: 5, // sw
	    ml: 6, // w
	    tl: 7 // nw
	  },
	  addListener = fabric.util.addListener,
	  removeListener = fabric.util.removeListener;

	  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {

	    /**
	     * Map of cursor style values for each of the object controls
	     * @private
	     */
	    cursorMap: [
	      'n-resize',
	      'ne-resize',
	      'e-resize',
	      'se-resize',
	      's-resize',
	      'sw-resize',
	      'w-resize',
	      'nw-resize'
	    ],

	    /**
	     * Adds mouse listeners to canvas
	     * @private
	     */
	    _initEventListeners: function () {

	      this._bindEvents();

	      addListener(fabric.window, 'resize', this._onResize);

	      // mouse events
	      addListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);
	      addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);
	      addListener(this.upperCanvasEl, 'mousewheel', this._onMouseWheel);
	      addListener(this.upperCanvasEl, 'mouseout', this._onMouseOut);

	      // touch events
	      addListener(this.upperCanvasEl, 'touchstart', this._onMouseDown);
	      addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);

	      if (typeof eventjs !== 'undefined' && 'add' in eventjs) {
	        eventjs.add(this.upperCanvasEl, 'gesture', this._onGesture);
	        eventjs.add(this.upperCanvasEl, 'drag', this._onDrag);
	        eventjs.add(this.upperCanvasEl, 'orientation', this._onOrientationChange);
	        eventjs.add(this.upperCanvasEl, 'shake', this._onShake);
	        eventjs.add(this.upperCanvasEl, 'longpress', this._onLongPress);
	      }
	    },

	    /**
	     * @private
	     */
	    _bindEvents: function() {
	      this._onMouseDown = this._onMouseDown.bind(this);
	      this._onMouseMove = this._onMouseMove.bind(this);
	      this._onMouseUp = this._onMouseUp.bind(this);
	      this._onResize = this._onResize.bind(this);
	      this._onGesture = this._onGesture.bind(this);
	      this._onDrag = this._onDrag.bind(this);
	      this._onShake = this._onShake.bind(this);
	      this._onLongPress = this._onLongPress.bind(this);
	      this._onOrientationChange = this._onOrientationChange.bind(this);
	      this._onMouseWheel = this._onMouseWheel.bind(this);
	      this._onMouseOut = this._onMouseOut.bind(this);
	    },

	    /**
	     * Removes all event listeners
	     */
	    removeListeners: function() {
	      removeListener(fabric.window, 'resize', this._onResize);

	      removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);
	      removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);
	      removeListener(this.upperCanvasEl, 'mousewheel', this._onMouseWheel);
	      removeListener(this.upperCanvasEl, 'mouseout', this._onMouseOut);

	      removeListener(this.upperCanvasEl, 'touchstart', this._onMouseDown);
	      removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);

	      if (typeof eventjs !== 'undefined' && 'remove' in eventjs) {
	        eventjs.remove(this.upperCanvasEl, 'gesture', this._onGesture);
	        eventjs.remove(this.upperCanvasEl, 'drag', this._onDrag);
	        eventjs.remove(this.upperCanvasEl, 'orientation', this._onOrientationChange);
	        eventjs.remove(this.upperCanvasEl, 'shake', this._onShake);
	        eventjs.remove(this.upperCanvasEl, 'longpress', this._onLongPress);
	      }
	    },

	    /**
	     * @private
	     * @param {Event} [e] Event object fired on Event.js gesture
	     * @param {Event} [self] Inner Event object
	     */
	    _onGesture: function(e, self) {
	      this.__onTransformGesture && this.__onTransformGesture(e, self);
	    },

	    /**
	     * @private
	     * @param {Event} [e] Event object fired on Event.js drag
	     * @param {Event} [self] Inner Event object
	     */
	    _onDrag: function(e, self) {
	      this.__onDrag && this.__onDrag(e, self);
	    },

	    /**
	     * @private
	     * @param {Event} [e] Event object fired on Event.js wheel event
	     * @param {Event} [self] Inner Event object
	     */
	    _onMouseWheel: function(e, self) {
	      this.__onMouseWheel && this.__onMouseWheel(e, self);
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousedown
	     */
	    _onMouseOut: function(e) {
	      var target = this._hoveredTarget;
	      this.fire('mouse:out', { target: target, e: e });
	      this._hoveredTarget = null;
	      target && target.fire('mouseout', { e: e });
	    },

	    /**
	     * @private
	     * @param {Event} [e] Event object fired on Event.js orientation change
	     * @param {Event} [self] Inner Event object
	     */
	    _onOrientationChange: function(e, self) {
	      this.__onOrientationChange && this.__onOrientationChange(e, self);
	    },

	    /**
	     * @private
	     * @param {Event} [e] Event object fired on Event.js shake
	     * @param {Event} [self] Inner Event object
	     */
	    _onShake: function(e, self) {
	      this.__onShake && this.__onShake(e, self);
	    },

	    /**
	     * @private
	     * @param {Event} [e] Event object fired on Event.js shake
	     * @param {Event} [self] Inner Event object
	     */
	    _onLongPress: function(e, self) {
	      this.__onLongPress && this.__onLongPress(e, self);
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousedown
	     */
	    _onMouseDown: function (e) {
	      this.__onMouseDown(e);

	      addListener(fabric.document, 'touchend', this._onMouseUp);
	      addListener(fabric.document, 'touchmove', this._onMouseMove);

	      removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);
	      removeListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);

	      if (e.type === 'touchstart') {
	        // Unbind mousedown to prevent double triggers from touch devices
	        removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);
	      }
	      else {
	        addListener(fabric.document, 'mouseup', this._onMouseUp);
	        addListener(fabric.document, 'mousemove', this._onMouseMove);
	      }
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mouseup
	     */
	    _onMouseUp: function (e) {
	      this.__onMouseUp(e);

	      removeListener(fabric.document, 'mouseup', this._onMouseUp);
	      removeListener(fabric.document, 'touchend', this._onMouseUp);

	      removeListener(fabric.document, 'mousemove', this._onMouseMove);
	      removeListener(fabric.document, 'touchmove', this._onMouseMove);

	      addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);
	      addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);

	      if (e.type === 'touchend') {
	        // Wait 400ms before rebinding mousedown to prevent double triggers
	        // from touch devices
	        var _this = this;
	        setTimeout(function() {
	          addListener(_this.upperCanvasEl, 'mousedown', _this._onMouseDown);
	        }, 400);
	      }
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousemove
	     */
	    _onMouseMove: function (e) {
	      !this.allowTouchScrolling && e.preventDefault && e.preventDefault();
	      this.__onMouseMove(e);
	    },

	    /**
	     * @private
	     */
	    _onResize: function () {
	      this.calcOffset();
	    },

	    /**
	     * Decides whether the canvas should be redrawn in mouseup and mousedown events.
	     * @private
	     * @param {Object} target
	     * @param {Object} pointer
	     */
	    _shouldRender: function(target, pointer) {
	      var activeObject = this.getActiveGroup() || this.getActiveObject();

	      return !!(
	        (target && (
	          target.isMoving ||
	          target !== activeObject))
	        ||
	        (!target && !!activeObject)
	        ||
	        (!target && !activeObject && !this._groupSelector)
	        ||
	        (pointer &&
	          this._previousPointer &&
	          this.selection && (
	          pointer.x !== this._previousPointer.x ||
	          pointer.y !== this._previousPointer.y))
	      );
	    },

	    /**
	     * Method that defines the actions when mouse is released on canvas.
	     * The method resets the currentTransform parameters, store the image corner
	     * position in the image object and render the canvas on top.
	     * @private
	     * @param {Event} e Event object fired on mouseup
	     */
	    __onMouseUp: function (e) {
	      var target, searchTarget = true, transform = this._currentTransform;

	      if (this.isDrawingMode && this._isCurrentlyDrawing) {
	        this._onMouseUpInDrawingMode(e);
	        return;
	      }

	      if (transform) {
	        this._finalizeCurrentTransform();
	        searchTarget = !transform.actionPerformed;
	      }

	      target = searchTarget ? this.findTarget(e, true) : transform.target;

	      var shouldRender = this._shouldRender(target, this.getPointer(e));

	      this._maybeGroupObjects(e);

	      if (target) {
	        target.isMoving = false;
	      }

	      shouldRender && this.renderAll();

	      this._handleCursorAndEvent(e, target);
	    },

	    _handleCursorAndEvent: function(e, target) {
	      this._setCursorFromEvent(e, target);

	      // Can't find any reason, disabling for now
	      // TODO: why are we doing this?
	      /* var _this = this;
	      setTimeout(function () {
	        _this._setCursorFromEvent(e, target);
	      }, 50); */

	      this.fire('mouse:up', { target: target, e: e });
	      target && target.fire('mouseup', { e: e });
	    },

	    /**
	     * @private
	     */
	    _finalizeCurrentTransform: function() {

	      var transform = this._currentTransform,
	          target = transform.target;

	      if (target._scaling) {
	        target._scaling = false;
	      }

	      target.setCoords();
	      this._restoreOriginXY(target);

	      if (transform.actionPerformed || (this.stateful && target.hasStateChanged())) {
	        this.fire('object:modified', { target: target });
	        target.fire('modified');
	      }
	    },

	    /**
	     * @private
	     * @param {Object} target Object to restore
	     */
	    _restoreOriginXY: function(target) {
	      if (this._previousOriginX && this._previousOriginY) {

	        var originPoint = target.translateToOriginPoint(
	          target.getCenterPoint(),
	          this._previousOriginX,
	          this._previousOriginY);

	        target.originX = this._previousOriginX;
	        target.originY = this._previousOriginY;

	        target.left = originPoint.x;
	        target.top = originPoint.y;

	        this._previousOriginX = null;
	        this._previousOriginY = null;
	      }
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousedown
	     */
	    _onMouseDownInDrawingMode: function(e) {
	      this._isCurrentlyDrawing = true;
	      this.discardActiveObject(e).renderAll();
	      if (this.clipTo) {
	        fabric.util.clipContext(this, this.contextTop);
	      }
	      var ivt = fabric.util.invertTransform(this.viewportTransform),
	          pointer = fabric.util.transformPoint(this.getPointer(e, true), ivt);
	      this.freeDrawingBrush.onMouseDown(pointer);
	      this.fire('mouse:down', { e: e });

	      var target = this.findTarget(e);
	      if (typeof target !== 'undefined') {
	        target.fire('mousedown', { e: e, target: target });
	      }
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mousemove
	     */
	    _onMouseMoveInDrawingMode: function(e) {
	      if (this._isCurrentlyDrawing) {
	        var ivt = fabric.util.invertTransform(this.viewportTransform),
	            pointer = fabric.util.transformPoint(this.getPointer(e, true), ivt);
	        this.freeDrawingBrush.onMouseMove(pointer);
	      }
	      this.setCursor(this.freeDrawingCursor);
	      this.fire('mouse:move', { e: e });

	      var target = this.findTarget(e);
	      if (typeof target !== 'undefined') {
	        target.fire('mousemove', { e: e, target: target });
	      }
	    },

	    /**
	     * @private
	     * @param {Event} e Event object fired on mouseup
	     */
	    _onMouseUpInDrawingMode: function(e) {
	      this._isCurrentlyDrawing = false;
	      if (this.clipTo) {
	        this.contextTop.restore();
	      }
	      this.freeDrawingBrush.onMouseUp();
	      this.fire('mouse:up', { e: e });

	      var target = this.findTarget(e);
	      if (typeof target !== 'undefined') {
	        target.fire('mouseup', { e: e, target: target });
	      }
	    },

	    /**
	     * Method that defines the actions when mouse is clic ked on canvas.
	     * The method inits the currentTransform parameters and renders all the
	     * canvas so the current image can be placed on the top canvas and the rest
	     * in on the container one.
	     * @private
	     * @param {Event} e Event object fired on mousedown
	     */
	    __onMouseDown: function (e) {

	      // accept only left clicks
	      var isLeftClick  = 'which' in e ? e.which === 1 : e.button === 0;
	      if (!isLeftClick && !fabric.isTouchSupported) {
	        return;
	      }

	      if (this.isDrawingMode) {
	        this._onMouseDownInDrawingMode(e);
	        return;
	      }

	      // ignore if some object is being transformed at this moment
	      if (this._currentTransform) {
	        return;
	      }

	      var target = this.findTarget(e),
	          pointer = this.getPointer(e, true);

	      // save pointer for check in __onMouseUp event
	      this._previousPointer = pointer;

	      var shouldRender = this._shouldRender(target, pointer),
	          shouldGroup = this._shouldGroup(e, target);

	      if (this._shouldClearSelection(e, target)) {
	        this._clearSelection(e, target, pointer);
	      }
	      else if (shouldGroup) {
	        this._handleGrouping(e, target);
	        target = this.getActiveGroup();
	      }

	      if (target) {
	        if (target.selectable && (target.__corner || !shouldGroup)) {
	          this._beforeTransform(e, target);
	          this._setupCurrentTransform(e, target);
	        }

	        if (target !== this.getActiveGroup() && target !== this.getActiveObject()) {
	          this.deactivateAll();
	          this.setActiveObject(target, e);
	        }
	      }
	      // we must renderAll so that active image is placed on the top canvas
	      shouldRender && this.renderAll();

	      this.fire('mouse:down', { target: target, e: e });
	      target && target.fire('mousedown', { e: e });
	    },

	    /**
	     * @private
	     */
	    _beforeTransform: function(e, target) {
	      this.stateful && target.saveState();

	      // determine if it's a drag or rotate case
	      if (target._findTargetCorner(this.getPointer(e))) {
	        this.onBeforeScaleRotate(target);
	      }

	    },

	    /**
	     * @private
	     */
	    _clearSelection: function(e, target, pointer) {
	      this.deactivateAllWithDispatch(e);

	      if (target && target.selectable) {
	        this.setActiveObject(target, e);
	      }
	      else if (this.selection) {
	        this._groupSelector = {
	          ex: pointer.x,
	          ey: pointer.y,
	          top: 0,
	          left: 0
	        };
	      }
	    },

	    /**
	     * @private
	     * @param {Object} target Object for that origin is set to center
	     */
	    _setOriginToCenter: function(target) {
	      this._previousOriginX = this._currentTransform.target.originX;
	      this._previousOriginY = this._currentTransform.target.originY;

	      var center = target.getCenterPoint();

	      target.originX = 'center';
	      target.originY = 'center';

	      target.left = center.x;
	      target.top = center.y;

	      this._currentTransform.left = target.left;
	      this._currentTransform.top = target.top;
	    },

	    /**
	     * @private
	     * @param {Object} target Object for that center is set to origin
	     */
	    _setCenterToOrigin: function(target) {
	      var originPoint = target.translateToOriginPoint(
	        target.getCenterPoint(),
	        this._previousOriginX,
	        this._previousOriginY);

	      target.originX = this._previousOriginX;
	      target.originY = this._previousOriginY;

	      target.left = originPoint.x;
	      target.top = originPoint.y;

	      this._previousOriginX = null;
	      this._previousOriginY = null;
	    },

	    /**
	     * Method that defines the actions when mouse is hovering the canvas.
	     * The currentTransform parameter will definde whether the user is rotating/scaling/translating
	     * an image or neither of them (only hovering). A group selection is also possible and would cancel
	     * all any other type of action.
	     * In case of an image transformation only the top canvas will be rendered.
	     * @private
	     * @param {Event} e Event object fired on mousemove
	     */
	    __onMouseMove: function (e) {

	      var target, pointer;

	      if (this.isDrawingMode) {
	        this._onMouseMoveInDrawingMode(e);
	        return;
	      }
	      if (typeof e.touches !== 'undefined' && e.touches.length > 1) {
	        return;
	      }

	      var groupSelector = this._groupSelector;

	      // We initially clicked in an empty area, so we draw a box for multiple selection
	      if (groupSelector) {
	        pointer = this.getPointer(e, true);

	        groupSelector.left = pointer.x - groupSelector.ex;
	        groupSelector.top = pointer.y - groupSelector.ey;

	        this.renderTop();
	      }
	      else if (!this._currentTransform) {

	        target = this.findTarget(e);

	        if (!target || target && !target.selectable) {
	          this.setCursor(this.defaultCursor);
	        }
	        else {
	          this._setCursorFromEvent(e, target);
	        }
	      }
	      else {

	        this._transformObject(e);
	      }

	      this.fire('mouse:move', { target: target, e: e });
	      target && target.fire('mousemove', { e: e });
	    },

	    /**
	     * @private
	     * @param {Event} e Event fired on mousemove
	     */
	    _transformObject: function(e) {
	      var pointer = this.getPointer(e),
	          transform = this._currentTransform;

	      transform.reset = false,
	      transform.target.isMoving = true;

	      this._beforeScaleTransform(e, transform);
	      this._performTransformAction(e, transform, pointer);

	      this.renderAll();
	    },

	    /**
	     * @private
	     */
	    _performTransformAction: function(e, transform, pointer) {
	      var x = pointer.x,
	          y = pointer.y,
	          target = transform.target,
	          action = transform.action,
	          actionPerformed = false;

	      if (action === 'rotate') {
	        (actionPerformed = this._rotateObject(x, y)) && this._fire('rotating', target, e);
	      }
	      else if (action === 'scale') {
	        (actionPerformed = this._onScale(e, transform, x, y)) && this._fire('scaling', target, e);
	      }
	      else if (action === 'scaleX') {
	        (actionPerformed = this._scaleObject(x, y, 'x')) && this._fire('scaling', target, e);
	      }
	      else if (action === 'scaleY') {
	        (actionPerformed = this._scaleObject(x, y, 'y')) && this._fire('scaling', target, e);
	      }
	      else if (action === 'skewX') {
	        (actionPerformed = this._skewObject(x, y, 'x')) && this._fire('skewing', target, e);
	      }
	      else if (action === 'skewY') {
	        (actionPerformed = this._skewObject(x, y, 'y')) && this._fire('skewing', target, e);
	      }
	      else {
	        (actionPerformed = this._translateObject(x, y)) && this._fire('moving', target, e);
	        this.setCursor(this.moveCursor);
	      }
	      transform.actionPerformed = actionPerformed;
	    },

	    /**
	     * @private
	     */
	    _fire: function(eventName, target, e) {
	      this.fire('object:' + eventName, { target: target, e: e });
	      target.fire(eventName, { e: e });
	    },

	    /**
	     * @private
	     */
	    _beforeScaleTransform: function(e, transform) {
	      if (transform.action === 'scale' || transform.action === 'scaleX' || transform.action === 'scaleY') {
	        var centerTransform = this._shouldCenterTransform(transform.target);

	        // Switch from a normal resize to center-based
	        if ((centerTransform && (transform.originX !== 'center' || transform.originY !== 'center')) ||
	           // Switch from center-based resize to normal one
	           (!centerTransform && transform.originX === 'center' && transform.originY === 'center')
	        ) {
	          this._resetCurrentTransform();
	          transform.reset = true;
	        }
	      }
	    },

	    /**
	     * @private
	     * @return {Boolean} true if the scaling occurred
	     */
	    _onScale: function(e, transform, x, y) {
	      // rotate object only if shift key is not pressed
	      // and if it is not a group we are transforming
	      if ((e.shiftKey || this.uniScaleTransform) && !transform.target.get('lockUniScaling')) {
	        transform.currentAction = 'scale';
	        return this._scaleObject(x, y);
	      }
	      else {
	        // Switch from a normal resize to proportional
	        if (!transform.reset && transform.currentAction === 'scale') {
	          this._resetCurrentTransform();
	        }

	        transform.currentAction = 'scaleEqually';
	        return this._scaleObject(x, y, 'equally');
	      }
	    },

	    /**
	     * Sets the cursor depending on where the canvas is being hovered.
	     * Note: very buggy in Opera
	     * @param {Event} e Event object
	     * @param {Object} target Object that the mouse is hovering, if so.
	     */
	    _setCursorFromEvent: function (e, target) {
	      if (!target || !target.selectable) {
	        this.setCursor(this.defaultCursor);
	        return false;
	      }
	      else {
	        var activeGroup = this.getActiveGroup(),
	            // only show proper corner when group selection is not active
	            corner = target._findTargetCorner
	                      && (!activeGroup || !activeGroup.contains(target))
	                      && target._findTargetCorner(this.getPointer(e, true));

	        if (!corner) {
	          this.setCursor(target.hoverCursor || this.hoverCursor);
	        }
	        else {
	          this._setCornerCursor(corner, target, e);
	        }
	      }
	      return true;
	    },

	    /**
	     * @private
	     */
	    _setCornerCursor: function(corner, target, e) {
	      if (corner in cursorOffset) {
	        this.setCursor(this._getRotatedCornerCursor(corner, target, e));
	      }
	      else if (corner === 'mtr' && target.hasRotatingPoint) {
	        this.setCursor(this.rotationCursor);
	      }
	      else {
	        this.setCursor(this.defaultCursor);
	        return false;
	      }
	    },

	    /**
	     * @private
	     */
	    _getRotatedCornerCursor: function(corner, target, e) {
	      var n = Math.round((target.getAngle() % 360) / 45);

	      if (n < 0) {
	        n += 8; // full circle ahead
	      }
	      n += cursorOffset[corner];
	      if (e.shiftKey && cursorOffset[corner] % 2 === 0) {
	        //if we are holding shift and we are on a mx corner...
	        n += 2;
	      }
	      // normalize n to be from 0 to 7
	      n %= 8;

	      return this.cursorMap[n];
	    }
	  });
	})();


	(function() {

	  var min = Math.min,
	      max = Math.max;

	  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */ {

	    /**
	     * @private
	     * @param {Event} e Event object
	     * @param {fabric.Object} target
	     * @return {Boolean}
	     */
	    _shouldGroup: function(e, target) {
	      var activeObject = this.getActiveObject();
	      return e.shiftKey && target && target.selectable &&
	            (this.getActiveGroup() || (activeObject && activeObject !== target))
	            && this.selection;
	    },

	    /**
	     * @private
	     * @param {Event} e Event object
	     * @param {fabric.Object} target
	     */
	    _handleGrouping: function (e, target) {

	      if (target === this.getActiveGroup()) {

	        // if it's a group, find target again, this time skipping group
	        target = this.findTarget(e, true);

	        // if even object is not found, bail out
	        if (!target || target.isType('group')) {
	          return;
	        }
	      }
	      if (this.getActiveGroup()) {
	        this._updateActiveGroup(target, e);
	      }
	      else {
	        this._createActiveGroup(target, e);
	      }

	      if (this._activeGroup) {
	        this._activeGroup.saveCoords();
	      }
	    },

	    /**
	     * @private
	     */
	    _updateActiveGroup: function(target, e) {
	      var activeGroup = this.getActiveGroup();

	      if (activeGroup.contains(target)) {

	        activeGroup.removeWithUpdate(target);
	        target.set('active', false);

	        if (activeGroup.size() === 1) {
	          // remove group alltogether if after removal it only contains 1 object
	          this.discardActiveGroup(e);
	          // activate last remaining object
	          this.setActiveObject(activeGroup.item(0));
	          return;
	        }
	      }
	      else {
	        activeGroup.addWithUpdate(target);
	      }
	      this.fire('selection:created', { target: activeGroup, e: e });
	      activeGroup.set('active', true);
	    },

	    /**
	     * @private
	     */
	    _createActiveGroup: function(target, e) {

	      if (this._activeObject && target !== this._activeObject) {

	        var group = this._createGroup(target);
	        group.addWithUpdate();

	        this.setActiveGroup(group);
	        this._activeObject = null;

	        this.fire('selection:created', { target: group, e: e });
	      }

	      target.set('active', true);
	    },

	    /**
	     * @private
	     * @param {Object} target
	     */
	    _createGroup: function(target) {

	      var objects = this.getObjects(),
	          isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),
	          groupObjects = isActiveLower
	            ? [ this._activeObject, target ]
	            : [ target, this._activeObject ];

	      return new fabric.Group(groupObjects, {
	        canvas: this
	      });
	    },

	    /**
	     * @private
	     * @param {Event} e mouse event
	     */
	    _groupSelectedObjects: function (e) {

	      var group = this._collectObjects();

	      // do not create group for 1 element only
	      if (group.length === 1) {
	        this.setActiveObject(group[0], e);
	      }
	      else if (group.length > 1) {
	        group = new fabric.Group(group.reverse(), {
	          canvas: this
	        });
	        group.addWithUpdate();
	        this.setActiveGroup(group, e);
	        group.saveCoords();
	        this.fire('selection:created', { target: group });
	        this.renderAll();
	      }
	    },

	    /**
	     * @private
	     */
	    _collectObjects: function() {
	      var group = [ ],
	          currentObject,
	          x1 = this._groupSelector.ex,
	          y1 = this._groupSelector.ey,
	          x2 = x1 + this._groupSelector.left,
	          y2 = y1 + this._groupSelector.top,
	          selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),
	          selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),
	          isClick = x1 === x2 && y1 === y2;

	      for (var i = this._objects.length; i--; ) {
	        currentObject = this._objects[i];

	        if (!currentObject || !currentObject.selectable || !currentObject.visible) {
	          continue;
	        }

	        if (currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2) ||
	            currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2) ||
	            currentObject.containsPoint(selectionX1Y1) ||
	            currentObject.containsPoint(selectionX2Y2)
	        ) {
	          currentObject.set('active', true);
	          group.push(currentObject);

	          // only add one object if it's a click
	          if (isClick) {
	            break;
	          }
	        }
	      }

	      return group;
	    },

	    /**
	     * @private
	     */
	    _maybeGroupObjects: function(e) {
	      if (this.selection && this._groupSelector) {
	        this._groupSelectedObjects(e);
	      }

	      var activeGroup = this.getActiveGroup();
	      if (activeGroup) {
	        activeGroup.setObjectsCoords().setCoords();
	        activeGroup.isMoving = false;
	        this.setCursor(this.defaultCursor);
	      }

	      // clear selection and current transformation
	      this._groupSelector = null;
	      this._currentTransform = null;
	    }
	  });

	})();


	fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {

	  /**
	   * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately
	   * @param {Object} [options] Options object
	   * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
	   * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
	   * @param {Number} [options.multiplier=1] Multiplier to scale by
	   * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
	   * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
	   * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
	   * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
	   * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
	   * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}
	   * @example <caption>Generate jpeg dataURL with lower quality</caption>
	   * var dataURL = canvas.toDataURL({
	   *   format: 'jpeg',
	   *   quality: 0.8
	   * });
	   * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>
	   * var dataURL = canvas.toDataURL({
	   *   format: 'png',
	   *   left: 100,
	   *   top: 100,
	   *   width: 200,
	   *   height: 200
	   * });
	   * @example <caption>Generate double scaled png dataURL</caption>
	   * var dataURL = canvas.toDataURL({
	   *   format: 'png',
	   *   multiplier: 2
	   * });
	   */
	  toDataURL: function (options) {
	    options || (options = { });

	    var format = options.format || 'png',
	        quality = options.quality || 1,
	        multiplier = options.multiplier || 1,
	        cropping = {
	          left: options.left,
	          top: options.top,
	          width: options.width,
	          height: options.height
	        };

	    if (this._isRetinaScaling()) {
	      multiplier *= fabric.devicePixelRatio;
	    }

	    if (multiplier !== 1) {
	      return this.__toDataURLWithMultiplier(format, quality, cropping, multiplier);
	    }
	    else {
	      return this.__toDataURL(format, quality, cropping);
	    }
	  },

	  /**
	   * @private
	   */
	  __toDataURL: function(format, quality, cropping) {

	    this.renderAll();

	    var canvasEl = this.contextContainer.canvas,
	        croppedCanvasEl = this.__getCroppedCanvas(canvasEl, cropping);

	    // to avoid common confusion https://github.com/kangax/fabric.js/issues/806
	    if (format === 'jpg') {
	      format = 'jpeg';
	    }

	    var data = (fabric.StaticCanvas.supports('toDataURLWithQuality'))
	              ? (croppedCanvasEl || canvasEl).toDataURL('image/' + format, quality)
	              : (croppedCanvasEl || canvasEl).toDataURL('image/' + format);

	    if (croppedCanvasEl) {
	      croppedCanvasEl = null;
	    }

	    return data;
	  },

	  /**
	   * @private
	   */
	  __getCroppedCanvas: function(canvasEl, cropping) {

	    var croppedCanvasEl,
	        croppedCtx,
	        shouldCrop = 'left' in cropping ||
	                     'top' in cropping ||
	                     'width' in cropping ||
	                     'height' in cropping;

	    if (shouldCrop) {

	      croppedCanvasEl = fabric.util.createCanvasElement();
	      croppedCtx = croppedCanvasEl.getContext('2d');

	      croppedCanvasEl.width = cropping.width || this.width;
	      croppedCanvasEl.height = cropping.height || this.height;

	      croppedCtx.drawImage(canvasEl, -cropping.left || 0, -cropping.top || 0);
	    }

	    return croppedCanvasEl;
	  },

	  /**
	   * @private
	   */
	  __toDataURLWithMultiplier: function(format, quality, cropping, multiplier) {

	    var origWidth = this.getWidth(),
	        origHeight = this.getHeight(),
	        scaledWidth = origWidth * multiplier,
	        scaledHeight = origHeight * multiplier,
	        activeObject = this.getActiveObject(),
	        activeGroup = this.getActiveGroup(),
	        ctx = this.contextContainer;

	    if (multiplier > 1) {
	      this.setDimensions({ width: scaledWidth, height: scaledHeight });
	    }
	    ctx.save();
	    ctx.scale(multiplier / fabric.devicePixelRatio, multiplier / fabric.devicePixelRatio);

	    if (cropping.left) {
	      cropping.left *= multiplier;
	    }
	    if (cropping.top) {
	      cropping.top *= multiplier;
	    }
	    if (cropping.width) {
	      cropping.width *= multiplier;
	    }
	    else if (multiplier < 1) {
	      cropping.width = scaledWidth;
	    }
	    if (cropping.height) {
	      cropping.height *= multiplier;
	    }
	    else if (multiplier < 1) {
	      cropping.height = scaledHeight;
	    }

	    if (activeGroup) {
	      // not removing group due to complications with restoring it with correct state afterwords
	      this._tempRemoveBordersControlsFromGroup(activeGroup);
	    }
	    else if (activeObject && this.deactivateAll) {
	      this.deactivateAll();
	    }

	    var data = this.__toDataURL(format, quality, cropping);

	    // restoring width, height for `renderAll` to draw
	    // background properly (while context is scaled)
	    this.width = origWidth;
	    this.height = origHeight;
	    this.setDimensions({ width: origWidth, height: origHeight });

	    if (activeGroup) {
	      this._restoreBordersControlsOnGroup(activeGroup);
	    }
	    else if (activeObject && this.setActiveObject) {
	      this.setActiveObject(activeObject);
	    }

	    this.contextTop && this.clearContext(this.contextTop);
	    this.renderAll();

	    return data;
	  },

	  /**
	   * Exports canvas element to a dataurl image (allowing to change image size via multiplier).
	   * @deprecated since 1.0.13
	   * @param {String} format (png|jpeg)
	   * @param {Number} multiplier
	   * @param {Number} quality (0..1)
	   * @return {String}
	   */
	  toDataURLWithMultiplier: function (format, multiplier, quality) {
	    return this.toDataURL({
	      format: format,
	      multiplier: multiplier,
	      quality: quality
	    });
	  },

	  /**
	   * @private
	   */
	  _tempRemoveBordersControlsFromGroup: function(group) {
	    group.origHasControls = group.hasControls;
	    group.origBorderColor = group.borderColor;

	    group.hasControls = true;
	    group.borderColor = 'rgba(0,0,0,0)';

	    group.forEachObject(function(o) {
	      o.origBorderColor = o.borderColor;
	      o.borderColor = 'rgba(0,0,0,0)';
	    });
	  },

	  /**
	   * @private
	   */
	  _restoreBordersControlsOnGroup: function(group) {
	    group.hideControls = group.origHideControls;
	    group.borderColor = group.origBorderColor;

	    group.forEachObject(function(o) {
	      o.borderColor = o.origBorderColor;
	      delete o.origBorderColor;
	    });
	  }
	});


	fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {

	  /**
	   * Populates canvas with data from the specified dataless JSON.
	   * JSON format must conform to the one of {@link fabric.Canvas#toDatalessJSON}
	   * @deprecated since 1.2.2
	   * @param {String|Object} json JSON string or object
	   * @param {Function} callback Callback, invoked when json is parsed
	   *                            and corresponding objects (e.g: {@link fabric.Image})
	   *                            are initialized
	   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.
	   * @return {fabric.Canvas} instance
	   * @chainable
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}
	   */
	  loadFromDatalessJSON: function (json, callback, reviver) {
	    return this.loadFromJSON(json, callback, reviver);
	  },

	  /**
	   * Populates canvas with data from the specified JSON.
	   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}
	   * @param {String|Object} json JSON string or object
	   * @param {Function} callback Callback, invoked when json is parsed
	   *                            and corresponding objects (e.g: {@link fabric.Image})
	   *                            are initialized
	   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.
	   * @return {fabric.Canvas} instance
	   * @chainable
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}
	   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}
	   * @example <caption>loadFromJSON</caption>
	   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));
	   * @example <caption>loadFromJSON with reviver</caption>
	   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {
	   *   // `o` = json object
	   *   // `object` = fabric.Object instance
	   *   // ... do some stuff ...
	   * });
	   */
	  loadFromJSON: function (json, callback, reviver) {
	    if (!json) {
	      return;
	    }

	    // serialize if it wasn't already
	    var serialized = (typeof json === 'string')
	      ? JSON.parse(json)
	      : json;

	    this.clear();

	    var _this = this;
	    this._enlivenObjects(serialized.objects, function () {
	      _this._setBgOverlay(serialized, callback);
	    }, reviver);

	    return this;
	  },

	  /**
	   * @private
	   * @param {Object} serialized Object with background and overlay information
	   * @param {Function} callback Invoked after all background and overlay images/patterns loaded
	   */
	  _setBgOverlay: function(serialized, callback) {
	    var _this = this,
	        loaded = {
	          backgroundColor: false,
	          overlayColor: false,
	          backgroundImage: false,
	          overlayImage: false
	        };

	    if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {
	      callback && callback();
	      return;
	    }

	    var cbIfLoaded = function () {
	      if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {
	        _this.renderAll();
	        callback && callback();
	      }
	    };

	    this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);
	    this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);
	    this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);
	    this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);

	    cbIfLoaded();
	  },

	  /**
	   * @private
	   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)
	   * @param {(Object|String)} value Value to set
	   * @param {Object} loaded Set loaded property to true if property is set
	   * @param {Object} callback Callback function to invoke after property is set
	   */
	  __setBgOverlay: function(property, value, loaded, callback) {
	    var _this = this;

	    if (!value) {
	      loaded[property] = true;
	      return;
	    }

	    if (property === 'backgroundImage' || property === 'overlayImage') {
	      fabric.Image.fromObject(value, function(img) {
	        _this[property] = img;
	        loaded[property] = true;
	        callback && callback();
	      });
	    }
	    else {
	      this['set' + fabric.util.string.capitalize(property, true)](value, function() {
	        loaded[property] = true;
	        callback && callback();
	      });
	    }
	  },

	  /**
	   * @private
	   * @param {Array} objects
	   * @param {Function} callback
	   * @param {Function} [reviver]
	   */
	  _enlivenObjects: function (objects, callback, reviver) {
	    var _this = this;

	    if (!objects || objects.length === 0) {
	      callback && callback();
	      return;
	    }

	    var renderOnAddRemove = this.renderOnAddRemove;
	    this.renderOnAddRemove = false;

	    fabric.util.enlivenObjects(objects, function(enlivenedObjects) {
	      enlivenedObjects.forEach(function(obj, index) {
	        _this.insertAt(obj, index, true);
	      });

	      _this.renderOnAddRemove = renderOnAddRemove;
	      callback && callback();
	    }, null, reviver);
	  },

	  /**
	   * @private
	   * @param {String} format
	   * @param {Function} callback
	   */
	  _toDataURL: function (format, callback) {
	    this.clone(function (clone) {
	      callback(clone.toDataURL(format));
	    });
	  },

	  /**
	   * @private
	   * @param {String} format
	   * @param {Number} multiplier
	   * @param {Function} callback
	   */
	  _toDataURLWithMultiplier: function (format, multiplier, callback) {
	    this.clone(function (clone) {
	      callback(clone.toDataURLWithMultiplier(format, multiplier));
	    });
	  },

	  /**
	   * Clones canvas instance
	   * @param {Object} [callback] Receives cloned instance as a first argument
	   * @param {Array} [properties] Array of properties to include in the cloned canvas and children
	   */
	  clone: function (callback, properties) {
	    var data = JSON.stringify(this.toJSON(properties));
	    this.cloneWithoutData(function(clone) {
	      clone.loadFromJSON(data, function() {
	        callback && callback(clone);
	      });
	    });
	  },

	  /**
	   * Clones canvas instance without cloning existing data.
	   * This essentially copies canvas dimensions, clipping properties, etc.
	   * but leaves data empty (so that you can populate it with your own)
	   * @param {Object} [callback] Receives cloned instance as a first argument
	   */
	  cloneWithoutData: function(callback) {
	    var el = fabric.document.createElement('canvas');

	    el.width = this.getWidth();
	    el.height = this.getHeight();

	    var clone = new fabric.Canvas(el);
	    clone.clipTo = this.clipTo;
	    if (this.backgroundImage) {
	      clone.setBackgroundImage(this.backgroundImage.src, function() {
	        clone.renderAll();
	        callback && callback(clone);
	      });
	      clone.backgroundImageOpacity = this.backgroundImageOpacity;
	      clone.backgroundImageStretch = this.backgroundImageStretch;
	    }
	    else {
	      callback && callback(clone);
	    }
	  }
	});


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      toFixed = fabric.util.toFixed,
	      capitalize = fabric.util.string.capitalize,
	      degreesToRadians = fabric.util.degreesToRadians,
	      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');

	  if (fabric.Object) {
	    return;
	  }

	  /**
	   * Root object class from which all 2d shape classes inherit from
	   * @class fabric.Object
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}
	   * @see {@link fabric.Object#initialize} for constructor definition
	   *
	   * @fires added
	   * @fires removed
	   *
	   * @fires selected
	   * @fires modified
	   * @fires rotating
	   * @fires scaling
	   * @fires moving
	   * @fires skewing
	   *
	   * @fires mousedown
	   * @fires mouseup
	   * @fires mouseover
	   * @fires mouseout
	   */
	  fabric.Object = fabric.util.createClass(/** @lends fabric.Object.prototype */ {

	    /**
	     * Retrieves object's {@link fabric.Object#clipTo|clipping function}
	     * @method getClipTo
	     * @memberOf fabric.Object.prototype
	     * @return {Function}
	     */

	    /**
	     * Sets object's {@link fabric.Object#clipTo|clipping function}
	     * @method setClipTo
	     * @memberOf fabric.Object.prototype
	     * @param {Function} clipTo Clipping function
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#transformMatrix|transformMatrix}
	     * @method getTransformMatrix
	     * @memberOf fabric.Object.prototype
	     * @return {Array} transformMatrix
	     */

	    /**
	     * Sets object's {@link fabric.Object#transformMatrix|transformMatrix}
	     * @method setTransformMatrix
	     * @memberOf fabric.Object.prototype
	     * @param {Array} transformMatrix
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#visible|visible} state
	     * @method getVisible
	     * @memberOf fabric.Object.prototype
	     * @return {Boolean} True if visible
	     */

	    /**
	     * Sets object's {@link fabric.Object#visible|visible} state
	     * @method setVisible
	     * @memberOf fabric.Object.prototype
	     * @param {Boolean} value visible value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#shadow|shadow}
	     * @method getShadow
	     * @memberOf fabric.Object.prototype
	     * @return {Object} Shadow instance
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#stroke|stroke}
	     * @method getStroke
	     * @memberOf fabric.Object.prototype
	     * @return {String} stroke value
	     */

	    /**
	     * Sets object's {@link fabric.Object#stroke|stroke}
	     * @method setStroke
	     * @memberOf fabric.Object.prototype
	     * @param {String} value stroke value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#strokeWidth|strokeWidth}
	     * @method getStrokeWidth
	     * @memberOf fabric.Object.prototype
	     * @return {Number} strokeWidth value
	     */

	    /**
	     * Sets object's {@link fabric.Object#strokeWidth|strokeWidth}
	     * @method setStrokeWidth
	     * @memberOf fabric.Object.prototype
	     * @param {Number} value strokeWidth value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#originX|originX}
	     * @method getOriginX
	     * @memberOf fabric.Object.prototype
	     * @return {String} originX value
	     */

	    /**
	     * Sets object's {@link fabric.Object#originX|originX}
	     * @method setOriginX
	     * @memberOf fabric.Object.prototype
	     * @param {String} value originX value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#originY|originY}
	     * @method getOriginY
	     * @memberOf fabric.Object.prototype
	     * @return {String} originY value
	     */

	    /**
	     * Sets object's {@link fabric.Object#originY|originY}
	     * @method setOriginY
	     * @memberOf fabric.Object.prototype
	     * @param {String} value originY value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#fill|fill}
	     * @method getFill
	     * @memberOf fabric.Object.prototype
	     * @return {String} Fill value
	     */

	    /**
	     * Sets object's {@link fabric.Object#fill|fill}
	     * @method setFill
	     * @memberOf fabric.Object.prototype
	     * @param {String} value Fill value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#opacity|opacity}
	     * @method getOpacity
	     * @memberOf fabric.Object.prototype
	     * @return {Number} Opacity value (0-1)
	     */

	    /**
	     * Sets object's {@link fabric.Object#opacity|opacity}
	     * @method setOpacity
	     * @memberOf fabric.Object.prototype
	     * @param {Number} value Opacity value (0-1)
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#angle|angle} (in degrees)
	     * @method getAngle
	     * @memberOf fabric.Object.prototype
	     * @return {Number}
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#top|top position}
	     * @method getTop
	     * @memberOf fabric.Object.prototype
	     * @return {Number} Top value (in pixels)
	     */

	    /**
	     * Sets object's {@link fabric.Object#top|top position}
	     * @method setTop
	     * @memberOf fabric.Object.prototype
	     * @param {Number} value Top value (in pixels)
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#left|left position}
	     * @method getLeft
	     * @memberOf fabric.Object.prototype
	     * @return {Number} Left value (in pixels)
	     */

	    /**
	     * Sets object's {@link fabric.Object#left|left position}
	     * @method setLeft
	     * @memberOf fabric.Object.prototype
	     * @param {Number} value Left value (in pixels)
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#scaleX|scaleX} value
	     * @method getScaleX
	     * @memberOf fabric.Object.prototype
	     * @return {Number} scaleX value
	     */

	    /**
	     * Sets object's {@link fabric.Object#scaleX|scaleX} value
	     * @method setScaleX
	     * @memberOf fabric.Object.prototype
	     * @param {Number} value scaleX value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#scaleY|scaleY} value
	     * @method getScaleY
	     * @memberOf fabric.Object.prototype
	     * @return {Number} scaleY value
	     */

	    /**
	     * Sets object's {@link fabric.Object#scaleY|scaleY} value
	     * @method setScaleY
	     * @memberOf fabric.Object.prototype
	     * @param {Number} value scaleY value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#flipX|flipX} value
	     * @method getFlipX
	     * @memberOf fabric.Object.prototype
	     * @return {Boolean} flipX value
	     */

	    /**
	     * Sets object's {@link fabric.Object#flipX|flipX} value
	     * @method setFlipX
	     * @memberOf fabric.Object.prototype
	     * @param {Boolean} value flipX value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Retrieves object's {@link fabric.Object#flipY|flipY} value
	     * @method getFlipY
	     * @memberOf fabric.Object.prototype
	     * @return {Boolean} flipY value
	     */

	    /**
	     * Sets object's {@link fabric.Object#flipY|flipY} value
	     * @method setFlipY
	     * @memberOf fabric.Object.prototype
	     * @param {Boolean} value flipY value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */

	    /**
	     * Type of an object (rect, circle, path, etc.).
	     * Note that this property is meant to be read-only and not meant to be modified.
	     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.
	     * @type String
	     * @default
	     */
	    type:                     'object',

	    /**
	     * Horizontal origin of transformation of an object (one of "left", "right", "center")
	     * See http://jsfiddle.net/1ow02gea/40/ on how originX/originY affect objects in groups
	     * @type String
	     * @default
	     */
	    originX:                  'left',

	    /**
	     * Vertical origin of transformation of an object (one of "top", "bottom", "center")
	     * See http://jsfiddle.net/1ow02gea/40/ on how originX/originY affect objects in groups
	     * @type String
	     * @default
	     */
	    originY:                  'top',

	    /**
	     * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}
	     * @type Number
	     * @default
	     */
	    top:                      0,

	    /**
	     * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}
	     * @type Number
	     * @default
	     */
	    left:                     0,

	    /**
	     * Object width
	     * @type Number
	     * @default
	     */
	    width:                    0,

	    /**
	     * Object height
	     * @type Number
	     * @default
	     */
	    height:                   0,

	    /**
	     * Object scale factor (horizontal)
	     * @type Number
	     * @default
	     */
	    scaleX:                   1,

	    /**
	     * Object scale factor (vertical)
	     * @type Number
	     * @default
	     */
	    scaleY:                   1,

	    /**
	     * When true, an object is rendered as flipped horizontally
	     * @type Boolean
	     * @default
	     */
	    flipX:                    false,

	    /**
	     * When true, an object is rendered as flipped vertically
	     * @type Boolean
	     * @default
	     */
	    flipY:                    false,

	    /**
	     * Opacity of an object
	     * @type Number
	     * @default
	     */
	    opacity:                  1,

	    /**
	     * Angle of rotation of an object (in degrees)
	     * @type Number
	     * @default
	     */
	    angle:                    0,

	    /**
	     * Angle of skew on x axes of an object (in degrees)
	     * @type Number
	     * @default
	     */
	    skewX:                    0,

	    /**
	     * Angle of skew on y axes of an object (in degrees)
	     * @type Number
	     * @default
	     */
	    skewY:                    0,

	    /**
	     * Size of object's controlling corners (in pixels)
	     * @type Number
	     * @default
	     */
	    cornerSize:               12,

	    /**
	     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)
	     * @type Boolean
	     * @default
	     */
	    transparentCorners:       true,

	    /**
	     * Default cursor value used when hovering over this object on canvas
	     * @type String
	     * @default
	     */
	    hoverCursor:              null,

	    /**
	     * Padding between object and its controlling borders (in pixels)
	     * @type Number
	     * @default
	     */
	    padding:                  0,

	    /**
	     * Color of controlling borders of an object (when it's active)
	     * @type String
	     * @default
	     */
	    borderColor:              'rgba(102,153,255,0.75)',

	    /**
	     * Color of controlling corners of an object (when it's active)
	     * @type String
	     * @default
	     */
	    cornerColor:              'rgba(102,153,255,0.5)',

	    /**
	     * When true, this object will use center point as the origin of transformation
	     * when being scaled via the controls.
	     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
	     * @since 1.3.4
	     * @type Boolean
	     * @default
	     */
	    centeredScaling:          false,

	    /**
	     * When true, this object will use center point as the origin of transformation
	     * when being rotated via the controls.
	     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
	     * @since 1.3.4
	     * @type Boolean
	     * @default
	     */
	    centeredRotation:         true,

	    /**
	     * Color of object's fill
	     * @type String
	     * @default
	     */
	    fill:                     'rgb(0,0,0)',

	    /**
	     * Fill rule used to fill an object
	     * accepted values are nonzero, evenodd
	     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)
	     * @type String
	     * @default
	     */
	    fillRule:                 'nonzero',

	    /**
	     * Composite rule used for canvas globalCompositeOperation
	     * @type String
	     * @default
	     */
	    globalCompositeOperation: 'source-over',

	    /**
	     * Background color of an object. Only works with text objects at the moment.
	     * @type String
	     * @default
	     */
	    backgroundColor:          '',

	    /**
	     * When defined, an object is rendered via stroke and this property specifies its color
	     * @type String
	     * @default
	     */
	    stroke:                   null,

	    /**
	     * Width of a stroke used to render this object
	     * @type Number
	     * @default
	     */
	    strokeWidth:              1,

	    /**
	     * Array specifying dash pattern of an object's stroke (stroke must be defined)
	     * @type Array
	     */
	    strokeDashArray:          null,

	    /**
	     * Line endings style of an object's stroke (one of "butt", "round", "square")
	     * @type String
	     * @default
	     */
	    strokeLineCap:            'butt',

	    /**
	     * Corner style of an object's stroke (one of "bevil", "round", "miter")
	     * @type String
	     * @default
	     */
	    strokeLineJoin:           'miter',

	    /**
	     * Maximum miter length (used for strokeLineJoin = "miter") of an object's stroke
	     * @type Number
	     * @default
	     */
	    strokeMiterLimit:         10,

	    /**
	     * Shadow object representing shadow of this shape
	     * @type fabric.Shadow
	     * @default
	     */
	    shadow:                   null,

	    /**
	     * Opacity of object's controlling borders when object is active and moving
	     * @type Number
	     * @default
	     */
	    borderOpacityWhenMoving:  0.4,

	    /**
	     * Scale factor of object's controlling borders
	     * @type Number
	     * @default
	     */
	    borderScaleFactor:        1,

	    /**
	     * Transform matrix (similar to SVG's transform matrix)
	     * @type Array
	     */
	    transformMatrix:          null,

	    /**
	     * Minimum allowed scale value of an object
	     * @type Number
	     * @default
	     */
	    minScaleLimit:            0.01,

	    /**
	     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).
	     * But events still fire on it.
	     * @type Boolean
	     * @default
	     */
	    selectable:               true,

	    /**
	     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4
	     * @type Boolean
	     * @default
	     */
	    evented:                  true,

	    /**
	     * When set to `false`, an object is not rendered on canvas
	     * @type Boolean
	     * @default
	     */
	    visible:                  true,

	    /**
	     * When set to `false`, object's controls are not displayed and can not be used to manipulate object
	     * @type Boolean
	     * @default
	     */
	    hasControls:              true,

	    /**
	     * When set to `false`, object's controlling borders are not rendered
	     * @type Boolean
	     * @default
	     */
	    hasBorders:               true,

	    /**
	     * When set to `false`, object's controlling rotating point will not be visible or selectable
	     * @type Boolean
	     * @default
	     */
	    hasRotatingPoint:         true,

	    /**
	     * Offset for object's controlling rotating point (when enabled via `hasRotatingPoint`)
	     * @type Number
	     * @default
	     */
	    rotatingPointOffset:      40,

	    /**
	     * When set to `true`, objects are "found" on canvas on per-pixel basis rather than according to bounding box
	     * @type Boolean
	     * @default
	     */
	    perPixelTargetFind:       false,

	    /**
	     * When `false`, default object's values are not included in its serialization
	     * @type Boolean
	     * @default
	     */
	    includeDefaultValues:     true,

	    /**
	     * Function that determines clipping of an object (context is passed as a first argument)
	     * Note that context origin is at the object's center point (not left/top corner)
	     * @type Function
	     */
	    clipTo:                   null,

	    /**
	     * When `true`, object horizontal movement is locked
	     * @type Boolean
	     * @default
	     */
	    lockMovementX:            false,

	    /**
	     * When `true`, object vertical movement is locked
	     * @type Boolean
	     * @default
	     */
	    lockMovementY:            false,

	    /**
	     * When `true`, object rotation is locked
	     * @type Boolean
	     * @default
	     */
	    lockRotation:             false,

	    /**
	     * When `true`, object horizontal scaling is locked
	     * @type Boolean
	     * @default
	     */
	    lockScalingX:             false,

	    /**
	     * When `true`, object vertical scaling is locked
	     * @type Boolean
	     * @default
	     */
	    lockScalingY:             false,

	    /**
	     * When `true`, object non-uniform scaling is locked
	     * @type Boolean
	     * @default
	     */
	    lockUniScaling:           false,

	    /**
	     * When `true`, object horizontal skewing is locked
	     * @type Boolean
	     * @default
	     */
	    lockSkewingX:             false,

	    /**
	     * When `true`, object vertical skewing is locked
	     * @type Boolean
	     * @default
	     */
	    lockSkewingY:             false,

	    /**
	     * When `true`, object cannot be flipped by scaling into negative values
	     * @type Boolean
	     * @default
	     */

	    lockScalingFlip:          false,
	    /**
	     * List of properties to consider when checking if state
	     * of an object is changed (fabric.Object#hasStateChanged)
	     * as well as for history (undo/redo) purposes
	     * @type Array
	     */
	    stateProperties:  (
	      'top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' +
	      'stroke strokeWidth strokeDashArray strokeLineCap strokeLineJoin strokeMiterLimit ' +
	      'angle opacity fill fillRule globalCompositeOperation shadow clipTo visible backgroundColor ' +
	      'alignX alignY meetOrSlice skewX skewY'
	    ).split(' '),

	    /**
	     * Constructor
	     * @param {Object} [options] Options object
	     */
	    initialize: function(options) {
	      if (options) {
	        this.setOptions(options);
	      }
	    },

	    /**
	     * @private
	     * @param {Object} [options] Options object
	     */
	    _initGradient: function(options) {
	      if (options.fill && options.fill.colorStops && !(options.fill instanceof fabric.Gradient)) {
	        this.set('fill', new fabric.Gradient(options.fill));
	      }
	      if (options.stroke && options.stroke.colorStops && !(options.stroke instanceof fabric.Gradient)) {
	        this.set('stroke', new fabric.Gradient(options.stroke));
	      }
	    },

	    /**
	     * @private
	     * @param {Object} [options] Options object
	     */
	    _initPattern: function(options) {
	      if (options.fill && options.fill.source && !(options.fill instanceof fabric.Pattern)) {
	        this.set('fill', new fabric.Pattern(options.fill));
	      }
	      if (options.stroke && options.stroke.source && !(options.stroke instanceof fabric.Pattern)) {
	        this.set('stroke', new fabric.Pattern(options.stroke));
	      }
	    },

	    /**
	     * @private
	     * @param {Object} [options] Options object
	     */
	    _initClipping: function(options) {
	      if (!options.clipTo || typeof options.clipTo !== 'string') {
	        return;
	      }

	      var functionBody = fabric.util.getFunctionBody(options.clipTo);
	      if (typeof functionBody !== 'undefined') {
	        this.clipTo = new Function('ctx', functionBody);
	      }
	    },

	    /**
	     * Sets object's properties from options
	     * @param {Object} [options] Options object
	     */
	    setOptions: function(options) {
	      for (var prop in options) {
	        this.set(prop, options[prop]);
	      }
	      this._initGradient(options);
	      this._initPattern(options);
	      this._initClipping(options);
	    },

	    /**
	     * Transforms context when rendering an object
	     * @param {CanvasRenderingContext2D} ctx Context
	     * @param {Boolean} fromLeft When true, context is transformed to object's top/left corner. This is used when rendering text on Node
	     */
	    transform: function(ctx, fromLeft) {
	      if (this.group && this.canvas.preserveObjectStacking && this.group === this.canvas._activeGroup) {
	        this.group.transform(ctx);
	      }
	      var center = fromLeft ? this._getLeftTopCoords() : this.getCenterPoint();
	      ctx.translate(center.x, center.y);
	      ctx.rotate(degreesToRadians(this.angle));
	      ctx.scale(
	        this.scaleX * (this.flipX ? -1 : 1),
	        this.scaleY * (this.flipY ? -1 : 1)
	      );
	      ctx.transform(1, 0, Math.tan(degreesToRadians(this.skewX)), 1, 0, 0);
	      ctx.transform(1, Math.tan(degreesToRadians(this.skewY)), 0, 1, 0, 0);
	    },

	    /**
	     * Returns an object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,

	          object = {
	            type:                     this.type,
	            originX:                  this.originX,
	            originY:                  this.originY,
	            left:                     toFixed(this.left, NUM_FRACTION_DIGITS),
	            top:                      toFixed(this.top, NUM_FRACTION_DIGITS),
	            width:                    toFixed(this.width, NUM_FRACTION_DIGITS),
	            height:                   toFixed(this.height, NUM_FRACTION_DIGITS),
	            fill:                     (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,
	            stroke:                   (this.stroke && this.stroke.toObject) ? this.stroke.toObject() : this.stroke,
	            strokeWidth:              toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),
	            strokeDashArray:          this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,
	            strokeLineCap:            this.strokeLineCap,
	            strokeLineJoin:           this.strokeLineJoin,
	            strokeMiterLimit:         toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),
	            scaleX:                   toFixed(this.scaleX, NUM_FRACTION_DIGITS),
	            scaleY:                   toFixed(this.scaleY, NUM_FRACTION_DIGITS),
	            angle:                    toFixed(this.getAngle(), NUM_FRACTION_DIGITS),
	            flipX:                    this.flipX,
	            flipY:                    this.flipY,
	            opacity:                  toFixed(this.opacity, NUM_FRACTION_DIGITS),
	            shadow:                   (this.shadow && this.shadow.toObject) ? this.shadow.toObject() : this.shadow,
	            visible:                  this.visible,
	            clipTo:                   this.clipTo && String(this.clipTo),
	            backgroundColor:          this.backgroundColor,
	            fillRule:                 this.fillRule,
	            globalCompositeOperation: this.globalCompositeOperation,
	            transformMatrix:          this.transformMatrix ? this.transformMatrix.concat() : this.transformMatrix,
	            skewX:                    toFixed(this.skewX, NUM_FRACTION_DIGITS),
	            skewY:                    toFixed(this.skewY, NUM_FRACTION_DIGITS)
	          };

	      if (!this.includeDefaultValues) {
	        object = this._removeDefaultValues(object);
	      }

	      fabric.util.populateWithProperties(this, object, propertiesToInclude);

	      return object;
	    },

	    /**
	     * Returns (dataless) object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} Object representation of an instance
	     */
	    toDatalessObject: function(propertiesToInclude) {
	      // will be overwritten by subclasses
	      return this.toObject(propertiesToInclude);
	    },

	    /**
	     * @private
	     * @param {Object} object
	     */
	    _removeDefaultValues: function(object) {
	      var prototype = fabric.util.getKlass(object.type).prototype,
	          stateProperties = prototype.stateProperties;

	      stateProperties.forEach(function(prop) {
	        if (object[prop] === prototype[prop]) {
	          delete object[prop];
	        }
	        var isArray = Object.prototype.toString.call(object[prop]) === '[object Array]' &&
	                      Object.prototype.toString.call(prototype[prop]) === '[object Array]';

	        // basically a check for [] === []
	        if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {
	          delete object[prop];
	        }
	      });

	      return object;
	    },

	    /**
	     * Returns a string representation of an instance
	     * @return {String}
	     */
	    toString: function() {
	      return '#<fabric.' + capitalize(this.type) + '>';
	    },

	    /**
	     * Basic getter
	     * @param {String} property Property name
	     * @return {Any} value of a property
	     */
	    get: function(property) {
	      return this[property];
	    },

	    /**
	     * @private
	     */
	    _setObject: function(obj) {
	      for (var prop in obj) {
	        this._set(prop, obj[prop]);
	      }
	    },

	    /**
	     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.
	     * @param {String|Object} key Property name or object (if object, iterate over the object properties)
	     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    set: function(key, value) {
	      if (typeof key === 'object') {
	        this._setObject(key);
	      }
	      else {
	        if (typeof value === 'function' && key !== 'clipTo') {
	          this._set(key, value(this.get(key)));
	        }
	        else {
	          this._set(key, value);
	        }
	      }
	      return this;
	    },

	    /**
	     * @private
	     * @param {String} key
	     * @param {Any} value
	     * @return {fabric.Object} thisArg
	     */
	    _set: function(key, value) {
	      var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY');

	      if (shouldConstrainValue) {
	        value = this._constrainScale(value);
	      }
	      if (key === 'scaleX' && value < 0) {
	        this.flipX = !this.flipX;
	        value *= -1;
	      }
	      else if (key === 'scaleY' && value < 0) {
	        this.flipY = !this.flipY;
	        value *= -1;
	      }
	      else if (key === 'width' || key === 'height') {
	        this.minScaleLimit = toFixed(Math.min(0.1, 1/Math.max(this.width, this.height)), 2);
	      }
	      else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {
	        value = new fabric.Shadow(value);
	      }

	      this[key] = value;

	      return this;
	    },

	    /**
	     * This callback function is called by the parent group of an object every
	     * time a non-delegated property changes on the group. It is passed the key
	     * and value as parameters. Not adding in this function's signature to avoid
	     * Travis build error about unused variables.
	     */
	    setOnGroup: function() {
	      // implemented by sub-classes, as needed.
	    },

	    /**
	     * Toggles specified property from `true` to `false` or from `false` to `true`
	     * @param {String} property Property to toggle
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    toggle: function(property) {
	      var value = this.get(property);
	      if (typeof value === 'boolean') {
	        this.set(property, !value);
	      }
	      return this;
	    },

	    /**
	     * Sets sourcePath of an object
	     * @param {String} value Value to set sourcePath to
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    setSourcePath: function(value) {
	      this.sourcePath = value;
	      return this;
	    },

	    /**
	     * Retrieves viewportTransform from Object's canvas if possible
	     * @method getViewportTransform
	     * @memberOf fabric.Object.prototype
	     * @return {Boolean} flipY value // TODO
	     */
	    getViewportTransform: function() {
	      if (this.canvas && this.canvas.viewportTransform) {
	        return this.canvas.viewportTransform;
	      }
	      return [1, 0, 0, 1, 0, 0];
	    },

	    /**
	     * Renders an object on a specified context
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Boolean} [noTransform] When true, context is not transformed
	     */
	    render: function(ctx, noTransform) {
	      // do not render if width/height are zeros or object is not visible
	      if ((this.width === 0 && this.height === 0) || !this.visible) {
	        return;
	      }

	      ctx.save();

	      //setup fill rule for current object
	      this._setupCompositeOperation(ctx);
	      if (!noTransform) {
	        this.transform(ctx);
	      }
	      this._setStrokeStyles(ctx);
	      this._setFillStyles(ctx);
	      if (this.transformMatrix) {
	        ctx.transform.apply(ctx, this.transformMatrix);
	      }
	      this._setOpacity(ctx);
	      this._setShadow(ctx);
	      this.clipTo && fabric.util.clipContext(this, ctx);
	      this._render(ctx, noTransform);
	      this.clipTo && ctx.restore();

	      ctx.restore();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _setOpacity: function(ctx) {
	      if (this.group) {
	        this.group._setOpacity(ctx);
	      }
	      ctx.globalAlpha *= this.opacity;
	    },

	    _setStrokeStyles: function(ctx) {
	      if (this.stroke) {
	        ctx.lineWidth = this.strokeWidth;
	        ctx.lineCap = this.strokeLineCap;
	        ctx.lineJoin = this.strokeLineJoin;
	        ctx.miterLimit = this.strokeMiterLimit;
	        ctx.strokeStyle = this.stroke.toLive
	          ? this.stroke.toLive(ctx, this)
	          : this.stroke;
	      }
	    },

	    _setFillStyles: function(ctx) {
	      if (this.fill) {
	        ctx.fillStyle = this.fill.toLive
	          ? this.fill.toLive(ctx, this)
	          : this.fill;
	      }
	    },

	    /**
	     * Renders controls and borders for the object
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Boolean} [noTransform] When true, context is not transformed
	     */
	    _renderControls: function(ctx, noTransform) {
	      if (!this.active || noTransform
	          || (this.group && this.group !== this.canvas.getActiveGroup())) {
	        return;
	      }

	      var vpt = this.getViewportTransform(),
	          matrix = this.calcTransformMatrix(),
	          options;
	      matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);
	      options = fabric.util.qrDecompose(matrix);
	      ctx.save();
	      ctx.translate(options.translateX, options.translateY);
	      if (this.group && this.group === this.canvas.getActiveGroup()) {
	        ctx.rotate(degreesToRadians(options.angle));
	        this.drawBordersInGroup(ctx, options);
	      }
	      else {
	        ctx.rotate(degreesToRadians(this.angle));
	        this.drawBorders(ctx);
	      }
	      this.drawControls(ctx);
	      ctx.restore();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _setShadow: function(ctx) {
	      if (!this.shadow) {
	        return;
	      }

	      var multX = (this.canvas && this.canvas.viewportTransform[0]) || 1,
	          multY = (this.canvas && this.canvas.viewportTransform[3]) || 1;
	      if (this.canvas && this.canvas._isRetinaScaling()) {
	        multX *= fabric.devicePixelRatio;
	        multY *= fabric.devicePixelRatio;
	      }
	      ctx.shadowColor = this.shadow.color;
	      ctx.shadowBlur = this.shadow.blur * (multX + multY) * (this.scaleX + this.scaleY) / 4;
	      ctx.shadowOffsetX = this.shadow.offsetX * multX * this.scaleX;
	      ctx.shadowOffsetY = this.shadow.offsetY * multY * this.scaleY;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _removeShadow: function(ctx) {
	      if (!this.shadow) {
	        return;
	      }

	      ctx.shadowColor = '';
	      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderFill: function(ctx) {
	      if (!this.fill) {
	        return;
	      }

	      ctx.save();
	      if (this.fill.gradientTransform) {
	        var g = this.fill.gradientTransform;
	        ctx.transform.apply(ctx, g);
	      }
	      if (this.fill.toLive) {
	        ctx.translate(
	          -this.width / 2 + this.fill.offsetX || 0,
	          -this.height / 2 + this.fill.offsetY || 0);
	      }
	      if (this.fillRule === 'evenodd') {
	        ctx.fill('evenodd');
	      }
	      else {
	        ctx.fill();
	      }
	      ctx.restore();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderStroke: function(ctx) {
	      if (!this.stroke || this.strokeWidth === 0) {
	        return;
	      }

	      if (this.shadow && !this.shadow.affectStroke) {
	        this._removeShadow(ctx);
	      }

	      ctx.save();

	      if (this.strokeDashArray) {
	        // Spec requires the concatenation of two copies the dash list when the number of elements is odd
	        if (1 & this.strokeDashArray.length) {
	          this.strokeDashArray.push.apply(this.strokeDashArray, this.strokeDashArray);
	        }
	        if (supportsLineDash) {
	          ctx.setLineDash(this.strokeDashArray);
	          this._stroke && this._stroke(ctx);
	        }
	        else {
	          this._renderDashedStroke && this._renderDashedStroke(ctx);
	        }
	        ctx.stroke();
	      }
	      else {
	        if (this.stroke.gradientTransform) {
	          var g = this.stroke.gradientTransform;
	          ctx.transform.apply(ctx, g);
	        }
	        this._stroke ? this._stroke(ctx) : ctx.stroke();
	      }
	      ctx.restore();
	    },

	    /**
	     * Clones an instance
	     * @param {Function} callback Callback is invoked with a clone as a first argument
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {fabric.Object} clone of an instance
	     */
	    clone: function(callback, propertiesToInclude) {
	      if (this.constructor.fromObject) {
	        return this.constructor.fromObject(this.toObject(propertiesToInclude), callback);
	      }
	      return new fabric.Object(this.toObject(propertiesToInclude));
	    },

	    /**
	     * Creates an instance of fabric.Image out of an object
	     * @param {Function} callback callback, invoked with an instance as a first argument
	     * @return {fabric.Object} thisArg
	     */
	    cloneAsImage: function(callback) {
	      var dataUrl = this.toDataURL();
	      fabric.util.loadImage(dataUrl, function(img) {
	        if (callback) {
	          callback(new fabric.Image(img));
	        }
	      });
	      return this;
	    },

	    /**
	     * Converts an object into a data-url-like string
	     * @param {Object} options Options object
	     * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
	     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
	     * @param {Number} [options.multiplier=1] Multiplier to scale by
	     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
	     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
	     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
	     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
	     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
	     */
	    toDataURL: function(options) {
	      options || (options = { });

	      var el = fabric.util.createCanvasElement(),
	          boundingRect = this.getBoundingRect();

	      el.width = boundingRect.width;
	      el.height = boundingRect.height;

	      fabric.util.wrapElement(el, 'div');
	      var canvas = new fabric.StaticCanvas(el);

	      // to avoid common confusion https://github.com/kangax/fabric.js/issues/806
	      if (options.format === 'jpg') {
	        options.format = 'jpeg';
	      }

	      if (options.format === 'jpeg') {
	        canvas.backgroundColor = '#fff';
	      }

	      var origParams = {
	        active: this.get('active'),
	        left: this.getLeft(),
	        top: this.getTop()
	      };

	      this.set('active', false);
	      this.setPositionByOrigin(new fabric.Point(el.width / 2, el.height / 2), 'center', 'center');

	      var originalCanvas = this.canvas;
	      canvas.add(this);
	      var data = canvas.toDataURL(options);

	      this.set(origParams).setCoords();
	      this.canvas = originalCanvas;

	      canvas.dispose();
	      canvas = null;

	      return data;
	    },

	    /**
	     * Returns true if specified type is identical to the type of an instance
	     * @param {String} type Type to check against
	     * @return {Boolean}
	     */
	    isType: function(type) {
	      return this.type === type;
	    },

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity of this instance
	     */
	    complexity: function() {
	      return 0;
	    },

	    /**
	     * Returns a JSON representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} JSON
	     */
	    toJSON: function(propertiesToInclude) {
	      // delegate, not alias
	      return this.toObject(propertiesToInclude);
	    },

	    /**
	     * Sets gradient (fill or stroke) of an object
	     * <b>Backwards incompatibility note:</b> This method was named "setGradientFill" until v1.1.0
	     * @param {String} property Property name 'stroke' or 'fill'
	     * @param {Object} [options] Options object
	     * @param {String} [options.type] Type of gradient 'radial' or 'linear'
	     * @param {Number} [options.x1=0] x-coordinate of start point
	     * @param {Number} [options.y1=0] y-coordinate of start point
	     * @param {Number} [options.x2=0] x-coordinate of end point
	     * @param {Number} [options.y2=0] y-coordinate of end point
	     * @param {Number} [options.r1=0] Radius of start point (only for radial gradients)
	     * @param {Number} [options.r2=0] Radius of end point (only for radial gradients)
	     * @param {Object} [options.colorStops] Color stops object eg. {0: 'ff0000', 1: '000000'}
	     * @param {Object} [options.gradientTransform] transforMatrix for gradient
	     * @return {fabric.Object} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/fabricjs/58y8b/|jsFiddle demo}
	     * @example <caption>Set linear gradient</caption>
	     * object.setGradient('fill', {
	     *   type: 'linear',
	     *   x1: -object.width / 2,
	     *   y1: 0,
	     *   x2: object.width / 2,
	     *   y2: 0,
	     *   colorStops: {
	     *     0: 'red',
	     *     0.5: '#005555',
	     *     1: 'rgba(0,0,255,0.5)'
	     *   }
	     * });
	     * canvas.renderAll();
	     * @example <caption>Set radial gradient</caption>
	     * object.setGradient('fill', {
	     *   type: 'radial',
	     *   x1: 0,
	     *   y1: 0,
	     *   x2: 0,
	     *   y2: 0,
	     *   r1: object.width / 2,
	     *   r2: 10,
	     *   colorStops: {
	     *     0: 'red',
	     *     0.5: '#005555',
	     *     1: 'rgba(0,0,255,0.5)'
	     *   }
	     * });
	     * canvas.renderAll();
	     */
	    setGradient: function(property, options) {
	      options || (options = { });

	      var gradient = { colorStops: [] };

	      gradient.type = options.type || (options.r1 || options.r2 ? 'radial' : 'linear');
	      gradient.coords = {
	        x1: options.x1,
	        y1: options.y1,
	        x2: options.x2,
	        y2: options.y2
	      };

	      if (options.r1 || options.r2) {
	        gradient.coords.r1 = options.r1;
	        gradient.coords.r2 = options.r2;
	      }

	      options.gradientTransform && (gradient.gradientTransform = options.gradientTransform);

	      for (var position in options.colorStops) {
	        var color = new fabric.Color(options.colorStops[position]);
	        gradient.colorStops.push({
	          offset: position,
	          color: color.toRgb(),
	          opacity: color.getAlpha()
	        });
	      }

	      return this.set(property, fabric.Gradient.forObject(this, gradient));
	    },

	    /**
	     * Sets pattern fill of an object
	     * @param {Object} options Options object
	     * @param {(String|HTMLImageElement)} options.source Pattern source
	     * @param {String} [options.repeat=repeat] Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)
	     * @param {Number} [options.offsetX=0] Pattern horizontal offset from object's left/top corner
	     * @param {Number} [options.offsetY=0] Pattern vertical offset from object's left/top corner
	     * @return {fabric.Object} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/fabricjs/QT3pa/|jsFiddle demo}
	     * @example <caption>Set pattern</caption>
	     * fabric.util.loadImage('http://fabricjs.com/assets/escheresque_ste.png', function(img) {
	     *   object.setPatternFill({
	     *     source: img,
	     *     repeat: 'repeat'
	     *   });
	     *   canvas.renderAll();
	     * });
	     */
	    setPatternFill: function(options) {
	      return this.set('fill', new fabric.Pattern(options));
	    },

	    /**
	     * Sets {@link fabric.Object#shadow|shadow} of an object
	     * @param {Object|String} [options] Options object or string (e.g. "2px 2px 10px rgba(0,0,0,0.2)")
	     * @param {String} [options.color=rgb(0,0,0)] Shadow color
	     * @param {Number} [options.blur=0] Shadow blur
	     * @param {Number} [options.offsetX=0] Shadow horizontal offset
	     * @param {Number} [options.offsetY=0] Shadow vertical offset
	     * @return {fabric.Object} thisArg
	     * @chainable
	     * @see {@link http://jsfiddle.net/fabricjs/7gvJG/|jsFiddle demo}
	     * @example <caption>Set shadow with string notation</caption>
	     * object.setShadow('2px 2px 10px rgba(0,0,0,0.2)');
	     * canvas.renderAll();
	     * @example <caption>Set shadow with object notation</caption>
	     * object.setShadow({
	     *   color: 'red',
	     *   blur: 10,
	     *   offsetX: 20,
	     *   offsetY: 20
	     * });
	     * canvas.renderAll();
	     */
	    setShadow: function(options) {
	      return this.set('shadow', options ? new fabric.Shadow(options) : null);
	    },

	    /**
	     * Sets "color" of an instance (alias of `set('fill', &hellip;)`)
	     * @param {String} color Color value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    setColor: function(color) {
	      this.set('fill', color);
	      return this;
	    },

	    /**
	     * Sets "angle" of an instance
	     * @param {Number} angle Angle value (in degrees)
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    setAngle: function(angle) {
	      var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;

	      if (shouldCenterOrigin) {
	        this._setOriginToCenter();
	      }

	      this.set('angle', angle);

	      if (shouldCenterOrigin) {
	        this._resetOrigin();
	      }

	      return this;
	    },

	    /**
	     * Centers object horizontally on canvas to which it was added last.
	     * You might need to call `setCoords` on an object after centering, to update controls area.
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    centerH: function () {
	      this.canvas.centerObjectH(this);
	      return this;
	    },

	    /**
	     * Centers object vertically on canvas to which it was added last.
	     * You might need to call `setCoords` on an object after centering, to update controls area.
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    centerV: function () {
	      this.canvas.centerObjectV(this);
	      return this;
	    },

	    /**
	     * Centers object vertically and horizontally on canvas to which is was added last
	     * You might need to call `setCoords` on an object after centering, to update controls area.
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    center: function () {
	      this.canvas.centerObject(this);
	      return this;
	    },

	    /**
	     * Removes object from canvas to which it was added last
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    remove: function() {
	      this.canvas.remove(this);
	      return this;
	    },

	    /**
	     * Returns coordinates of a pointer relative to an object
	     * @param {Event} e Event to operate upon
	     * @param {Object} [pointer] Pointer to operate upon (instead of event)
	     * @return {Object} Coordinates of a pointer (x, y)
	     */
	    getLocalPointer: function(e, pointer) {
	      pointer = pointer || this.canvas.getPointer(e);
	      var pClicked = new fabric.Point(pointer.x, pointer.y),
	          objectLeftTop = this._getLeftTopCoords();
	      if (this.angle) {
	        pClicked = fabric.util.rotatePoint(
	          pClicked, objectLeftTop, fabric.util.degreesToRadians(-this.angle));
	      }
	      return {
	        x: pClicked.x - objectLeftTop.x,
	        y: pClicked.y - objectLeftTop.y
	      };
	    },

	    /**
	     * Sets canvas globalCompositeOperation for specific object
	     * custom composition operation for the particular object can be specifed using globalCompositeOperation property
	     * @param {CanvasRenderingContext2D} ctx Rendering canvas context
	     */
	    _setupCompositeOperation: function (ctx) {
	      if (this.globalCompositeOperation) {
	        ctx.globalCompositeOperation = this.globalCompositeOperation;
	      }
	    }
	  });

	  fabric.util.createAccessors(fabric.Object);

	  /**
	   * Alias for {@link fabric.Object.prototype.setAngle}
	   * @alias rotate -> setAngle
	   * @memberOf fabric.Object
	   */
	  fabric.Object.prototype.rotate = fabric.Object.prototype.setAngle;

	  extend(fabric.Object.prototype, fabric.Observable);

	  /**
	   * Defines the number of fraction digits to use when serializing object values.
	   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.
	   * @static
	   * @memberOf fabric.Object
	   * @constant
	   * @type Number
	   */
	  fabric.Object.NUM_FRACTION_DIGITS = 2;

	  /**
	   * Unique id used internally when creating SVG elements
	   * @static
	   * @memberOf fabric.Object
	   * @type Number
	   */
	  fabric.Object.__uid = 0;

	})( true ? exports : this);


	(function() {

	  var degreesToRadians = fabric.util.degreesToRadians,
	      originXOffset = {
	        left: -0.5,
	        center: 0,
	        right: 0.5
	      },
	      originYOffset = {
	        top: -0.5,
	        center: 0,
	        bottom: 0.5
	      };

	  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	    /**
	     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)
	     * @param {fabric.Point} point The point which corresponds to the originX and originY params
	     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'
	     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'
	     * @return {fabric.Point}
	     */
	    translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {
	      var x = point.x,
	          y = point.y,
	          offsetX = originXOffset[toOriginX] - originXOffset[fromOriginX],
	          offsetY = originYOffset[toOriginY] - originYOffset[fromOriginY],
	          dim;
	      if (offsetX || offsetY) {
	        dim = this._getTransformedDimensions();
	        x = point.x + offsetX * dim.x;
	        y = point.y + offsetY * dim.y;
	      }
	      return new fabric.Point(x, y);
	    },

	    /**
	     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)
	     * @param {fabric.Point} point The point which corresponds to the originX and originY params
	     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
	     * @return {fabric.Point}
	     */
	    translateToCenterPoint: function(point, originX, originY) {
	      var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');
	      if (this.angle) {
	        return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));
	      }
	      return p;
	    },

	    /**
	     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)
	     * @param {fabric.Point} center The point which corresponds to center of the object
	     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
	     * @return {fabric.Point}
	     */
	    translateToOriginPoint: function(center, originX, originY) {
	      var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);
	      if (this.angle) {
	        return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));
	      }
	      return p;
	    },

	    /**
	     * Returns the real center coordinates of the object
	     * @return {fabric.Point}
	     */
	    getCenterPoint: function() {
	      var leftTop = new fabric.Point(this.left, this.top);
	      return this.translateToCenterPoint(leftTop, this.originX, this.originY);
	    },

	    /**
	     * Returns the coordinates of the object based on center coordinates
	     * @param {fabric.Point} point The point which corresponds to the originX and originY params
	     * @return {fabric.Point}
	     */
	    // getOriginPoint: function(center) {
	    //   return this.translateToOriginPoint(center, this.originX, this.originY);
	    // },

	    /**
	     * Returns the coordinates of the object as if it has a different origin
	     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
	     * @return {fabric.Point}
	     */
	    getPointByOrigin: function(originX, originY) {
	      var center = this.getCenterPoint();
	      return this.translateToOriginPoint(center, originX, originY);
	    },

	    /**
	     * Returns the point in local coordinates
	     * @param {fabric.Point} point The point relative to the global coordinate system
	     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
	     * @return {fabric.Point}
	     */
	    toLocalPoint: function(point, originX, originY) {
	      var center = this.getCenterPoint(),
	          p, p2;

	      if (originX && originY) {
	        p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);
	      }
	      else {
	        p = new fabric.Point(this.left, this.top);
	      }

	      p2 = new fabric.Point(point.x, point.y);
	      if (this.angle) {
	        p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));
	      }
	      return p2.subtractEquals(p);
	    },

	    /**
	     * Returns the point in global coordinates
	     * @param {fabric.Point} The point relative to the local coordinate system
	     * @return {fabric.Point}
	     */
	    // toGlobalPoint: function(point) {
	    //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));
	    // },

	    /**
	     * Sets the position of the object taking into consideration the object's origin
	     * @param {fabric.Point} pos The new position of the object
	     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
	     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
	     * @return {void}
	     */
	    setPositionByOrigin: function(pos, originX, originY) {
	      var center = this.translateToCenterPoint(pos, originX, originY),
	          position = this.translateToOriginPoint(center, this.originX, this.originY);

	      this.set('left', position.x);
	      this.set('top', position.y);
	    },

	    /**
	     * @param {String} to One of 'left', 'center', 'right'
	     */
	    adjustPosition: function(to) {
	      var angle = degreesToRadians(this.angle),
	          hypotFull = this.getWidth(),
	          xFull = Math.cos(angle) * hypotFull,
	          yFull = Math.sin(angle) * hypotFull;

	      //TODO: this function does not consider mixed situation like top, center.
	      this.left += xFull * (originXOffset[to] - originXOffset[this.originX]);
	      this.top += yFull * (originXOffset[to] - originXOffset[this.originX]);

	      this.setCoords();
	      this.originX = to;
	    },

	    /**
	     * Sets the origin/position of the object to it's center point
	     * @private
	     * @return {void}
	     */
	    _setOriginToCenter: function() {
	      this._originalOriginX = this.originX;
	      this._originalOriginY = this.originY;

	      var center = this.getCenterPoint();

	      this.originX = 'center';
	      this.originY = 'center';

	      this.left = center.x;
	      this.top = center.y;
	    },

	    /**
	     * Resets the origin/position of the object to it's original origin
	     * @private
	     * @return {void}
	     */
	    _resetOrigin: function() {
	      var originPoint = this.translateToOriginPoint(
	        this.getCenterPoint(),
	        this._originalOriginX,
	        this._originalOriginY);

	      this.originX = this._originalOriginX;
	      this.originY = this._originalOriginY;

	      this.left = originPoint.x;
	      this.top = originPoint.y;

	      this._originalOriginX = null;
	      this._originalOriginY = null;
	    },

	    /**
	     * @private
	     */
	    _getLeftTopCoords: function() {
	      return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');
	    }
	  });

	})();


	(function() {

	  function getCoords(oCoords) {
	    return [
	      new fabric.Point(oCoords.tl.x, oCoords.tl.y),
	      new fabric.Point(oCoords.tr.x, oCoords.tr.y),
	      new fabric.Point(oCoords.br.x, oCoords.br.y),
	      new fabric.Point(oCoords.bl.x, oCoords.bl.y)
	    ];
	  }

	  var degreesToRadians = fabric.util.degreesToRadians,
	      multiplyMatrices = fabric.util.multiplyTransformMatrices;

	  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	    /**
	     * Object containing coordinates of object's controls
	     * @type Object
	     * @default
	     */
	    oCoords: null,

	    /**
	     * Checks if object intersects with an area formed by 2 points
	     * @param {Object} pointTL top-left point of area
	     * @param {Object} pointBR bottom-right point of area
	     * @return {Boolean} true if object intersects with an area formed by 2 points
	     */
	    intersectsWithRect: function(pointTL, pointBR) {
	      var oCoords = getCoords(this.oCoords),
	          intersection = fabric.Intersection.intersectPolygonRectangle(
	            oCoords,
	            pointTL,
	            pointBR
	          );
	      return intersection.status === 'Intersection';
	    },

	    /**
	     * Checks if object intersects with another object
	     * @param {Object} other Object to test
	     * @return {Boolean} true if object intersects with another object
	     */
	    intersectsWithObject: function(other) {
	      var intersection = fabric.Intersection.intersectPolygonPolygon(
	            getCoords(this.oCoords),
	            getCoords(other.oCoords)
	          );

	      return intersection.status === 'Intersection';
	    },

	    /**
	     * Checks if object is fully contained within area of another object
	     * @param {Object} other Object to test
	     * @return {Boolean} true if object is fully contained within area of another object
	     */
	    isContainedWithinObject: function(other) {
	      var boundingRect = other.getBoundingRect(),
	          point1 = new fabric.Point(boundingRect.left, boundingRect.top),
	          point2 = new fabric.Point(boundingRect.left + boundingRect.width, boundingRect.top + boundingRect.height);

	      return this.isContainedWithinRect(point1, point2);
	    },

	    /**
	     * Checks if object is fully contained within area formed by 2 points
	     * @param {Object} pointTL top-left point of area
	     * @param {Object} pointBR bottom-right point of area
	     * @return {Boolean} true if object is fully contained within area formed by 2 points
	     */
	    isContainedWithinRect: function(pointTL, pointBR) {
	      var boundingRect = this.getBoundingRect();

	      return (
	        boundingRect.left >= pointTL.x &&
	        boundingRect.left + boundingRect.width <= pointBR.x &&
	        boundingRect.top >= pointTL.y &&
	        boundingRect.top + boundingRect.height <= pointBR.y
	      );
	    },

	    /**
	     * Checks if point is inside the object
	     * @param {fabric.Point} point Point to check against
	     * @return {Boolean} true if point is inside the object
	     */
	    containsPoint: function(point) {
	      var lines = this._getImageLines(this.oCoords),
	          xPoints = this._findCrossPoints(point, lines);

	      // if xPoints is odd then point is inside the object
	      return (xPoints !== 0 && xPoints % 2 === 1);
	    },

	    /**
	     * Method that returns an object with the object edges in it, given the coordinates of the corners
	     * @private
	     * @param {Object} oCoords Coordinates of the object corners
	     */
	    _getImageLines: function(oCoords) {
	      return {
	        topline: {
	          o: oCoords.tl,
	          d: oCoords.tr
	        },
	        rightline: {
	          o: oCoords.tr,
	          d: oCoords.br
	        },
	        bottomline: {
	          o: oCoords.br,
	          d: oCoords.bl
	        },
	        leftline: {
	          o: oCoords.bl,
	          d: oCoords.tl
	        }
	      };
	    },

	    /**
	     * Helper method to determine how many cross points are between the 4 object edges
	     * and the horizontal line determined by a point on canvas
	     * @private
	     * @param {fabric.Point} point Point to check
	     * @param {Object} oCoords Coordinates of the object being evaluated
	     */
	    _findCrossPoints: function(point, oCoords) {
	      var b1, b2, a1, a2, xi, yi,
	          xcount = 0,
	          iLine;

	      for (var lineKey in oCoords) {
	        iLine = oCoords[lineKey];
	        // optimisation 1: line below point. no cross
	        if ((iLine.o.y < point.y) && (iLine.d.y < point.y)) {
	          continue;
	        }
	        // optimisation 2: line above point. no cross
	        if ((iLine.o.y >= point.y) && (iLine.d.y >= point.y)) {
	          continue;
	        }
	        // optimisation 3: vertical line case
	        if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= point.x)) {
	          xi = iLine.o.x;
	          yi = point.y;
	        }
	        // calculate the intersection point
	        else {
	          b1 = 0;
	          b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);
	          a1 = point.y - b1 * point.x;
	          a2 = iLine.o.y - b2 * iLine.o.x;

	          xi = - (a1 - a2) / (b1 - b2);
	          yi = a1 + b1 * xi;
	        }
	        // dont count xi < point.x cases
	        if (xi >= point.x) {
	          xcount += 1;
	        }
	        // optimisation 4: specific for square images
	        if (xcount === 2) {
	          break;
	        }
	      }
	      return xcount;
	    },

	    /**
	     * Returns width of an object's bounding rectangle
	     * @deprecated since 1.0.4
	     * @return {Number} width value
	     */
	    getBoundingRectWidth: function() {
	      return this.getBoundingRect().width;
	    },

	    /**
	     * Returns height of an object's bounding rectangle
	     * @deprecated since 1.0.4
	     * @return {Number} height value
	     */
	    getBoundingRectHeight: function() {
	      return this.getBoundingRect().height;
	    },

	    /**
	     * Returns coordinates of object's bounding rectangle (left, top, width, height)
	     * @return {Object} Object with left, top, width, height properties
	     */
	    getBoundingRect: function() {
	      this.oCoords || this.setCoords();
	      return fabric.util.makeBoundingBoxFromPoints([
	        this.oCoords.tl,
	        this.oCoords.tr,
	        this.oCoords.br,
	        this.oCoords.bl
	      ]);
	    },

	    /**
	     * Returns width of an object
	     * @return {Number} width value
	     */
	    getWidth: function() {
	      //needs to be changed
	      return this._getTransformedDimensions().x;
	    },

	    /**
	     * Returns height of an object
	     * @return {Number} height value
	     */
	    getHeight: function() {
	      //needs to be changed
	      return this._getTransformedDimensions().y;
	    },

	    /**
	     * Makes sure the scale is valid and modifies it if necessary
	     * @private
	     * @param {Number} value
	     * @return {Number}
	     */
	    _constrainScale: function(value) {
	      if (Math.abs(value) < this.minScaleLimit) {
	        if (value < 0) {
	          return -this.minScaleLimit;
	        }
	        else {
	          return this.minScaleLimit;
	        }
	      }
	      return value;
	    },

	    /**
	     * Scales an object (equally by x and y)
	     * @param {Number} value Scale factor
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    scale: function(value) {
	      value = this._constrainScale(value);

	      if (value < 0) {
	        this.flipX = !this.flipX;
	        this.flipY = !this.flipY;
	        value *= -1;
	      }

	      this.scaleX = value;
	      this.scaleY = value;
	      this.setCoords();
	      return this;
	    },

	    /**
	     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)
	     * @param {Number} value New width value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    scaleToWidth: function(value) {
	      // adjust to bounding rect factor so that rotated shapes would fit as well
	      var boundingRectFactor = this.getBoundingRect().width / this.getWidth();
	      return this.scale(value / this.width / boundingRectFactor);
	    },

	    /**
	     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)
	     * @param {Number} value New height value
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    scaleToHeight: function(value) {
	      // adjust to bounding rect factor so that rotated shapes would fit as well
	      var boundingRectFactor = this.getBoundingRect().height / this.getHeight();
	      return this.scale(value / this.height / boundingRectFactor);
	    },

	    /**
	     * Sets corner position coordinates based on current angle, width and height
	     * See https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    setCoords: function() {
	      var theta = degreesToRadians(this.angle),
	          vpt = this.getViewportTransform(),
	          dim = this._calculateCurrentDimensions(),
	          currentWidth = dim.x, currentHeight = dim.y;

	      // If width is negative, make postive. Fixes path selection issue
	      if (currentWidth < 0) {
	        currentWidth = Math.abs(currentWidth);
	      }

	      var sinTh = Math.sin(theta),
	          cosTh = Math.cos(theta),
	          _angle = currentWidth > 0 ? Math.atan(currentHeight / currentWidth) : 0,
	          _hypotenuse = (currentWidth / Math.cos(_angle)) / 2,
	          offsetX = Math.cos(_angle + theta) * _hypotenuse,
	          offsetY = Math.sin(_angle + theta) * _hypotenuse,

	          // offset added for rotate and scale actions
	          coords = fabric.util.transformPoint(this.getCenterPoint(), vpt),
	          tl  = new fabric.Point(coords.x - offsetX, coords.y - offsetY),
	          tr  = new fabric.Point(tl.x + (currentWidth * cosTh), tl.y + (currentWidth * sinTh)),
	          bl  = new fabric.Point(tl.x - (currentHeight * sinTh), tl.y + (currentHeight * cosTh)),
	          br  = new fabric.Point(coords.x + offsetX, coords.y + offsetY),
	          ml  = new fabric.Point((tl.x + bl.x)/2, (tl.y + bl.y)/2),
	          mt  = new fabric.Point((tr.x + tl.x)/2, (tr.y + tl.y)/2),
	          mr  = new fabric.Point((br.x + tr.x)/2, (br.y + tr.y)/2),
	          mb  = new fabric.Point((br.x + bl.x)/2, (br.y + bl.y)/2),
	          mtr = new fabric.Point(mt.x + sinTh * this.rotatingPointOffset, mt.y - cosTh * this.rotatingPointOffset);
	      // debugging

	      /* setTimeout(function() {
	         canvas.contextTop.fillStyle = 'green';
	         canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);
	         canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);
	         canvas.contextTop.fillRect(br.x, br.y, 3, 3);
	         canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);
	         canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);
	         canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);
	         canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);
	         canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);
	         canvas.contextTop.fillRect(mtr.x, mtr.y, 3, 3);
	       }, 50); */

	      this.oCoords = {
	        // corners
	        tl: tl, tr: tr, br: br, bl: bl,
	        // middle
	        ml: ml, mt: mt, mr: mr, mb: mb,
	        // rotating point
	        mtr: mtr
	      };

	      // set coordinates of the draggable boxes in the corners used to scale/rotate the image
	      this._setCornerCoords && this._setCornerCoords();

	      return this;
	    },

	    _calcRotateMatrix: function() {
	      if (this.angle) {
	        var theta = degreesToRadians(this.angle), cos = Math.cos(theta), sin = Math.sin(theta);
	        return [cos, sin, -sin, cos, 0, 0];
	      }
	      return [1, 0, 0, 1, 0, 0];
	    },

	    calcTransformMatrix: function() {
	      var center = this.getCenterPoint(),
	          translateMatrix = [1, 0, 0, 1, center.x, center.y],
	          rotateMatrix = this._calcRotateMatrix(),
	          dimensionMatrix = this._calcDimensionsTransformMatrix(this.skewX, this.skewY, true),
	          matrix = this.group ? this.group.calcTransformMatrix() : [1, 0, 0, 1, 0, 0];
	      matrix = multiplyMatrices(matrix, translateMatrix);
	      matrix = multiplyMatrices(matrix, rotateMatrix);
	      matrix = multiplyMatrices(matrix, dimensionMatrix);
	      return matrix;
	    },

	    _calcDimensionsTransformMatrix: function(skewX, skewY, flipping) {
	      var skewMatrixX = [1, 0, Math.tan(degreesToRadians(skewX)), 1],
	          skewMatrixY = [1, Math.tan(degreesToRadians(skewY)), 0, 1],
	          scaleX = this.scaleX * (flipping && this.flipX ? -1 : 1),
	          scaleY = this.scaleY * (flipping && this.flipY ? -1 : 1),
	          scaleMatrix = [scaleX, 0, 0, scaleY],
	          m = multiplyMatrices(scaleMatrix, skewMatrixX, true);
	      return multiplyMatrices(m, skewMatrixY, true);
	    }
	  });
	})();


	fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	  /**
	   * Moves an object to the bottom of the stack of drawn objects
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  sendToBack: function() {
	    if (this.group) {
	      fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);
	    }
	    else {
	      this.canvas.sendToBack(this);
	    }
	    return this;
	  },

	  /**
	   * Moves an object to the top of the stack of drawn objects
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  bringToFront: function() {
	    if (this.group) {
	      fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);
	    }
	    else {
	      this.canvas.bringToFront(this);
	    }
	    return this;
	  },

	  /**
	   * Moves an object down in stack of drawn objects
	   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  sendBackwards: function(intersecting) {
	    if (this.group) {
	      fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);
	    }
	    else {
	      this.canvas.sendBackwards(this, intersecting);
	    }
	    return this;
	  },

	  /**
	   * Moves an object up in stack of drawn objects
	   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  bringForward: function(intersecting) {
	    if (this.group) {
	      fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);
	    }
	    else {
	      this.canvas.bringForward(this, intersecting);
	    }
	    return this;
	  },

	  /**
	   * Moves an object to specified level in stack of drawn objects
	   * @param {Number} index New position of object
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  moveTo: function(index) {
	    if (this.group) {
	      fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);
	    }
	    else {
	      this.canvas.moveTo(this, index);
	    }
	    return this;
	  }
	});


	/* _TO_SVG_START_ */
	fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	  /**
	   * Returns styles-string for svg-export
	   * @param {Boolean} skipShadow a boolean to skip shadow filter output
	   * @return {String}
	   */
	  getSvgStyles: function(skipShadow) {

	    var fill = this.fill
	          ? (this.fill.toLive ? 'url(#SVGID_' + this.fill.id + ')' : this.fill)
	          : 'none',
	        fillRule = this.fillRule,
	        stroke = this.stroke
	          ? (this.stroke.toLive ? 'url(#SVGID_' + this.stroke.id + ')' : this.stroke)
	          : 'none',

	        strokeWidth = this.strokeWidth ? this.strokeWidth : '0',
	        strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',
	        strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',
	        strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',
	        strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',
	        opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',

	        visibility = this.visible ? '' : ' visibility: hidden;',
	        filter = skipShadow ? '' : this.getSvgFilter();

	    return [
	      'stroke: ', stroke, '; ',
	      'stroke-width: ', strokeWidth, '; ',
	      'stroke-dasharray: ', strokeDashArray, '; ',
	      'stroke-linecap: ', strokeLineCap, '; ',
	      'stroke-linejoin: ', strokeLineJoin, '; ',
	      'stroke-miterlimit: ', strokeMiterLimit, '; ',
	      'fill: ', fill, '; ',
	      'fill-rule: ', fillRule, '; ',
	      'opacity: ', opacity, ';',
	      filter,
	      visibility
	    ].join('');
	  },

	  /**
	   * Returns filter for svg shadow
	   * @return {String}
	   */
	  getSvgFilter: function() {
	    return this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';
	  },

	  /**
	   * Returns transform-string for svg-export
	   * @return {String}
	   */
	  getSvgTransform: function() {
	    if (this.group && this.group.type === 'path-group') {
	      return '';
	    }
	    var toFixed = fabric.util.toFixed,
	        angle = this.getAngle(),
	        skewX = (this.getSkewX() % 360),
	        skewY = (this.getSkewY() % 360),
	        center = this.getCenterPoint(),

	        NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,

	        translatePart = this.type === 'path-group' ? '' : 'translate(' +
	                          toFixed(center.x, NUM_FRACTION_DIGITS) +
	                          ' ' +
	                          toFixed(center.y, NUM_FRACTION_DIGITS) +
	                        ')',

	        anglePart = angle !== 0
	          ? (' rotate(' + toFixed(angle, NUM_FRACTION_DIGITS) + ')')
	          : '',

	        scalePart = (this.scaleX === 1 && this.scaleY === 1)
	          ? '' :
	          (' scale(' +
	            toFixed(this.scaleX, NUM_FRACTION_DIGITS) +
	            ' ' +
	            toFixed(this.scaleY, NUM_FRACTION_DIGITS) +
	          ')'),

	        skewXPart = skewX !== 0 ? ' skewX(' + toFixed(skewX, NUM_FRACTION_DIGITS) + ')' : '',

	        skewYPart = skewY !== 0 ? ' skewY(' + toFixed(skewY, NUM_FRACTION_DIGITS) + ')' : '',

	        addTranslateX = this.type === 'path-group' ? this.width : 0,

	        flipXPart = this.flipX ? ' matrix(-1 0 0 1 ' + addTranslateX + ' 0) ' : '',

	        addTranslateY = this.type === 'path-group' ? this.height : 0,

	        flipYPart = this.flipY ? ' matrix(1 0 0 -1 0 ' + addTranslateY + ')' : '';

	    return [
	      translatePart, anglePart, scalePart, flipXPart, flipYPart, skewXPart, skewYPart
	    ].join('');
	  },

	  /**
	   * Returns transform-string for svg-export from the transform matrix of single elements
	   * @return {String}
	   */
	  getSvgTransformMatrix: function() {
	    return this.transformMatrix ? ' matrix(' + this.transformMatrix.join(' ') + ') ' : '';
	  },

	  /**
	   * @private
	   */
	  _createBaseSVGMarkup: function() {
	    var markup = [ ];

	    if (this.fill && this.fill.toLive) {
	      markup.push(this.fill.toSVG(this, false));
	    }
	    if (this.stroke && this.stroke.toLive) {
	      markup.push(this.stroke.toSVG(this, false));
	    }
	    if (this.shadow) {
	      markup.push(this.shadow.toSVG(this));
	    }
	    return markup;
	  }
	});
	/* _TO_SVG_END_ */


	/*
	  Depends on `stateProperties`
	*/
	fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	  /**
	   * Returns true if object state (one of its state properties) was changed
	   * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called
	   */
	  hasStateChanged: function() {
	    return this.stateProperties.some(function(prop) {
	      return this.get(prop) !== this.originalState[prop];
	    }, this);
	  },

	  /**
	   * Saves state of an object
	   * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
	   * @return {fabric.Object} thisArg
	   */
	  saveState: function(options) {
	    this.stateProperties.forEach(function(prop) {
	      this.originalState[prop] = this.get(prop);
	    }, this);

	    if (options && options.stateProperties) {
	      options.stateProperties.forEach(function(prop) {
	        this.originalState[prop] = this.get(prop);
	      }, this);
	    }

	    return this;
	  },

	  /**
	   * Setups state of an object
	   * @return {fabric.Object} thisArg
	   */
	  setupState: function() {
	    this.originalState = { };
	    this.saveState();

	    return this;
	  }
	});


	(function() {

	  var degreesToRadians = fabric.util.degreesToRadians,
	      //jscs:disable requireCamelCaseOrUpperCaseIdentifiers
	      isVML = function() { return typeof G_vmlCanvasManager !== 'undefined'; };
	  //jscs:enable requireCamelCaseOrUpperCaseIdentifiers

	  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	    /**
	     * The object interactivity controls.
	     * @private
	     */
	    _controlsVisibility: null,

	    /**
	     * Determines which corner has been clicked
	     * @private
	     * @param {Object} pointer The pointer indicating the mouse position
	     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found
	     */
	    _findTargetCorner: function(pointer) {
	      if (!this.hasControls || !this.active) {
	        return false;
	      }

	      var ex = pointer.x,
	          ey = pointer.y,
	          xPoints,
	          lines;
	      this.__corner = 0;
	      for (var i in this.oCoords) {

	        if (!this.isControlVisible(i)) {
	          continue;
	        }

	        if (i === 'mtr' && !this.hasRotatingPoint) {
	          continue;
	        }

	        if (this.get('lockUniScaling') &&
	           (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {
	          continue;
	        }

	        lines = this._getImageLines(this.oCoords[i].corner);

	        // debugging

	        // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);
	        // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);

	        // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);
	        // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);

	        // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);
	        // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);

	        // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);
	        // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);

	        xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);
	        if (xPoints !== 0 && xPoints % 2 === 1) {
	          this.__corner = i;
	          return i;
	        }
	      }
	      return false;
	    },

	    /**
	     * Sets the coordinates of the draggable boxes in the corners of
	     * the image used to scale/rotate it.
	     * @private
	     */
	    _setCornerCoords: function() {
	      var coords = this.oCoords,
	          newTheta = degreesToRadians(45 - this.angle),
	          /* Math.sqrt(2 * Math.pow(this.cornerSize, 2)) / 2, */
	          /* 0.707106 stands for sqrt(2)/2 */
	          cornerHypotenuse = this.cornerSize * 0.707106,
	          cosHalfOffset = cornerHypotenuse * Math.cos(newTheta),
	          sinHalfOffset = cornerHypotenuse * Math.sin(newTheta),
	          x, y;

	      for (var point in coords) {
	        x = coords[point].x;
	        y = coords[point].y;
	        coords[point].corner = {
	          tl: {
	            x: x - sinHalfOffset,
	            y: y - cosHalfOffset
	          },
	          tr: {
	            x: x + cosHalfOffset,
	            y: y - sinHalfOffset
	          },
	          bl: {
	            x: x - cosHalfOffset,
	            y: y + sinHalfOffset
	          },
	          br: {
	            x: x + sinHalfOffset,
	            y: y + cosHalfOffset
	          }
	        };
	      }
	    },

	    /*
	     * Calculate object dimensions from its properties
	     * @private
	     */
	    _getNonTransformedDimensions: function() {
	      var strokeWidth = this.strokeWidth,
	          w = this.width,
	          h = this.height,
	          addStrokeToW = true,
	          addStrokeToH = true;

	      if (this.type === 'line' && this.strokeLineCap === 'butt') {
	        addStrokeToH = w;
	        addStrokeToW = h;
	      }

	      if (addStrokeToH) {
	        h += h < 0 ? -strokeWidth : strokeWidth;
	      }

	      if (addStrokeToW) {
	        w += w < 0 ? -strokeWidth : strokeWidth;
	      }

	      return { x: w, y: h };
	    },

	    /*
	     * @private
	     */
	    _getTransformedDimensions: function(skewX, skewY) {
	      if (typeof skewX === 'undefined') {
	        skewX = this.skewX;
	      }
	      if (typeof skewY === 'undefined') {
	        skewY = this.skewY;
	      }
	      var dimensions = this._getNonTransformedDimensions(),
	          dimX = dimensions.x /2, dimY = dimensions.y / 2,
	          points = [
	          {
	            x: -dimX,
	            y: -dimY
	          },
	          {
	            x: dimX,
	            y: -dimY
	          },
	          {
	            x: -dimX,
	            y: dimY
	          },
	          {
	            x: dimX,
	            y: dimY
	          }],
	          i, transformMatrix = this._calcDimensionsTransformMatrix(skewX, skewY, false),
	          bbox;
	      for (i = 0; i < points.length; i++) {
	        points[i] = fabric.util.transformPoint(points[i], transformMatrix);
	      }
	      bbox = fabric.util.makeBoundingBoxFromPoints(points);
	      return { x: bbox.width, y: bbox.height };
	    },

	    /*
	     * private
	     */
	    _calculateCurrentDimensions: function()  {
	      var vpt = this.getViewportTransform(),
	          dim = this._getTransformedDimensions(),
	          w = dim.x, h = dim.y;

	      w += 2 * this.padding;
	      h += 2 * this.padding;

	      return fabric.util.transformPoint(new fabric.Point(w, h), vpt, true);
	    },

	    /**
	     * Draws borders of an object's bounding box.
	     * Requires public properties: width, height
	     * Requires public options: padding, borderColor
	     * @param {CanvasRenderingContext2D} ctx Context to draw on
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    drawBorders: function(ctx) {
	      if (!this.hasBorders) {
	        return this;
	      }

	      var wh = this._calculateCurrentDimensions(),
	          strokeWidth = 1 / this.borderScaleFactor,
	          width = wh.x + strokeWidth,
	          height = wh.y + strokeWidth;

	      ctx.save();
	      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
	      ctx.strokeStyle = this.borderColor;
	      ctx.lineWidth = strokeWidth;

	      ctx.strokeRect(
	        -width / 2,
	        -height / 2,
	        width,
	        height
	      );

	      if (this.hasRotatingPoint && this.isControlVisible('mtr') && !this.get('lockRotation') && this.hasControls) {

	        var rotateHeight = -height / 2;

	        ctx.beginPath();
	        ctx.moveTo(0, rotateHeight);
	        ctx.lineTo(0, rotateHeight - this.rotatingPointOffset);
	        ctx.closePath();
	        ctx.stroke();
	      }

	      ctx.restore();
	      return this;
	    },

	    /**
	     * Draws borders of an object's bounding box when it is inside a group.
	     * Requires public properties: width, height
	     * Requires public options: padding, borderColor
	     * @param {CanvasRenderingContext2D} ctx Context to draw on
	     * @param {object} options object representing current object parameters
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    drawBordersInGroup: function(ctx, options) {
	      if (!this.hasBorders) {
	        return this;
	      }

	      var p = this._getNonTransformedDimensions(),
	          matrix = fabric.util.customTransformMatrix(options.scaleX, options.scaleY, options.skewX),
	          wh = fabric.util.transformPoint(p, matrix),
	          strokeWidth = 1 / this.borderScaleFactor,
	          width = wh.x + strokeWidth + 2 * this.padding,
	          height = wh.y + strokeWidth + 2 * this.padding;

	      ctx.save();

	      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
	      ctx.strokeStyle = this.borderColor;
	      ctx.lineWidth = strokeWidth;

	      ctx.strokeRect(
	        -width / 2,
	        -height / 2,
	        width,
	        height
	      );

	      ctx.restore();
	      return this;
	    },

	    /**
	     * Draws corners of an object's bounding box.
	     * Requires public properties: width, height
	     * Requires public options: cornerSize, padding
	     * @param {CanvasRenderingContext2D} ctx Context to draw on
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    drawControls: function(ctx) {
	      if (!this.hasControls) {
	        return this;
	      }

	      var wh = this._calculateCurrentDimensions(),
	          width = wh.x,
	          height = wh.y,
	          scaleOffset = this.cornerSize,
	          left = -(width + scaleOffset) / 2,
	          top = -(height + scaleOffset) / 2,
	          methodName = this.transparentCorners ? 'strokeRect' : 'fillRect';

	      ctx.save();

	      ctx.lineWidth = 1;

	      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
	      ctx.strokeStyle = ctx.fillStyle = this.cornerColor;

	      // top-left
	      this._drawControl('tl', ctx, methodName,
	        left,
	        top);

	      // top-right
	      this._drawControl('tr', ctx, methodName,
	        left + width,
	        top);

	      // bottom-left
	      this._drawControl('bl', ctx, methodName,
	        left,
	        top + height);

	      // bottom-right
	      this._drawControl('br', ctx, methodName,
	        left + width,
	        top + height);

	      if (!this.get('lockUniScaling')) {

	        // middle-top
	        this._drawControl('mt', ctx, methodName,
	          left + width/2,
	          top);

	        // middle-bottom
	        this._drawControl('mb', ctx, methodName,
	          left + width/2,
	          top + height);

	        // middle-right
	        this._drawControl('mr', ctx, methodName,
	          left + width,
	          top + height/2);

	        // middle-left
	        this._drawControl('ml', ctx, methodName,
	          left,
	          top + height/2);
	      }

	      // middle-top-rotate
	      if (this.hasRotatingPoint) {
	        this._drawControl('mtr', ctx, methodName,
	          left + width / 2,
	          top - this.rotatingPointOffset);
	      }

	      ctx.restore();

	      return this;
	    },

	    /**
	     * @private
	     */
	    _drawControl: function(control, ctx, methodName, left, top) {
	      if (!this.isControlVisible(control)) {
	        return;
	      }
	      var size = this.cornerSize;
	      isVML() || this.transparentCorners || ctx.clearRect(left, top, size, size);
	      ctx[methodName](left, top, size, size);
	    },

	    /**
	     * Returns true if the specified control is visible, false otherwise.
	     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
	     * @returns {Boolean} true if the specified control is visible, false otherwise
	     */
	    isControlVisible: function(controlName) {
	      return this._getControlsVisibility()[controlName];
	    },

	    /**
	     * Sets the visibility of the specified control.
	     * @param {String} controlName The name of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
	     * @param {Boolean} visible true to set the specified control visible, false otherwise
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    setControlVisible: function(controlName, visible) {
	      this._getControlsVisibility()[controlName] = visible;
	      return this;
	    },

	    /**
	     * Sets the visibility state of object controls.
	     * @param {Object} [options] Options object
	     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it
	     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it
	     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it
	     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it
	     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it
	     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it
	     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it
	     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it
	     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    setControlsVisibility: function(options) {
	      options || (options = { });

	      for (var p in options) {
	        this.setControlVisible(p, options[p]);
	      }
	      return this;
	    },

	    /**
	     * Returns the instance of the control visibility set for this object.
	     * @private
	     * @returns {Object}
	     */
	    _getControlsVisibility: function() {
	      if (!this._controlsVisibility) {
	        this._controlsVisibility = {
	          tl: true,
	          tr: true,
	          br: true,
	          bl: true,
	          ml: true,
	          mt: true,
	          mr: true,
	          mb: true,
	          mtr: true
	        };
	      }
	      return this._controlsVisibility;
	    }
	  });
	})();


	fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {

	  /**
	   * Animation duration (in ms) for fx* methods
	   * @type Number
	   * @default
	   */
	  FX_DURATION: 500,

	  /**
	   * Centers object horizontally with animation.
	   * @param {fabric.Object} object Object to center
	   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
	   * @param {Function} [callbacks.onComplete] Invoked on completion
	   * @param {Function} [callbacks.onChange] Invoked on every step of animation
	   * @return {fabric.Canvas} thisArg
	   * @chainable
	   */
	  fxCenterObjectH: function (object, callbacks) {
	    callbacks = callbacks || { };

	    var empty = function() { },
	        onComplete = callbacks.onComplete || empty,
	        onChange = callbacks.onChange || empty,
	        _this = this;

	    fabric.util.animate({
	      startValue: object.get('left'),
	      endValue: this.getCenter().left,
	      duration: this.FX_DURATION,
	      onChange: function(value) {
	        object.set('left', value);
	        _this.renderAll();
	        onChange();
	      },
	      onComplete: function() {
	        object.setCoords();
	        onComplete();
	      }
	    });

	    return this;
	  },

	  /**
	   * Centers object vertically with animation.
	   * @param {fabric.Object} object Object to center
	   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
	   * @param {Function} [callbacks.onComplete] Invoked on completion
	   * @param {Function} [callbacks.onChange] Invoked on every step of animation
	   * @return {fabric.Canvas} thisArg
	   * @chainable
	   */
	  fxCenterObjectV: function (object, callbacks) {
	    callbacks = callbacks || { };

	    var empty = function() { },
	        onComplete = callbacks.onComplete || empty,
	        onChange = callbacks.onChange || empty,
	        _this = this;

	    fabric.util.animate({
	      startValue: object.get('top'),
	      endValue: this.getCenter().top,
	      duration: this.FX_DURATION,
	      onChange: function(value) {
	        object.set('top', value);
	        _this.renderAll();
	        onChange();
	      },
	      onComplete: function() {
	        object.setCoords();
	        onComplete();
	      }
	    });

	    return this;
	  },

	  /**
	   * Same as `fabric.Canvas#remove` but animated
	   * @param {fabric.Object} object Object to remove
	   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
	   * @param {Function} [callbacks.onComplete] Invoked on completion
	   * @param {Function} [callbacks.onChange] Invoked on every step of animation
	   * @return {fabric.Canvas} thisArg
	   * @chainable
	   */
	  fxRemove: function (object, callbacks) {
	    callbacks = callbacks || { };

	    var empty = function() { },
	        onComplete = callbacks.onComplete || empty,
	        onChange = callbacks.onChange || empty,
	        _this = this;

	    fabric.util.animate({
	      startValue: object.get('opacity'),
	      endValue: 0,
	      duration: this.FX_DURATION,
	      onStart: function() {
	        object.set('active', false);
	      },
	      onChange: function(value) {
	        object.set('opacity', value);
	        _this.renderAll();
	        onChange();
	      },
	      onComplete: function () {
	        _this.remove(object);
	        onComplete();
	      }
	    });

	    return this;
	  }
	});

	fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {
	  /**
	   * Animates object's properties
	   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)
	   * @param {Number|Object} value Value to animate property to (if string was given first) or options object
	   * @return {fabric.Object} thisArg
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}
	   * @chainable
	   *
	   * As object — multiple properties
	   *
	   * object.animate({ left: ..., top: ... });
	   * object.animate({ left: ..., top: ... }, { duration: ... });
	   *
	   * As string — one property
	   *
	   * object.animate('left', ...);
	   * object.animate('left', { duration: ... });
	   *
	   */
	  animate: function() {
	    if (arguments[0] && typeof arguments[0] === 'object') {
	      var propsToAnimate = [ ], prop, skipCallbacks;
	      for (prop in arguments[0]) {
	        propsToAnimate.push(prop);
	      }
	      for (var i = 0, len = propsToAnimate.length; i < len; i++) {
	        prop = propsToAnimate[i];
	        skipCallbacks = i !== len - 1;
	        this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);
	      }
	    }
	    else {
	      this._animate.apply(this, arguments);
	    }
	    return this;
	  },

	  /**
	   * @private
	   * @param {String} property Property to animate
	   * @param {String} to Value to animate to
	   * @param {Object} [options] Options object
	   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked
	   */
	  _animate: function(property, to, options, skipCallbacks) {
	    var _this = this, propPair;

	    to = to.toString();

	    if (!options) {
	      options = { };
	    }
	    else {
	      options = fabric.util.object.clone(options);
	    }

	    if (~property.indexOf('.')) {
	      propPair = property.split('.');
	    }

	    var currentValue = propPair
	      ? this.get(propPair[0])[propPair[1]]
	      : this.get(property);

	    if (!('from' in options)) {
	      options.from = currentValue;
	    }

	    if (~to.indexOf('=')) {
	      to = currentValue + parseFloat(to.replace('=', ''));
	    }
	    else {
	      to = parseFloat(to);
	    }

	    fabric.util.animate({
	      startValue: options.from,
	      endValue: to,
	      byValue: options.by,
	      easing: options.easing,
	      duration: options.duration,
	      abort: options.abort && function() {
	        return options.abort.call(_this);
	      },
	      onChange: function(value) {
	        if (propPair) {
	          _this[propPair[0]][propPair[1]] = value;
	        }
	        else {
	          _this.set(property, value);
	        }
	        if (skipCallbacks) {
	          return;
	        }
	        options.onChange && options.onChange();
	      },
	      onComplete: function() {
	        if (skipCallbacks) {
	          return;
	        }

	        _this.setCoords();
	        options.onComplete && options.onComplete();
	      }
	    });
	  }
	});


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 },
	      supportsLineDash = fabric.StaticCanvas.supports('setLineDash');

	  if (fabric.Line) {
	    fabric.warn('fabric.Line is already defined');
	    return;
	  }

	  /**
	   * Line class
	   * @class fabric.Line
	   * @extends fabric.Object
	   * @see {@link fabric.Line#initialize} for constructor definition
	   */
	  fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'line',

	    /**
	     * x value or first line edge
	     * @type Number
	     * @default
	     */
	    x1: 0,

	    /**
	     * y value or first line edge
	     * @type Number
	     * @default
	     */
	    y1: 0,

	    /**
	     * x value or second line edge
	     * @type Number
	     * @default
	     */
	    x2: 0,

	    /**
	     * y value or second line edge
	     * @type Number
	     * @default
	     */
	    y2: 0,

	    /**
	     * Constructor
	     * @param {Array} [points] Array of points
	     * @param {Object} [options] Options object
	     * @return {fabric.Line} thisArg
	     */
	    initialize: function(points, options) {
	      options = options || { };

	      if (!points) {
	        points = [0, 0, 0, 0];
	      }

	      this.callSuper('initialize', options);

	      this.set('x1', points[0]);
	      this.set('y1', points[1]);
	      this.set('x2', points[2]);
	      this.set('y2', points[3]);

	      this._setWidthHeight(options);
	    },

	    /**
	     * @private
	     * @param {Object} [options] Options
	     */
	    _setWidthHeight: function(options) {
	      options || (options = { });

	      this.width = Math.abs(this.x2 - this.x1);
	      this.height = Math.abs(this.y2 - this.y1);

	      this.left = 'left' in options
	        ? options.left
	        : this._getLeftToOriginX();

	      this.top = 'top' in options
	        ? options.top
	        : this._getTopToOriginY();
	    },

	    /**
	     * @private
	     * @param {String} key
	     * @param {Any} value
	     */
	    _set: function(key, value) {
	      this.callSuper('_set', key, value);
	      if (typeof coordProps[key] !== 'undefined') {
	        this._setWidthHeight();
	      }
	      return this;
	    },

	    /**
	     * @private
	     * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.
	     */
	    _getLeftToOriginX: makeEdgeToOriginGetter(
	      { // property names
	        origin: 'originX',
	        axis1: 'x1',
	        axis2: 'x2',
	        dimension: 'width'
	      },
	      { // possible values of origin
	        nearest: 'left',
	        center: 'center',
	        farthest: 'right'
	      }
	    ),

	    /**
	     * @private
	     * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.
	     */
	    _getTopToOriginY: makeEdgeToOriginGetter(
	      { // property names
	        origin: 'originY',
	        axis1: 'y1',
	        axis2: 'y2',
	        dimension: 'height'
	      },
	      { // possible values of origin
	        nearest: 'top',
	        center: 'center',
	        farthest: 'bottom'
	      }
	    ),

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx, noTransform) {
	      ctx.beginPath();

	      if (noTransform) {
	        //  Line coords are distances from left-top of canvas to origin of line.
	        //  To render line in a path-group, we need to translate them to
	        //  distances from center of path-group to center of line.
	        var cp = this.getCenterPoint();
	        ctx.translate(
	          cp.x - this.strokeWidth / 2,
	          cp.y - this.strokeWidth / 2
	        );
	      }

	      if (!this.strokeDashArray || this.strokeDashArray && supportsLineDash) {
	        // move from center (of virtual box) to its left/top corner
	        // we can't assume x1, y1 is top left and x2, y2 is bottom right
	        var p = this.calcLinePoints();
	        ctx.moveTo(p.x1, p.y1);
	        ctx.lineTo(p.x2, p.y2);
	      }

	      ctx.lineWidth = this.strokeWidth;

	      // TODO: test this
	      // make sure setting "fill" changes color of a line
	      // (by copying fillStyle to strokeStyle, since line is stroked, not filled)
	      var origStrokeStyle = ctx.strokeStyle;
	      ctx.strokeStyle = this.stroke || ctx.fillStyle;
	      this.stroke && this._renderStroke(ctx);
	      ctx.strokeStyle = origStrokeStyle;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderDashedStroke: function(ctx) {
	      var p = this.calcLinePoints();

	      ctx.beginPath();
	      fabric.util.drawDashedLine(ctx, p.x1, p.y1, p.x2, p.y2, this.strokeDashArray);
	      ctx.closePath();
	    },

	    /**
	     * Returns object representation of an instance
	     * @methd toObject
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());
	    },

	    /**
	     * Recalculates line points given width and height
	     * @private
	     */
	    calcLinePoints: function() {
	      var xMult = this.x1 <= this.x2 ? -1 : 1,
	          yMult = this.y1 <= this.y2 ? -1 : 1,
	          x1 = (xMult * this.width * 0.5),
	          y1 = (yMult * this.height * 0.5),
	          x2 = (xMult * this.width * -0.5),
	          y2 = (yMult * this.height * -0.5);

	      return {
	        x1: x1,
	        x2: x2,
	        y1: y1,
	        y2: y2
	      };
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns SVG representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      var markup = this._createBaseSVGMarkup(),
	          p = { x1: this.x1, x2: this.x2, y1: this.y1, y2: this.y2 };

	      if (!(this.group && this.group.type === 'path-group')) {
	        p = this.calcLinePoints();
	      }
	      markup.push(
	        '<line ',
	          'x1="', p.x1,
	          '" y1="', p.y1,
	          '" x2="', p.x2,
	          '" y2="', p.y2,
	          '" style="', this.getSvgStyles(),
	          '" transform="', this.getSvgTransform(),
	          this.getSvgTransformMatrix(),
	        '"/>\n'
	      );

	      return reviver ? reviver(markup.join('')) : markup.join('');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity
	     */
	    complexity: function() {
	      return 1;
	    }
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})
	   * @static
	   * @memberOf fabric.Line
	   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement
	   */
	  fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));

	  /**
	   * Returns fabric.Line instance from an SVG element
	   * @static
	   * @memberOf fabric.Line
	   * @param {SVGElement} element Element to parse
	   * @param {Object} [options] Options object
	   * @return {fabric.Line} instance of fabric.Line
	   */
	  fabric.Line.fromElement = function(element, options) {
	    var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),
	        points = [
	          parsedAttributes.x1 || 0,
	          parsedAttributes.y1 || 0,
	          parsedAttributes.x2 || 0,
	          parsedAttributes.y2 || 0
	        ];
	    return new fabric.Line(points, extend(parsedAttributes, options));
	  };
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns fabric.Line instance from an object representation
	   * @static
	   * @memberOf fabric.Line
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Line} instance of fabric.Line
	   */
	  fabric.Line.fromObject = function(object) {
	    var points = [object.x1, object.y1, object.x2, object.y2];
	    return new fabric.Line(points, object);
	  };

	  /**
	   * Produces a function that calculates distance from canvas edge to Line origin.
	   */
	  function makeEdgeToOriginGetter(propertyNames, originValues) {
	    var origin = propertyNames.origin,
	        axis1 = propertyNames.axis1,
	        axis2 = propertyNames.axis2,
	        dimension = propertyNames.dimension,
	        nearest = originValues.nearest,
	        center = originValues.center,
	        farthest = originValues.farthest;

	    return function() {
	      switch (this.get(origin)) {
	      case nearest:
	        return Math.min(this.get(axis1), this.get(axis2));
	      case center:
	        return Math.min(this.get(axis1), this.get(axis2)) + (0.5 * this.get(dimension));
	      case farthest:
	        return Math.max(this.get(axis1), this.get(axis2));
	      }
	    };

	  }

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { }),
	      pi = Math.PI,
	      extend = fabric.util.object.extend;

	  if (fabric.Circle) {
	    fabric.warn('fabric.Circle is already defined.');
	    return;
	  }

	  /**
	   * Circle class
	   * @class fabric.Circle
	   * @extends fabric.Object
	   * @see {@link fabric.Circle#initialize} for constructor definition
	   */
	  fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'circle',

	    /**
	     * Radius of this circle
	     * @type Number
	     * @default
	     */
	    radius: 0,

	    /**
	     * Start angle of the circle, moving clockwise
	     * @type Number
	     * @default 0
	     */
	    startAngle: 0,

	    /**
	     * End angle of the circle
	     * @type Number
	     * @default 2Pi
	     */
	    endAngle: pi * 2,

	    /**
	     * Constructor
	     * @param {Object} [options] Options object
	     * @return {fabric.Circle} thisArg
	     */
	    initialize: function(options) {
	      options = options || { };

	      this.callSuper('initialize', options);
	      this.set('radius', options.radius || 0);

	      this.startAngle = options.startAngle || this.startAngle;
	      this.endAngle = options.endAngle || this.endAngle;
	    },

	    /**
	     * @private
	     * @param {String} key
	     * @param {Any} value
	     * @return {fabric.Circle} thisArg
	     */
	    _set: function(key, value) {
	      this.callSuper('_set', key, value);

	      if (key === 'radius') {
	        this.setRadius(value);
	      }

	      return this;
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return extend(this.callSuper('toObject', propertiesToInclude), {
	        radius: this.get('radius'),
	        startAngle: this.startAngle,
	        endAngle: this.endAngle
	      });
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      var markup = this._createBaseSVGMarkup(), x = 0, y = 0,
	      angle = (this.endAngle - this.startAngle) % ( 2 * pi);

	      if (angle === 0) {
	        if (this.group && this.group.type === 'path-group') {
	          x = this.left + this.radius;
	          y = this.top + this.radius;
	        }
	        markup.push(
	          '<circle ',
	            'cx="' + x + '" cy="' + y + '" ',
	            'r="', this.radius,
	            '" style="', this.getSvgStyles(),
	            '" transform="', this.getSvgTransform(),
	            ' ', this.getSvgTransformMatrix(),
	          '"/>\n'
	        );
	      }
	      else {
	        var startX = Math.cos(this.startAngle) * this.radius,
	            startY = Math.sin(this.startAngle) * this.radius,
	            endX = Math.cos(this.endAngle) * this.radius,
	            endY = Math.sin(this.endAngle) * this.radius,
	            largeFlag = angle > pi ? '1' : '0';

	        markup.push(
	          '<path d="M ' + startX + ' ' + startY,
	          ' A ' + this.radius + ' ' + this.radius,
	          ' 0 ', + largeFlag + ' 1', ' ' + endX + ' ' + endY,
	          '" style="', this.getSvgStyles(),
	          '" transform="', this.getSvgTransform(),
	          ' ', this.getSvgTransformMatrix(),
	          '"/>\n'
	        );
	      }

	      return reviver ? reviver(markup.join('')) : markup.join('');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx context to render on
	     * @param {Boolean} [noTransform] When true, context is not transformed
	     */
	    _render: function(ctx, noTransform) {
	      ctx.beginPath();
	      ctx.arc(noTransform ? this.left + this.radius : 0,
	              noTransform ? this.top + this.radius : 0,
	              this.radius,
	              this.startAngle,
	              this.endAngle, false);
	      this._renderFill(ctx);
	      this._renderStroke(ctx);
	    },

	    /**
	     * Returns horizontal radius of an object (according to how an object is scaled)
	     * @return {Number}
	     */
	    getRadiusX: function() {
	      return this.get('radius') * this.get('scaleX');
	    },

	    /**
	     * Returns vertical radius of an object (according to how an object is scaled)
	     * @return {Number}
	     */
	    getRadiusY: function() {
	      return this.get('radius') * this.get('scaleY');
	    },

	    /**
	     * Sets radius of an object (and updates width accordingly)
	     * @return {fabric.Circle} thisArg
	     */
	    setRadius: function(value) {
	      this.radius = value;
	      return this.set('width', value * 2).set('height', value * 2);
	    },

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity of this instance
	     */
	    complexity: function() {
	      return 1;
	    }
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})
	   * @static
	   * @memberOf fabric.Circle
	   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement
	   */
	  fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));

	  /**
	   * Returns {@link fabric.Circle} instance from an SVG element
	   * @static
	   * @memberOf fabric.Circle
	   * @param {SVGElement} element Element to parse
	   * @param {Object} [options] Options object
	   * @throws {Error} If value of `r` attribute is missing or invalid
	   * @return {fabric.Circle} Instance of fabric.Circle
	   */
	  fabric.Circle.fromElement = function(element, options) {
	    options || (options = { });

	    var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);

	    if (!isValidRadius(parsedAttributes)) {
	      throw new Error('value of `r` attribute is required and can not be negative');
	    }

	    parsedAttributes.left = parsedAttributes.left || 0;
	    parsedAttributes.top = parsedAttributes.top || 0;

	    var obj = new fabric.Circle(extend(parsedAttributes, options));

	    obj.left -= obj.radius;
	    obj.top -= obj.radius;
	    return obj;
	  };

	  /**
	   * @private
	   */
	  function isValidRadius(attributes) {
	    return (('radius' in attributes) && (attributes.radius >= 0));
	  }
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns {@link fabric.Circle} instance from an object representation
	   * @static
	   * @memberOf fabric.Circle
	   * @param {Object} object Object to create an instance from
	   * @return {Object} Instance of fabric.Circle
	   */
	  fabric.Circle.fromObject = function(object) {
	    return new fabric.Circle(object);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { });

	  if (fabric.Triangle) {
	    fabric.warn('fabric.Triangle is already defined');
	    return;
	  }

	  /**
	   * Triangle class
	   * @class fabric.Triangle
	   * @extends fabric.Object
	   * @return {fabric.Triangle} thisArg
	   * @see {@link fabric.Triangle#initialize} for constructor definition
	   */
	  fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'triangle',

	    /**
	     * Constructor
	     * @param {Object} [options] Options object
	     * @return {Object} thisArg
	     */
	    initialize: function(options) {
	      options = options || { };

	      this.callSuper('initialize', options);

	      this.set('width', options.width || 100)
	          .set('height', options.height || 100);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx) {
	      var widthBy2 = this.width / 2,
	          heightBy2 = this.height / 2;

	      ctx.beginPath();
	      ctx.moveTo(-widthBy2, heightBy2);
	      ctx.lineTo(0, -heightBy2);
	      ctx.lineTo(widthBy2, heightBy2);
	      ctx.closePath();

	      this._renderFill(ctx);
	      this._renderStroke(ctx);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderDashedStroke: function(ctx) {
	      var widthBy2 = this.width / 2,
	          heightBy2 = this.height / 2;

	      ctx.beginPath();
	      fabric.util.drawDashedLine(ctx, -widthBy2, heightBy2, 0, -heightBy2, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, 0, -heightBy2, widthBy2, heightBy2, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, widthBy2, heightBy2, -widthBy2, heightBy2, this.strokeDashArray);
	      ctx.closePath();
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns SVG representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      var markup = this._createBaseSVGMarkup(),
	          widthBy2 = this.width / 2,
	          heightBy2 = this.height / 2,
	          points = [
	            -widthBy2 + ' ' + heightBy2,
	            '0 ' + -heightBy2,
	            widthBy2 + ' ' + heightBy2
	          ]
	          .join(',');

	      markup.push(
	        '<polygon ',
	          'points="', points,
	          '" style="', this.getSvgStyles(),
	          '" transform="', this.getSvgTransform(),
	        '"/>'
	      );

	      return reviver ? reviver(markup.join('')) : markup.join('');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity of this instance
	     */
	    complexity: function() {
	      return 1;
	    }
	  });

	  /**
	   * Returns fabric.Triangle instance from an object representation
	   * @static
	   * @memberOf fabric.Triangle
	   * @param {Object} object Object to create an instance from
	   * @return {Object} instance of Canvas.Triangle
	   */
	  fabric.Triangle.fromObject = function(object) {
	    return new fabric.Triangle(object);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { }),
	      piBy2   = Math.PI * 2,
	      extend = fabric.util.object.extend;

	  if (fabric.Ellipse) {
	    fabric.warn('fabric.Ellipse is already defined.');
	    return;
	  }

	  /**
	   * Ellipse class
	   * @class fabric.Ellipse
	   * @extends fabric.Object
	   * @return {fabric.Ellipse} thisArg
	   * @see {@link fabric.Ellipse#initialize} for constructor definition
	   */
	  fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'ellipse',

	    /**
	     * Horizontal radius
	     * @type Number
	     * @default
	     */
	    rx:   0,

	    /**
	     * Vertical radius
	     * @type Number
	     * @default
	     */
	    ry:   0,

	    /**
	     * Constructor
	     * @param {Object} [options] Options object
	     * @return {fabric.Ellipse} thisArg
	     */
	    initialize: function(options) {
	      options = options || { };

	      this.callSuper('initialize', options);

	      this.set('rx', options.rx || 0);
	      this.set('ry', options.ry || 0);
	    },

	    /**
	     * @private
	     * @param {String} key
	     * @param {Any} value
	     * @return {fabric.Ellipse} thisArg
	     */
	    _set: function(key, value) {
	      this.callSuper('_set', key, value);
	      switch (key) {

	        case 'rx':
	          this.rx = value;
	          this.set('width', value * 2);
	          break;

	        case 'ry':
	          this.ry = value;
	          this.set('height', value * 2);
	          break;

	      }
	      return this;
	    },

	    /**
	     * Returns horizontal radius of an object (according to how an object is scaled)
	     * @return {Number}
	     */
	    getRx: function() {
	      return this.get('rx') * this.get('scaleX');
	    },

	    /**
	     * Returns Vertical radius of an object (according to how an object is scaled)
	     * @return {Number}
	     */
	    getRy: function() {
	      return this.get('ry') * this.get('scaleY');
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return extend(this.callSuper('toObject', propertiesToInclude), {
	        rx: this.get('rx'),
	        ry: this.get('ry')
	      });
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      var markup = this._createBaseSVGMarkup(), x = 0, y = 0;
	      if (this.group && this.group.type === 'path-group') {
	        x = this.left + this.rx;
	        y = this.top + this.ry;
	      }
	      markup.push(
	        '<ellipse ',
	          'cx="', x, '" cy="', y, '" ',
	          'rx="', this.rx,
	          '" ry="', this.ry,
	          '" style="', this.getSvgStyles(),
	          '" transform="', this.getSvgTransform(),
	          this.getSvgTransformMatrix(),
	        '"/>\n'
	      );

	      return reviver ? reviver(markup.join('')) : markup.join('');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx context to render on
	     * @param {Boolean} [noTransform] When true, context is not transformed
	     */
	    _render: function(ctx, noTransform) {
	      ctx.beginPath();
	      ctx.save();
	      ctx.transform(1, 0, 0, this.ry/this.rx, 0, 0);
	      ctx.arc(
	        noTransform ? this.left + this.rx : 0,
	        noTransform ? (this.top + this.ry) * this.rx/this.ry : 0,
	        this.rx,
	        0,
	        piBy2,
	        false);
	      ctx.restore();
	      this._renderFill(ctx);
	      this._renderStroke(ctx);
	    },

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity
	     */
	    complexity: function() {
	      return 1;
	    }
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})
	   * @static
	   * @memberOf fabric.Ellipse
	   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement
	   */
	  fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));

	  /**
	   * Returns {@link fabric.Ellipse} instance from an SVG element
	   * @static
	   * @memberOf fabric.Ellipse
	   * @param {SVGElement} element Element to parse
	   * @param {Object} [options] Options object
	   * @return {fabric.Ellipse}
	   */
	  fabric.Ellipse.fromElement = function(element, options) {
	    options || (options = { });

	    var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);

	    parsedAttributes.left = parsedAttributes.left || 0;
	    parsedAttributes.top = parsedAttributes.top || 0;

	    var ellipse = new fabric.Ellipse(extend(parsedAttributes, options));

	    ellipse.top -= ellipse.ry;
	    ellipse.left -= ellipse.rx;
	    return ellipse;
	  };
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns {@link fabric.Ellipse} instance from an object representation
	   * @static
	   * @memberOf fabric.Ellipse
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Ellipse}
	   */
	  fabric.Ellipse.fromObject = function(object) {
	    return new fabric.Ellipse(object);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend;

	  if (fabric.Rect) {
	    fabric.warn('fabric.Rect is already defined');
	    return;
	  }

	  var stateProperties = fabric.Object.prototype.stateProperties.concat();
	  stateProperties.push('rx', 'ry', 'x', 'y');

	  /**
	   * Rectangle class
	   * @class fabric.Rect
	   * @extends fabric.Object
	   * @return {fabric.Rect} thisArg
	   * @see {@link fabric.Rect#initialize} for constructor definition
	   */
	  fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */ {

	    /**
	     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})
	     * as well as for history (undo/redo) purposes
	     * @type Array
	     */
	    stateProperties: stateProperties,

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'rect',

	    /**
	     * Horizontal border radius
	     * @type Number
	     * @default
	     */
	    rx:   0,

	    /**
	     * Vertical border radius
	     * @type Number
	     * @default
	     */
	    ry:   0,

	    /**
	     * Used to specify dash pattern for stroke on this object
	     * @type Array
	     */
	    strokeDashArray: null,

	    /**
	     * Constructor
	     * @param {Object} [options] Options object
	     * @return {Object} thisArg
	     */
	    initialize: function(options) {
	      options = options || { };

	      this.callSuper('initialize', options);
	      this._initRxRy();

	    },

	    /**
	     * Initializes rx/ry attributes
	     * @private
	     */
	    _initRxRy: function() {
	      if (this.rx && !this.ry) {
	        this.ry = this.rx;
	      }
	      else if (this.ry && !this.rx) {
	        this.rx = this.ry;
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx, noTransform) {

	      // optimize 1x1 case (used in spray brush)
	      if (this.width === 1 && this.height === 1) {
	        ctx.fillRect(-0.5, -0.5, 1, 1);
	        return;
	      }

	      var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,
	          ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,
	          w = this.width,
	          h = this.height,
	          x = noTransform ? this.left : -this.width / 2,
	          y = noTransform ? this.top : -this.height / 2,
	          isRounded = rx !== 0 || ry !== 0,
	          k = 1 - 0.5522847498 /* "magic number" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */;

	      ctx.beginPath();

	      ctx.moveTo(x + rx, y);

	      ctx.lineTo(x + w - rx, y);
	      isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);

	      ctx.lineTo(x + w, y + h - ry);
	      isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);

	      ctx.lineTo(x + rx, y + h);
	      isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);

	      ctx.lineTo(x, y + ry);
	      isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);

	      ctx.closePath();

	      this._renderFill(ctx);
	      this._renderStroke(ctx);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderDashedStroke: function(ctx) {
	      var x = -this.width / 2,
	          y = -this.height / 2,
	          w = this.width,
	          h = this.height;

	      ctx.beginPath();
	      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);
	      ctx.closePath();
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      var object = extend(this.callSuper('toObject', propertiesToInclude), {
	        rx: this.get('rx') || 0,
	        ry: this.get('ry') || 0
	      });
	      if (!this.includeDefaultValues) {
	        this._removeDefaultValues(object);
	      }
	      return object;
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      var markup = this._createBaseSVGMarkup(), x = this.left, y = this.top;
	      if (!(this.group && this.group.type === 'path-group')) {
	        x = -this.width / 2;
	        y = -this.height / 2;
	      }
	      markup.push(
	        '<rect ',
	          'x="', x, '" y="', y,
	          '" rx="', this.get('rx'), '" ry="', this.get('ry'),
	          '" width="', this.width, '" height="', this.height,
	          '" style="', this.getSvgStyles(),
	          '" transform="', this.getSvgTransform(),
	          this.getSvgTransformMatrix(),
	        '"/>\n');

	      return reviver ? reviver(markup.join('')) : markup.join('');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity
	     */
	    complexity: function() {
	      return 1;
	    }
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)
	   * @static
	   * @memberOf fabric.Rect
	   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement
	   */
	  fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));

	  /**
	   * Returns {@link fabric.Rect} instance from an SVG element
	   * @static
	   * @memberOf fabric.Rect
	   * @param {SVGElement} element Element to parse
	   * @param {Object} [options] Options object
	   * @return {fabric.Rect} Instance of fabric.Rect
	   */
	  fabric.Rect.fromElement = function(element, options) {
	    if (!element) {
	      return null;
	    }
	    options = options || { };

	    var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);

	    parsedAttributes.left = parsedAttributes.left || 0;
	    parsedAttributes.top  = parsedAttributes.top  || 0;
	    var rect = new fabric.Rect(extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));
	    rect.visible = rect.width > 0 && rect.height > 0;
	    return rect;
	  };
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns {@link fabric.Rect} instance from an object representation
	   * @static
	   * @memberOf fabric.Rect
	   * @param {Object} object Object to create an instance from
	   * @return {Object} instance of fabric.Rect
	   */
	  fabric.Rect.fromObject = function(object) {
	    return new fabric.Rect(object);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { });

	  if (fabric.Polyline) {
	    fabric.warn('fabric.Polyline is already defined');
	    return;
	  }

	  /**
	   * Polyline class
	   * @class fabric.Polyline
	   * @extends fabric.Object
	   * @see {@link fabric.Polyline#initialize} for constructor definition
	   */
	  fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'polyline',

	    /**
	     * Points array
	     * @type Array
	     * @default
	     */
	    points: null,

	    /**
	     * Minimum X from points values, necessary to offset points
	     * @type Number
	     * @default
	     */
	    minX: 0,

	    /**
	     * Minimum Y from points values, necessary to offset points
	     * @type Number
	     * @default
	     */
	    minY: 0,

	    /**
	     * Constructor
	     * @param {Array} points Array of points (where each point is an object with x and y)
	     * @param {Object} [options] Options object
	     * @param {Boolean} [skipOffset] Whether points offsetting should be skipped
	     * @return {fabric.Polyline} thisArg
	     * @example
	     * var poly = new fabric.Polyline([
	     *     { x: 10, y: 10 },
	     *     { x: 50, y: 30 },
	     *     { x: 40, y: 70 },
	     *     { x: 60, y: 50 },
	     *     { x: 100, y: 150 },
	     *     { x: 40, y: 100 }
	     *   ], {
	     *   stroke: 'red',
	     *   left: 100,
	     *   top: 100
	     * });
	     */
	    initialize: function(points, options) {
	      return fabric.Polygon.prototype.initialize.call(this, points, options);
	    },

	    /**
	     * @private
	     */
	    _calcDimensions: function() {
	      return fabric.Polygon.prototype._calcDimensions.call(this);
	    },

	    /**
	     * @private
	     */
	    _applyPointOffset: function() {
	      return fabric.Polygon.prototype._applyPointOffset.call(this);
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return fabric.Polygon.prototype.toObject.call(this, propertiesToInclude);
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns SVG representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      return fabric.Polygon.prototype.toSVG.call(this, reviver);
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx, noTransform) {
	      if (!fabric.Polygon.prototype.commonRender.call(this, ctx, noTransform)) {
	        return;
	      }
	      this._renderFill(ctx);
	      this._renderStroke(ctx);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderDashedStroke: function(ctx) {
	      var p1, p2;

	      ctx.beginPath();
	      for (var i = 0, len = this.points.length; i < len; i++) {
	        p1 = this.points[i];
	        p2 = this.points[i + 1] || p1;
	        fabric.util.drawDashedLine(ctx, p1.x, p1.y, p2.x, p2.y, this.strokeDashArray);
	      }
	    },

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity of this instance
	     */
	    complexity: function() {
	      return this.get('points').length;
	    }
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})
	   * @static
	   * @memberOf fabric.Polyline
	   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement
	   */
	  fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();

	  /**
	   * Returns fabric.Polyline instance from an SVG element
	   * @static
	   * @memberOf fabric.Polyline
	   * @param {SVGElement} element Element to parse
	   * @param {Object} [options] Options object
	   * @return {fabric.Polyline} Instance of fabric.Polyline
	   */
	  fabric.Polyline.fromElement = function(element, options) {
	    if (!element) {
	      return null;
	    }
	    options || (options = { });

	    var points = fabric.parsePointsAttribute(element.getAttribute('points')),
	        parsedAttributes = fabric.parseAttributes(element, fabric.Polyline.ATTRIBUTE_NAMES);

	    return new fabric.Polyline(points, fabric.util.object.extend(parsedAttributes, options));
	  };
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns fabric.Polyline instance from an object representation
	   * @static
	   * @memberOf fabric.Polyline
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Polyline} Instance of fabric.Polyline
	   */
	  fabric.Polyline.fromObject = function(object) {
	    var points = object.points;
	    return new fabric.Polyline(points, object, true);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      min = fabric.util.array.min,
	      max = fabric.util.array.max,
	      toFixed = fabric.util.toFixed;

	  if (fabric.Polygon) {
	    fabric.warn('fabric.Polygon is already defined');
	    return;
	  }

	  /**
	   * Polygon class
	   * @class fabric.Polygon
	   * @extends fabric.Object
	   * @see {@link fabric.Polygon#initialize} for constructor definition
	   */
	  fabric.Polygon = fabric.util.createClass(fabric.Object, /** @lends fabric.Polygon.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'polygon',

	    /**
	     * Points array
	     * @type Array
	     * @default
	     */
	    points: null,

	    /**
	     * Minimum X from points values, necessary to offset points
	     * @type Number
	     * @default
	     */
	    minX: 0,

	    /**
	     * Minimum Y from points values, necessary to offset points
	     * @type Number
	     * @default
	     */
	    minY: 0,

	    /**
	     * Constructor
	     * @param {Array} points Array of points
	     * @param {Object} [options] Options object
	     * @return {fabric.Polygon} thisArg
	     */
	    initialize: function(points, options) {
	      options = options || { };
	      this.points = points || [ ];
	      this.callSuper('initialize', options);
	      this._calcDimensions();
	      if (!('top' in options)) {
	        this.top = this.minY;
	      }
	      if (!('left' in options)) {
	        this.left = this.minX;
	      }
	      this.pathOffset = {
	        x: this.minX + this.width / 2,
	        y: this.minY + this.height / 2
	      };
	    },

	    /**
	     * @private
	     */
	    _calcDimensions: function() {

	      var points = this.points,
	          minX = min(points, 'x'),
	          minY = min(points, 'y'),
	          maxX = max(points, 'x'),
	          maxY = max(points, 'y');

	      this.width = (maxX - minX) || 0;
	      this.height = (maxY - minY) || 0;

	      this.minX = minX || 0,
	      this.minY = minY || 0;
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return extend(this.callSuper('toObject', propertiesToInclude), {
	        points: this.points.concat()
	      });
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      var points = [], addTransform,
	          markup = this._createBaseSVGMarkup();

	      for (var i = 0, len = this.points.length; i < len; i++) {
	        points.push(toFixed(this.points[i].x, 2), ',', toFixed(this.points[i].y, 2), ' ');
	      }
	      if (!(this.group && this.group.type === 'path-group')) {
	        addTransform = ' translate(' + (-this.pathOffset.x) + ', ' + (-this.pathOffset.y) + ') ';
	      }
	      markup.push(
	        '<', this.type, ' ',
	          'points="', points.join(''),
	          '" style="', this.getSvgStyles(),
	          '" transform="', this.getSvgTransform(), addTransform,
	          ' ', this.getSvgTransformMatrix(),
	        '"/>\n'
	      );

	      return reviver ? reviver(markup.join('')) : markup.join('');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx, noTransform) {
	      if (!this.commonRender(ctx, noTransform)) {
	        return;
	      }
	      this._renderFill(ctx);
	      if (this.stroke || this.strokeDashArray) {
	        ctx.closePath();
	        this._renderStroke(ctx);
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    commonRender: function(ctx, noTransform) {
	      var point, len = this.points.length;

	      if (!len || isNaN(this.points[len - 1].y)) {
	        // do not draw if no points or odd points
	        // NaN comes from parseFloat of a empty string in parser
	        return false;
	      }

	      noTransform || ctx.translate(-this.pathOffset.x, -this.pathOffset.y);
	      ctx.beginPath();
	      ctx.moveTo(this.points[0].x, this.points[0].y);
	      for (var i = 0; i < len; i++) {
	        point = this.points[i];
	        ctx.lineTo(point.x, point.y);
	      }
	      return true;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderDashedStroke: function(ctx) {
	      fabric.Polyline.prototype._renderDashedStroke.call(this, ctx);
	      ctx.closePath();
	    },

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity of this instance
	     */
	    complexity: function() {
	      return this.points.length;
	    }
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)
	   * @static
	   * @memberOf fabric.Polygon
	   * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement
	   */
	  fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();

	  /**
	   * Returns {@link fabric.Polygon} instance from an SVG element
	   * @static
	   * @memberOf fabric.Polygon
	   * @param {SVGElement} element Element to parse
	   * @param {Object} [options] Options object
	   * @return {fabric.Polygon} Instance of fabric.Polygon
	   */
	  fabric.Polygon.fromElement = function(element, options) {
	    if (!element) {
	      return null;
	    }

	    options || (options = { });

	    var points = fabric.parsePointsAttribute(element.getAttribute('points')),
	        parsedAttributes = fabric.parseAttributes(element, fabric.Polygon.ATTRIBUTE_NAMES);

	    return new fabric.Polygon(points, extend(parsedAttributes, options));
	  };
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns fabric.Polygon instance from an object representation
	   * @static
	   * @memberOf fabric.Polygon
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Polygon} Instance of fabric.Polygon
	   */
	  fabric.Polygon.fromObject = function(object) {
	    return new fabric.Polygon(object.points, object, true);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { }),
	      min = fabric.util.array.min,
	      max = fabric.util.array.max,
	      extend = fabric.util.object.extend,
	      _toString = Object.prototype.toString,
	      drawArc = fabric.util.drawArc,
	      commandLengths = {
	        m: 2,
	        l: 2,
	        h: 1,
	        v: 1,
	        c: 6,
	        s: 4,
	        q: 4,
	        t: 2,
	        a: 7
	      },
	      repeatedCommands = {
	        m: 'l',
	        M: 'L'
	      };

	  if (fabric.Path) {
	    fabric.warn('fabric.Path is already defined');
	    return;
	  }

	  /**
	   * Path class
	   * @class fabric.Path
	   * @extends fabric.Object
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}
	   * @see {@link fabric.Path#initialize} for constructor definition
	   */
	  fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'path',

	    /**
	     * Array of path points
	     * @type Array
	     * @default
	     */
	    path: null,

	    /**
	     * Minimum X from points values, necessary to offset points
	     * @type Number
	     * @default
	     */
	    minX: 0,

	    /**
	     * Minimum Y from points values, necessary to offset points
	     * @type Number
	     * @default
	     */
	    minY: 0,

	    /**
	     * Constructor
	     * @param {Array|String} path Path data (sequence of coordinates and corresponding "command" tokens)
	     * @param {Object} [options] Options object
	     * @return {fabric.Path} thisArg
	     */
	    initialize: function(path, options) {
	      options = options || { };

	      this.setOptions(options);

	      if (!path) {
	        path = [ ];
	      }

	      var fromArray = _toString.call(path) === '[object Array]';

	      this.path = fromArray
	        ? path
	        // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)
	        : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);

	      if (!this.path) {
	        return;
	      }

	      if (!fromArray) {
	        this.path = this._parsePath();
	      }

	      this._setPositionDimensions(options);

	      if (options.sourcePath) {
	        this.setSourcePath(options.sourcePath);
	      }
	    },

	    /**
	     * @private
	     * @param {Object} options Options object
	     */
	    _setPositionDimensions: function(options) {
	      var calcDim = this._parseDimensions();

	      this.minX = calcDim.left;
	      this.minY = calcDim.top;
	      this.width = calcDim.width;
	      this.height = calcDim.height;

	      if (typeof options.left === 'undefined') {
	        this.left = calcDim.left + (this.originX === 'center'
	          ? this.width / 2
	          : this.originX === 'right'
	            ? this.width
	            : 0);
	      }

	      if (typeof options.top === 'undefined') {
	        this.top = calcDim.top + (this.originY === 'center'
	          ? this.height / 2
	          : this.originY === 'bottom'
	            ? this.height
	            : 0);
	      }

	      this.pathOffset = this.pathOffset || {
	        x: this.minX + this.width / 2,
	        y: this.minY + this.height / 2
	      };
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx context to render path on
	     */
	    _render: function(ctx) {
	      var current, // current instruction
	          previous = null,
	          subpathStartX = 0,
	          subpathStartY = 0,
	          x = 0, // current x
	          y = 0, // current y
	          controlX = 0, // current control point x
	          controlY = 0, // current control point y
	          tempX,
	          tempY,
	          l = -this.pathOffset.x,
	          t = -this.pathOffset.y;

	      if (this.group && this.group.type === 'path-group') {
	        l = 0;
	        t = 0;
	      }

	      ctx.beginPath();

	      for (var i = 0, len = this.path.length; i < len; ++i) {

	        current = this.path[i];

	        switch (current[0]) { // first letter

	          case 'l': // lineto, relative
	            x += current[1];
	            y += current[2];
	            ctx.lineTo(x + l, y + t);
	            break;

	          case 'L': // lineto, absolute
	            x = current[1];
	            y = current[2];
	            ctx.lineTo(x + l, y + t);
	            break;

	          case 'h': // horizontal lineto, relative
	            x += current[1];
	            ctx.lineTo(x + l, y + t);
	            break;

	          case 'H': // horizontal lineto, absolute
	            x = current[1];
	            ctx.lineTo(x + l, y + t);
	            break;

	          case 'v': // vertical lineto, relative
	            y += current[1];
	            ctx.lineTo(x + l, y + t);
	            break;

	          case 'V': // verical lineto, absolute
	            y = current[1];
	            ctx.lineTo(x + l, y + t);
	            break;

	          case 'm': // moveTo, relative
	            x += current[1];
	            y += current[2];
	            subpathStartX = x;
	            subpathStartY = y;
	            ctx.moveTo(x + l, y + t);
	            break;

	          case 'M': // moveTo, absolute
	            x = current[1];
	            y = current[2];
	            subpathStartX = x;
	            subpathStartY = y;
	            ctx.moveTo(x + l, y + t);
	            break;

	          case 'c': // bezierCurveTo, relative
	            tempX = x + current[5];
	            tempY = y + current[6];
	            controlX = x + current[3];
	            controlY = y + current[4];
	            ctx.bezierCurveTo(
	              x + current[1] + l, // x1
	              y + current[2] + t, // y1
	              controlX + l, // x2
	              controlY + t, // y2
	              tempX + l,
	              tempY + t
	            );
	            x = tempX;
	            y = tempY;
	            break;

	          case 'C': // bezierCurveTo, absolute
	            x = current[5];
	            y = current[6];
	            controlX = current[3];
	            controlY = current[4];
	            ctx.bezierCurveTo(
	              current[1] + l,
	              current[2] + t,
	              controlX + l,
	              controlY + t,
	              x + l,
	              y + t
	            );
	            break;

	          case 's': // shorthand cubic bezierCurveTo, relative

	            // transform to absolute x,y
	            tempX = x + current[3];
	            tempY = y + current[4];

	            if (previous[0].match(/[CcSs]/) === null) {
	              // If there is no previous command or if the previous command was not a C, c, S, or s,
	              // the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control points
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }

	            ctx.bezierCurveTo(
	              controlX + l,
	              controlY + t,
	              x + current[1] + l,
	              y + current[2] + t,
	              tempX + l,
	              tempY + t
	            );
	            // set control point to 2nd one of this command
	            // "... the first control point is assumed to be
	            // the reflection of the second control point on
	            // the previous command relative to the current point."
	            controlX = x + current[1];
	            controlY = y + current[2];

	            x = tempX;
	            y = tempY;
	            break;

	          case 'S': // shorthand cubic bezierCurveTo, absolute
	            tempX = current[3];
	            tempY = current[4];
	            if (previous[0].match(/[CcSs]/) === null) {
	              // If there is no previous command or if the previous command was not a C, c, S, or s,
	              // the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control points
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }
	            ctx.bezierCurveTo(
	              controlX + l,
	              controlY + t,
	              current[1] + l,
	              current[2] + t,
	              tempX + l,
	              tempY + t
	            );
	            x = tempX;
	            y = tempY;

	            // set control point to 2nd one of this command
	            // "... the first control point is assumed to be
	            // the reflection of the second control point on
	            // the previous command relative to the current point."
	            controlX = current[1];
	            controlY = current[2];

	            break;

	          case 'q': // quadraticCurveTo, relative
	            // transform to absolute x,y
	            tempX = x + current[3];
	            tempY = y + current[4];

	            controlX = x + current[1];
	            controlY = y + current[2];

	            ctx.quadraticCurveTo(
	              controlX + l,
	              controlY + t,
	              tempX + l,
	              tempY + t
	            );
	            x = tempX;
	            y = tempY;
	            break;

	          case 'Q': // quadraticCurveTo, absolute
	            tempX = current[3];
	            tempY = current[4];

	            ctx.quadraticCurveTo(
	              current[1] + l,
	              current[2] + t,
	              tempX + l,
	              tempY + t
	            );
	            x = tempX;
	            y = tempY;
	            controlX = current[1];
	            controlY = current[2];
	            break;

	          case 't': // shorthand quadraticCurveTo, relative

	            // transform to absolute x,y
	            tempX = x + current[1];
	            tempY = y + current[2];

	            if (previous[0].match(/[QqTt]/) === null) {
	              // If there is no previous command or if the previous command was not a Q, q, T or t,
	              // assume the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control point
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }

	            ctx.quadraticCurveTo(
	              controlX + l,
	              controlY + t,
	              tempX + l,
	              tempY + t
	            );
	            x = tempX;
	            y = tempY;

	            break;

	          case 'T':
	            tempX = current[1];
	            tempY = current[2];

	            if (previous[0].match(/[QqTt]/) === null) {
	              // If there is no previous command or if the previous command was not a Q, q, T or t,
	              // assume the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control point
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }
	            ctx.quadraticCurveTo(
	              controlX + l,
	              controlY + t,
	              tempX + l,
	              tempY + t
	            );
	            x = tempX;
	            y = tempY;
	            break;

	          case 'a':
	            // TODO: optimize this
	            drawArc(ctx, x + l, y + t, [
	              current[1],
	              current[2],
	              current[3],
	              current[4],
	              current[5],
	              current[6] + x + l,
	              current[7] + y + t
	            ]);
	            x += current[6];
	            y += current[7];
	            break;

	          case 'A':
	            // TODO: optimize this
	            drawArc(ctx, x + l, y + t, [
	              current[1],
	              current[2],
	              current[3],
	              current[4],
	              current[5],
	              current[6] + l,
	              current[7] + t
	            ]);
	            x = current[6];
	            y = current[7];
	            break;

	          case 'z':
	          case 'Z':
	            x = subpathStartX;
	            y = subpathStartY;
	            ctx.closePath();
	            break;
	        }
	        previous = current;
	      }
	      this._renderFill(ctx);
	      this._renderStroke(ctx);
	    },

	    /**
	     * Returns string representation of an instance
	     * @return {String} string representation of an instance
	     */
	    toString: function() {
	      return '#<fabric.Path (' + this.complexity() +
	        '): { "top": ' + this.top + ', "left": ' + this.left + ' }>';
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      var o = extend(this.callSuper('toObject', propertiesToInclude), {
	        path: this.path.map(function(item) { return item.slice() }),
	        pathOffset: this.pathOffset
	      });
	      if (this.sourcePath) {
	        o.sourcePath = this.sourcePath;
	      }
	      if (this.transformMatrix) {
	        o.transformMatrix = this.transformMatrix;
	      }
	      return o;
	    },

	    /**
	     * Returns dataless object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toDatalessObject: function(propertiesToInclude) {
	      var o = this.toObject(propertiesToInclude);
	      if (this.sourcePath) {
	        o.path = this.sourcePath;
	      }
	      delete o.sourcePath;
	      return o;
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      var chunks = [],
	          markup = this._createBaseSVGMarkup(), addTransform = '';

	      for (var i = 0, len = this.path.length; i < len; i++) {
	        chunks.push(this.path[i].join(' '));
	      }
	      var path = chunks.join(' ');
	      if (!(this.group && this.group.type === 'path-group')) {
	        addTransform = ' translate(' + (-this.pathOffset.x) + ', ' + (-this.pathOffset.y) + ') ';
	      }
	      markup.push(
	        //jscs:disable validateIndentation
	        '<path ',
	          'd="', path,
	          '" style="', this.getSvgStyles(),
	          '" transform="', this.getSvgTransform(), addTransform,
	          this.getSvgTransformMatrix(), '" stroke-linecap="round" ',
	        '/>\n'
	        //jscs:enable validateIndentation
	      );

	      return reviver ? reviver(markup.join('')) : markup.join('');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns number representation of an instance complexity
	     * @return {Number} complexity of this instance
	     */
	    complexity: function() {
	      return this.path.length;
	    },

	    /**
	     * @private
	     */
	    _parsePath: function() {
	      var result = [ ],
	          coords = [ ],
	          currentPath,
	          parsed,
	          re = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/ig,
	          match,
	          coordsStr;

	      for (var i = 0, coordsParsed, len = this.path.length; i < len; i++) {
	        currentPath = this.path[i];

	        coordsStr = currentPath.slice(1).trim();
	        coords.length = 0;

	        while ((match = re.exec(coordsStr))) {
	          coords.push(match[0]);
	        }

	        coordsParsed = [ currentPath.charAt(0) ];

	        for (var j = 0, jlen = coords.length; j < jlen; j++) {
	          parsed = parseFloat(coords[j]);
	          if (!isNaN(parsed)) {
	            coordsParsed.push(parsed);
	          }
	        }

	        var command = coordsParsed[0],
	            commandLength = commandLengths[command.toLowerCase()],
	            repeatedCommand = repeatedCommands[command] || command;

	        if (coordsParsed.length - 1 > commandLength) {
	          for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {
	            result.push([ command ].concat(coordsParsed.slice(k, k + commandLength)));
	            command = repeatedCommand;
	          }
	        }
	        else {
	          result.push(coordsParsed);
	        }
	      }

	      return result;
	    },

	    /**
	     * @private
	     */
	    _parseDimensions: function() {

	      var aX = [],
	          aY = [],
	          current, // current instruction
	          previous = null,
	          subpathStartX = 0,
	          subpathStartY = 0,
	          x = 0, // current x
	          y = 0, // current y
	          controlX = 0, // current control point x
	          controlY = 0, // current control point y
	          tempX,
	          tempY,
	          bounds;

	      for (var i = 0, len = this.path.length; i < len; ++i) {

	        current = this.path[i];

	        switch (current[0]) { // first letter

	          case 'l': // lineto, relative
	            x += current[1];
	            y += current[2];
	            bounds = [ ];
	            break;

	          case 'L': // lineto, absolute
	            x = current[1];
	            y = current[2];
	            bounds = [ ];
	            break;

	          case 'h': // horizontal lineto, relative
	            x += current[1];
	            bounds = [ ];
	            break;

	          case 'H': // horizontal lineto, absolute
	            x = current[1];
	            bounds = [ ];
	            break;

	          case 'v': // vertical lineto, relative
	            y += current[1];
	            bounds = [ ];
	            break;

	          case 'V': // verical lineto, absolute
	            y = current[1];
	            bounds = [ ];
	            break;

	          case 'm': // moveTo, relative
	            x += current[1];
	            y += current[2];
	            subpathStartX = x;
	            subpathStartY = y;
	            bounds = [ ];
	            break;

	          case 'M': // moveTo, absolute
	            x = current[1];
	            y = current[2];
	            subpathStartX = x;
	            subpathStartY = y;
	            bounds = [ ];
	            break;

	          case 'c': // bezierCurveTo, relative
	            tempX = x + current[5];
	            tempY = y + current[6];
	            controlX = x + current[3];
	            controlY = y + current[4];
	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              x + current[1], // x1
	              y + current[2], // y1
	              controlX, // x2
	              controlY, // y2
	              tempX,
	              tempY
	            );
	            x = tempX;
	            y = tempY;
	            break;

	          case 'C': // bezierCurveTo, absolute
	            x = current[5];
	            y = current[6];
	            controlX = current[3];
	            controlY = current[4];
	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              current[1],
	              current[2],
	              controlX,
	              controlY,
	              x,
	              y
	            );
	            break;

	          case 's': // shorthand cubic bezierCurveTo, relative

	            // transform to absolute x,y
	            tempX = x + current[3];
	            tempY = y + current[4];

	            if (previous[0].match(/[CcSs]/) === null) {
	              // If there is no previous command or if the previous command was not a C, c, S, or s,
	              // the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control points
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }

	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              controlX,
	              controlY,
	              x + current[1],
	              y + current[2],
	              tempX,
	              tempY
	            );
	            // set control point to 2nd one of this command
	            // "... the first control point is assumed to be
	            // the reflection of the second control point on
	            // the previous command relative to the current point."
	            controlX = x + current[1];
	            controlY = y + current[2];
	            x = tempX;
	            y = tempY;
	            break;

	          case 'S': // shorthand cubic bezierCurveTo, absolute
	            tempX = current[3];
	            tempY = current[4];
	            if (previous[0].match(/[CcSs]/) === null) {
	              // If there is no previous command or if the previous command was not a C, c, S, or s,
	              // the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control points
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }
	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              controlX,
	              controlY,
	              current[1],
	              current[2],
	              tempX,
	              tempY
	            );
	            x = tempX;
	            y = tempY;
	            // set control point to 2nd one of this command
	            // "... the first control point is assumed to be
	            // the reflection of the second control point on
	            // the previous command relative to the current point."
	            controlX = current[1];
	            controlY = current[2];
	            break;

	          case 'q': // quadraticCurveTo, relative
	            // transform to absolute x,y
	            tempX = x + current[3];
	            tempY = y + current[4];
	            controlX = x + current[1];
	            controlY = y + current[2];
	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              controlX,
	              controlY,
	              controlX,
	              controlY,
	              tempX,
	              tempY
	            );
	            x = tempX;
	            y = tempY;
	            break;

	          case 'Q': // quadraticCurveTo, absolute
	            controlX = current[1];
	            controlY = current[2];
	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              controlX,
	              controlY,
	              controlX,
	              controlY,
	              current[3],
	              current[4]
	            );
	            x = current[3];
	            y = current[4];
	            break;

	          case 't': // shorthand quadraticCurveTo, relative
	            // transform to absolute x,y
	            tempX = x + current[1];
	            tempY = y + current[2];
	            if (previous[0].match(/[QqTt]/) === null) {
	              // If there is no previous command or if the previous command was not a Q, q, T or t,
	              // assume the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control point
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }

	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              controlX,
	              controlY,
	              controlX,
	              controlY,
	              tempX,
	              tempY
	            );
	            x = tempX;
	            y = tempY;

	            break;

	          case 'T':
	            tempX = current[1];
	            tempY = current[2];

	            if (previous[0].match(/[QqTt]/) === null) {
	              // If there is no previous command or if the previous command was not a Q, q, T or t,
	              // assume the control point is coincident with the current point
	              controlX = x;
	              controlY = y;
	            }
	            else {
	              // calculate reflection of previous control point
	              controlX = 2 * x - controlX;
	              controlY = 2 * y - controlY;
	            }
	            bounds = fabric.util.getBoundsOfCurve(x, y,
	              controlX,
	              controlY,
	              controlX,
	              controlY,
	              tempX,
	              tempY
	            );
	            x = tempX;
	            y = tempY;
	            break;

	          case 'a':
	            // TODO: optimize this
	            bounds = fabric.util.getBoundsOfArc(x, y,
	              current[1],
	              current[2],
	              current[3],
	              current[4],
	              current[5],
	              current[6] + x,
	              current[7] + y
	            );
	            x += current[6];
	            y += current[7];
	            break;

	          case 'A':
	            // TODO: optimize this
	            bounds = fabric.util.getBoundsOfArc(x, y,
	              current[1],
	              current[2],
	              current[3],
	              current[4],
	              current[5],
	              current[6],
	              current[7]
	            );
	            x = current[6];
	            y = current[7];
	            break;

	          case 'z':
	          case 'Z':
	            x = subpathStartX;
	            y = subpathStartY;
	            break;
	        }
	        previous = current;
	        bounds.forEach(function (point) {
	          aX.push(point.x);
	          aY.push(point.y);
	        });
	        aX.push(x);
	        aY.push(y);
	      }

	      var minX = min(aX) || 0,
	          minY = min(aY) || 0,
	          maxX = max(aX) || 0,
	          maxY = max(aY) || 0,
	          deltaX = maxX - minX,
	          deltaY = maxY - minY,

	          o = {
	            left: minX,
	            top: minY,
	            width: deltaX,
	            height: deltaY
	          };

	      return o;
	    }
	  });

	  /**
	   * Creates an instance of fabric.Path from an object
	   * @static
	   * @memberOf fabric.Path
	   * @param {Object} object
	   * @param {Function} callback Callback to invoke when an fabric.Path instance is created
	   */
	  fabric.Path.fromObject = function(object, callback) {
	    if (typeof object.path === 'string') {
	      fabric.loadSVGFromURL(object.path, function (elements) {
	        var path = elements[0],
	            pathUrl = object.path;

	        delete object.path;

	        fabric.util.object.extend(path, object);
	        path.setSourcePath(pathUrl);

	        callback(path);
	      });
	    }
	    else {
	      callback(new fabric.Path(object.path, object));
	    }
	  };

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)
	   * @static
	   * @memberOf fabric.Path
	   * @see http://www.w3.org/TR/SVG/paths.html#PathElement
	   */
	  fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);

	  /**
	   * Creates an instance of fabric.Path from an SVG <path> element
	   * @static
	   * @memberOf fabric.Path
	   * @param {SVGElement} element to parse
	   * @param {Function} callback Callback to invoke when an fabric.Path instance is created
	   * @param {Object} [options] Options object
	   */
	  fabric.Path.fromElement = function(element, callback, options) {
	    var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);
	    callback && callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));
	  };
	  /* _FROM_SVG_END_ */

	  /**
	   * Indicates that instances of this type are async
	   * @static
	   * @memberOf fabric.Path
	   * @type Boolean
	   * @default
	   */
	  fabric.Path.async = true;

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      invoke = fabric.util.array.invoke,
	      parentToObject = fabric.Object.prototype.toObject;

	  if (fabric.PathGroup) {
	    fabric.warn('fabric.PathGroup is already defined');
	    return;
	  }

	  /**
	   * Path group class
	   * @class fabric.PathGroup
	   * @extends fabric.Path
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}
	   * @see {@link fabric.PathGroup#initialize} for constructor definition
	   */
	  fabric.PathGroup = fabric.util.createClass(fabric.Path, /** @lends fabric.PathGroup.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'path-group',

	    /**
	     * Fill value
	     * @type String
	     * @default
	     */
	    fill: '',

	    /**
	     * Constructor
	     * @param {Array} paths
	     * @param {Object} [options] Options object
	     * @return {fabric.PathGroup} thisArg
	     */
	    initialize: function(paths, options) {

	      options = options || { };
	      this.paths = paths || [ ];

	      for (var i = this.paths.length; i--;) {
	        this.paths[i].group = this;
	      }

	      if (options.toBeParsed) {
	        this.parseDimensionsFromPaths(options);
	        delete options.toBeParsed;
	      }
	      this.setOptions(options);
	      this.setCoords();

	      if (options.sourcePath) {
	        this.setSourcePath(options.sourcePath);
	      }
	    },

	    /**
	     * Calculate width and height based on paths contained
	     */
	    parseDimensionsFromPaths: function(options) {
	      var points, p, xC = [ ], yC = [ ], path, height, width,
	          m;
	      for (var j = this.paths.length; j--;) {
	        path = this.paths[j];
	        height = path.height + path.strokeWidth;
	        width = path.width + path.strokeWidth;
	        points = [
	          { x: path.left, y: path.top },
	          { x: path.left + width, y: path.top },
	          { x: path.left, y: path.top + height },
	          { x: path.left + width, y: path.top + height }
	        ];
	        m = this.paths[j].transformMatrix;
	        for (var i = 0; i < points.length; i++) {
	          p = points[i];
	          if (m) {
	            p = fabric.util.transformPoint(p, m, false);
	          }
	          xC.push(p.x);
	          yC.push(p.y);
	        }
	      }
	      options.width = Math.max.apply(null, xC);
	      options.height = Math.max.apply(null, yC);
	    },

	    /**
	     * Renders this group on a specified context
	     * @param {CanvasRenderingContext2D} ctx Context to render this instance on
	     */
	    render: function(ctx) {
	      // do not render if object is not visible
	      if (!this.visible) {
	        return;
	      }

	      ctx.save();

	      if (this.transformMatrix) {
	        ctx.transform.apply(ctx, this.transformMatrix);
	      }
	      this.transform(ctx);

	      this._setShadow(ctx);
	      this.clipTo && fabric.util.clipContext(this, ctx);
	      ctx.translate(-this.width/2, -this.height/2);
	      for (var i = 0, l = this.paths.length; i < l; ++i) {
	        this.paths[i].render(ctx, true);
	      }
	      this.clipTo && ctx.restore();
	      ctx.restore();
	    },

	    /**
	     * Sets certain property to a certain value
	     * @param {String} prop
	     * @param {Any} value
	     * @return {fabric.PathGroup} thisArg
	     */
	    _set: function(prop, value) {

	      if (prop === 'fill' && value && this.isSameColor()) {
	        var i = this.paths.length;
	        while (i--) {
	          this.paths[i]._set(prop, value);
	        }
	      }

	      return this.callSuper('_set', prop, value);
	    },

	    /**
	     * Returns object representation of this path group
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      var o = extend(parentToObject.call(this, propertiesToInclude), {
	        paths: invoke(this.getObjects(), 'toObject', propertiesToInclude)
	      });
	      if (this.sourcePath) {
	        o.sourcePath = this.sourcePath;
	      }
	      return o;
	    },

	    /**
	     * Returns dataless object representation of this path group
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} dataless object representation of an instance
	     */
	    toDatalessObject: function(propertiesToInclude) {
	      var o = this.toObject(propertiesToInclude);
	      if (this.sourcePath) {
	        o.paths = this.sourcePath;
	      }
	      return o;
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      var objects = this.getObjects(),
	          p = this.getPointByOrigin('left', 'top'),
	          translatePart = 'translate(' + p.x + ' ' + p.y + ')',
	          markup = this._createBaseSVGMarkup();
	      markup.push(
	        '<g ',
	        'style="', this.getSvgStyles(), '" ',
	        'transform="', this.getSvgTransformMatrix(), translatePart, this.getSvgTransform(), '" ',
	        '>\n'
	      );

	      for (var i = 0, len = objects.length; i < len; i++) {
	        markup.push('\t', objects[i].toSVG(reviver));
	      }
	      markup.push('</g>\n');

	      return reviver ? reviver(markup.join('')) : markup.join('');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns a string representation of this path group
	     * @return {String} string representation of an object
	     */
	    toString: function() {
	      return '#<fabric.PathGroup (' + this.complexity() +
	        '): { top: ' + this.top + ', left: ' + this.left + ' }>';
	    },

	    /**
	     * Returns true if all paths in this group are of same color
	     * @return {Boolean} true if all paths are of the same color (`fill`)
	     */
	    isSameColor: function() {
	      var firstPathFill = this.getObjects()[0].get('fill') || '';
	      if (typeof firstPathFill !== 'string') {
	        return false;
	      }
	      firstPathFill = firstPathFill.toLowerCase();
	      return this.getObjects().every(function(path) {
	        var pathFill = path.get('fill') || '';
	        return typeof pathFill === 'string' && (pathFill).toLowerCase() === firstPathFill;
	      });
	    },

	    /**
	     * Returns number representation of object's complexity
	     * @return {Number} complexity
	     */
	    complexity: function() {
	      return this.paths.reduce(function(total, path) {
	        return total + ((path && path.complexity) ? path.complexity() : 0);
	      }, 0);
	    },

	    /**
	     * Returns all paths in this path group
	     * @return {Array} array of path objects included in this path group
	     */
	    getObjects: function() {
	      return this.paths;
	    }
	  });

	  /**
	   * Creates fabric.PathGroup instance from an object representation
	   * @static
	   * @memberOf fabric.PathGroup
	   * @param {Object} object Object to create an instance from
	   * @param {Function} callback Callback to invoke when an fabric.PathGroup instance is created
	   */
	  fabric.PathGroup.fromObject = function(object, callback) {
	    if (typeof object.paths === 'string') {
	      fabric.loadSVGFromURL(object.paths, function (elements) {

	        var pathUrl = object.paths;
	        delete object.paths;

	        var pathGroup = fabric.util.groupSVGElements(elements, object, pathUrl);

	        callback(pathGroup);
	      });
	    }
	    else {
	      fabric.util.enlivenObjects(object.paths, function(enlivenedObjects) {
	        delete object.paths;
	        callback(new fabric.PathGroup(enlivenedObjects, object));
	      });
	    }
	  };

	  /**
	   * Indicates that instances of this type are async
	   * @static
	   * @memberOf fabric.PathGroup
	   * @type Boolean
	   * @default
	   */
	  fabric.PathGroup.async = true;

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      min = fabric.util.array.min,
	      max = fabric.util.array.max,
	      invoke = fabric.util.array.invoke;

	  if (fabric.Group) {
	    return;
	  }

	  // lock-related properties, for use in fabric.Group#get
	  // to enable locking behavior on group
	  // when one of its objects has lock-related properties set
	  var _lockProperties = {
	    lockMovementX:  true,
	    lockMovementY:  true,
	    lockRotation:   true,
	    lockScalingX:   true,
	    lockScalingY:   true,
	    lockUniScaling: true
	  };

	  /**
	   * Group class
	   * @class fabric.Group
	   * @extends fabric.Object
	   * @mixes fabric.Collection
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}
	   * @see {@link fabric.Group#initialize} for constructor definition
	   */
	  fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'group',

	    /**
	     * Width of stroke
	     * @type Number
	     * @default
	     */
	    strokeWidth: 0,

	    /**
	     * Constructor
	     * @param {Object} objects Group objects
	     * @param {Object} [options] Options object
	     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.
	     * @return {Object} thisArg
	     */
	    initialize: function(objects, options, isAlreadyGrouped) {
	      options = options || { };

	      this._objects = [];
	      // if objects enclosed in a group have been grouped already,
	      // we cannot change properties of objects.
	      // Thus we need to set options to group without objects,
	      // because delegatedProperties propagate to objects.
	      isAlreadyGrouped && this.callSuper('initialize', options);

	      this._objects = objects || [];
	      for (var i = this._objects.length; i--; ) {
	        this._objects[i].group = this;
	      }

	      this.originalState = { };

	      if (options.originX) {
	        this.originX = options.originX;
	      }
	      if (options.originY) {
	        this.originY = options.originY;
	      }

	      if (isAlreadyGrouped) {
	        // do not change coordinate of objects enclosed in a group,
	        // because objects coordinate system have been group coodinate system already.
	        this._updateObjectsCoords(true);
	      }
	      else {
	        this._calcBounds();
	        this._updateObjectsCoords();
	        this.callSuper('initialize', options);
	      }

	      this.setCoords();
	      this.saveCoords();
	    },

	    /**
	     * @private
	     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change
	     */
	    _updateObjectsCoords: function(skipCoordsChange) {
	      for (var i = this._objects.length; i--; ){
	        this._updateObjectCoords(this._objects[i], skipCoordsChange);
	      }
	    },

	    /**
	     * @private
	     * @param {Object} object
	     * @param {Boolean} [skipCoordsChange] if true, coordinates of object dose not change
	     */
	    _updateObjectCoords: function(object, skipCoordsChange) {
	      // do not display corners of objects enclosed in a group
	      object.__origHasControls = object.hasControls;
	      object.hasControls = false;

	      if (skipCoordsChange) {
	        return;
	      }

	      var objectLeft = object.getLeft(),
	          objectTop = object.getTop(),
	          center = this.getCenterPoint();

	      object.set({
	        originalLeft: objectLeft,
	        originalTop: objectTop,
	        left: objectLeft - center.x,
	        top: objectTop - center.y
	      });
	      object.setCoords();
	    },

	    /**
	     * Returns string represenation of a group
	     * @return {String}
	     */
	    toString: function() {
	      return '#<fabric.Group: (' + this.complexity() + ')>';
	    },

	    /**
	     * Adds an object to a group; Then recalculates group's dimension, position.
	     * @param {Object} object
	     * @return {fabric.Group} thisArg
	     * @chainable
	     */
	    addWithUpdate: function(object) {
	      this._restoreObjectsState();
	      fabric.util.resetObjectTransform(this);
	      if (object) {
	        this._objects.push(object);
	        object.group = this;
	        object._set('canvas', this.canvas);
	      }
	      // since _restoreObjectsState set objects inactive
	      this.forEachObject(this._setObjectActive, this);
	      this._calcBounds();
	      this._updateObjectsCoords();
	      return this;
	    },

	    /**
	     * @private
	     */
	    _setObjectActive: function(object) {
	      object.set('active', true);
	      object.group = this;
	    },

	    /**
	     * Removes an object from a group; Then recalculates group's dimension, position.
	     * @param {Object} object
	     * @return {fabric.Group} thisArg
	     * @chainable
	     */
	    removeWithUpdate: function(object) {
	      this._restoreObjectsState();
	      fabric.util.resetObjectTransform(this);
	      // since _restoreObjectsState set objects inactive
	      this.forEachObject(this._setObjectActive, this);

	      this.remove(object);
	      this._calcBounds();
	      this._updateObjectsCoords();

	      return this;
	    },

	    /**
	     * @private
	     */
	    _onObjectAdded: function(object) {
	      object.group = this;
	      object._set('canvas', this.canvas);
	    },

	    /**
	     * @private
	     */
	    _onObjectRemoved: function(object) {
	      delete object.group;
	      object.set('active', false);
	    },

	    /**
	     * Properties that are delegated to group objects when reading/writing
	     * @param {Object} delegatedProperties
	     */
	    delegatedProperties: {
	      fill:             true,
	      stroke:           true,
	      strokeWidth:      true,
	      fontFamily:       true,
	      fontWeight:       true,
	      fontSize:         true,
	      fontStyle:        true,
	      lineHeight:       true,
	      textDecoration:   true,
	      textAlign:        true,
	      backgroundColor:  true
	    },

	    /**
	     * @private
	     */
	    _set: function(key, value) {
	      var i = this._objects.length;

	      if (this.delegatedProperties[key] || key === 'canvas') {
	        while (i--) {
	          this._objects[i].set(key, value);
	        }
	      }
	      else {
	        while (i--) {
	          this._objects[i].setOnGroup(key, value);
	        }
	      }

	      this.callSuper('_set', key, value);
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return extend(this.callSuper('toObject', propertiesToInclude), {
	        objects: invoke(this._objects, 'toObject', propertiesToInclude)
	      });
	    },

	    /**
	     * Renders instance on a given context
	     * @param {CanvasRenderingContext2D} ctx context to render instance on
	     */
	    render: function(ctx) {
	      // do not render if object is not visible
	      if (!this.visible) {
	        return;
	      }

	      ctx.save();
	      if (this.transformMatrix) {
	        ctx.transform.apply(ctx, this.transformMatrix);
	      }
	      this.transform(ctx);
	      this._setShadow(ctx);
	      this.clipTo && fabric.util.clipContext(this, ctx);
	      // the array is now sorted in order of highest first, so start from end
	      for (var i = 0, len = this._objects.length; i < len; i++) {
	        this._renderObject(this._objects[i], ctx);
	      }

	      this.clipTo && ctx.restore();

	      ctx.restore();
	    },

	    /**
	     * Renders controls and borders for the object
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Boolean} [noTransform] When true, context is not transformed
	     */
	    _renderControls: function(ctx, noTransform) {
	      this.callSuper('_renderControls', ctx, noTransform);
	      for (var i = 0, len = this._objects.length; i < len; i++) {
	        this._objects[i]._renderControls(ctx);
	      }
	    },

	    /**
	     * @private
	     */
	    _renderObject: function(object, ctx) {
	      // do not render if object is not visible
	      if (!object.visible) {
	        return;
	      }

	      var originalHasRotatingPoint = object.hasRotatingPoint;
	      object.hasRotatingPoint = false;
	      object.render(ctx);
	      object.hasRotatingPoint = originalHasRotatingPoint;
	    },

	    /**
	     * Retores original state of each of group objects (original state is that which was before group was created).
	     * @private
	     * @return {fabric.Group} thisArg
	     * @chainable
	     */
	    _restoreObjectsState: function() {
	      this._objects.forEach(this._restoreObjectState, this);
	      return this;
	    },

	    /**
	     * Realises the transform from this group onto the supplied object
	     * i.e. it tells you what would happen if the supplied object was in
	     * the group, and then the group was destroyed. It mutates the supplied
	     * object.
	     * @param {fabric.Object} object
	     * @return {fabric.Object} transformedObject
	     */
	    realizeTransform: function(object) {
	      var matrix = object.calcTransformMatrix(),
	          options = fabric.util.qrDecompose(matrix),
	          center = new fabric.Point(options.translateX, options.translateY);
	      object.scaleX = options.scaleX;
	      object.scaleY = options.scaleY;
	      object.skewX = options.skewX;
	      object.skewY = options.skewY;
	      object.angle = options.angle;
	      object.flipX = false;
	      object.flipY = false;
	      object.setPositionByOrigin(center, 'center', 'center');
	      return object;
	    },

	    /**
	     * Restores original state of a specified object in group
	     * @private
	     * @param {fabric.Object} object
	     * @return {fabric.Group} thisArg
	     */
	    _restoreObjectState: function(object) {
	      this.realizeTransform(object);
	      object.setCoords();
	      object.hasControls = object.__origHasControls;
	      delete object.__origHasControls;
	      object.set('active', false);
	      delete object.group;

	      return this;
	    },

	    /**
	     * Destroys a group (restoring state of its objects)
	     * @return {fabric.Group} thisArg
	     * @chainable
	     */
	    destroy: function() {
	      return this._restoreObjectsState();
	    },

	    /**
	     * Saves coordinates of this instance (to be used together with `hasMoved`)
	     * @saveCoords
	     * @return {fabric.Group} thisArg
	     * @chainable
	     */
	    saveCoords: function() {
	      this._originalLeft = this.get('left');
	      this._originalTop = this.get('top');
	      return this;
	    },

	    /**
	     * Checks whether this group was moved (since `saveCoords` was called last)
	     * @return {Boolean} true if an object was moved (since fabric.Group#saveCoords was called)
	     */
	    hasMoved: function() {
	      return this._originalLeft !== this.get('left') ||
	             this._originalTop !== this.get('top');
	    },

	    /**
	     * Sets coordinates of all group objects
	     * @return {fabric.Group} thisArg
	     * @chainable
	     */
	    setObjectsCoords: function() {
	      this.forEachObject(function(object) {
	        object.setCoords();
	      });
	      return this;
	    },

	    /**
	     * @private
	     */
	    _calcBounds: function(onlyWidthHeight) {
	      var aX = [],
	          aY = [],
	          o, prop,
	          props = ['tr', 'br', 'bl', 'tl'],
	          i = 0, iLen = this._objects.length,
	          j, jLen = props.length;

	      for ( ; i < iLen; ++i) {
	        o = this._objects[i];
	        o.setCoords();
	        for (j = 0; j < jLen; j++) {
	          prop = props[j];
	          aX.push(o.oCoords[prop].x);
	          aY.push(o.oCoords[prop].y);
	        }
	      }

	      this.set(this._getBounds(aX, aY, onlyWidthHeight));
	    },

	    /**
	     * @private
	     */
	    _getBounds: function(aX, aY, onlyWidthHeight) {
	      var ivt = fabric.util.invertTransform(this.getViewportTransform()),
	          minXY = fabric.util.transformPoint(new fabric.Point(min(aX), min(aY)), ivt),
	          maxXY = fabric.util.transformPoint(new fabric.Point(max(aX), max(aY)), ivt),
	          obj = {
	            width: (maxXY.x - minXY.x) || 0,
	            height: (maxXY.y - minXY.y) || 0
	          };

	      if (!onlyWidthHeight) {
	        obj.left = minXY.x || 0;
	        obj.top = minXY.y || 0;
	        if (this.originX === 'center') {
	          obj.left += obj.width / 2;
	        }
	        if (this.originX === 'right') {
	          obj.left += obj.width;
	        }
	        if (this.originY === 'center') {
	          obj.top += obj.height / 2;
	        }
	        if (this.originY === 'bottom') {
	          obj.top += obj.height;
	        }
	      }
	      return obj;
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns svg representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      var markup = this._createBaseSVGMarkup();
	      markup.push(
	        '<g transform="',
	        /* avoiding styles intentionally */
	        this.getSvgTransform(),
	        this.getSvgTransformMatrix(),
	        '" style="',
	        this.getSvgFilter(),
	        '">\n'
	      );

	      for (var i = 0, len = this._objects.length; i < len; i++) {
	        markup.push('\t', this._objects[i].toSVG(reviver));
	      }

	      markup.push('</g>\n');

	      return reviver ? reviver(markup.join('')) : markup.join('');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns requested property
	     * @param {String} prop Property to get
	     * @return {Any}
	     */
	    get: function(prop) {
	      if (prop in _lockProperties) {
	        if (this[prop]) {
	          return this[prop];
	        }
	        else {
	          for (var i = 0, len = this._objects.length; i < len; i++) {
	            if (this._objects[i][prop]) {
	              return true;
	            }
	          }
	          return false;
	        }
	      }
	      else {
	        if (prop in this.delegatedProperties) {
	          return this._objects[0] && this._objects[0].get(prop);
	        }
	        return this[prop];
	      }
	    }
	  });

	  /**
	   * Returns {@link fabric.Group} instance from an object representation
	   * @static
	   * @memberOf fabric.Group
	   * @param {Object} object Object to create a group from
	   * @param {Function} [callback] Callback to invoke when an group instance is created
	   * @return {fabric.Group} An instance of fabric.Group
	   */
	  fabric.Group.fromObject = function(object, callback) {
	    fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {
	      delete object.objects;
	      callback && callback(new fabric.Group(enlivenedObjects, object, true));
	    });
	  };

	  /**
	   * Indicates that instances of this type are async
	   * @static
	   * @memberOf fabric.Group
	   * @type Boolean
	   * @default
	   */
	  fabric.Group.async = true;

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var extend = fabric.util.object.extend;

	  if (!global.fabric) {
	    global.fabric = { };
	  }

	  if (global.fabric.Image) {
	    fabric.warn('fabric.Image is already defined.');
	    return;
	  }

	  /**
	   * Image class
	   * @class fabric.Image
	   * @extends fabric.Object
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}
	   * @see {@link fabric.Image#initialize} for constructor definition
	   */
	  fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'image',

	    /**
	     * crossOrigin value (one of "", "anonymous", "use-credentials")
	     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes
	     * @type String
	     * @default
	     */
	    crossOrigin: '',

	    /**
	     * AlignX value, part of preserveAspectRatio (one of "none", "mid", "min", "max")
	     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute
	     * This parameter defines how the picture is aligned to its viewport when image element width differs from image width.
	     * @type String
	     * @default
	     */
	    alignX: 'none',

	    /**
	     * AlignY value, part of preserveAspectRatio (one of "none", "mid", "min", "max")
	     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute
	     * This parameter defines how the picture is aligned to its viewport when image element height differs from image height.
	     * @type String
	     * @default
	     */
	    alignY: 'none',

	    /**
	     * meetOrSlice value, part of preserveAspectRatio  (one of "meet", "slice").
	     * if meet the image is always fully visibile, if slice the viewport is always filled with image.
	     * @see http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute
	     * @type String
	     * @default
	     */
	    meetOrSlice: 'meet',

	    /**
	     * Width of a stroke.
	     * For image quality a stroke multiple of 2 gives better results.
	     * @type Number
	     * @default
	     */
	    strokeWidth: 0,

	    /**
	     * private
	     * contains last value of scaleX to detect
	     * if the Image got resized after the last Render
	     * @type Number
	     */
	    _lastScaleX: 1,

	    /**
	     * private
	     * contains last value of scaleY to detect
	     * if the Image got resized after the last Render
	     * @type Number
	     */
	    _lastScaleY: 1,

	    /**
	     * Constructor
	     * @param {HTMLImageElement | String} element Image element
	     * @param {Object} [options] Options object
	     * @return {fabric.Image} thisArg
	     */
	    initialize: function(element, options) {
	      options || (options = { });
	      this.filters = [ ];
	      this.resizeFilters = [ ];
	      this.callSuper('initialize', options);
	      this._initElement(element, options);
	    },

	    /**
	     * Returns image element which this instance if based on
	     * @return {HTMLImageElement} Image element
	     */
	    getElement: function() {
	      return this._element;
	    },

	    /**
	     * Sets image element for this instance to a specified one.
	     * If filters defined they are applied to new image.
	     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.
	     * @param {HTMLImageElement} element
	     * @param {Function} [callback] Callback is invoked when all filters have been applied and new image is generated
	     * @param {Object} [options] Options object
	     * @return {fabric.Image} thisArg
	     * @chainable
	     */
	    setElement: function(element, callback, options) {
	      this._element = element;
	      this._originalElement = element;
	      this._initConfig(options);

	      if (this.filters.length !== 0) {
	        this.applyFilters(callback);
	      }
	      else if (callback) {
	        callback();
	      }

	      return this;
	    },

	    /**
	     * Sets crossOrigin value (on an instance and corresponding image element)
	     * @return {fabric.Image} thisArg
	     * @chainable
	     */
	    setCrossOrigin: function(value) {
	      this.crossOrigin = value;
	      this._element.crossOrigin = value;

	      return this;
	    },

	    /**
	     * Returns original size of an image
	     * @return {Object} Object with "width" and "height" properties
	     */
	    getOriginalSize: function() {
	      var element = this.getElement();
	      return {
	        width: element.width,
	        height: element.height
	      };
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _stroke: function(ctx) {
	      ctx.save();
	      this._setStrokeStyles(ctx);
	      ctx.beginPath();
	      ctx.strokeRect(-this.width / 2, -this.height / 2, this.width, this.height);
	      ctx.closePath();
	      ctx.restore();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderDashedStroke: function(ctx) {
	      var x = -this.width / 2,
	          y = -this.height / 2,
	          w = this.width,
	          h = this.height;

	      ctx.save();
	      this._setStrokeStyles(ctx);

	      ctx.beginPath();
	      fabric.util.drawDashedLine(ctx, x, y, x + w, y, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, x + w, y, x + w, y + h, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, x + w, y + h, x, y + h, this.strokeDashArray);
	      fabric.util.drawDashedLine(ctx, x, y + h, x, y, this.strokeDashArray);
	      ctx.closePath();
	      ctx.restore();
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      var filters = [ ], element = this._originalElement;
	      this.filters.forEach(function(filterObj) {
	        if (filterObj) {
	          filters.push(filterObj.toObject());
	        }
	      });
	      var object = extend(this.callSuper('toObject', propertiesToInclude), {
	        src: element ? element.src || element._src : '',
	        filters: filters,
	        crossOrigin: this.crossOrigin,
	        alignX: this.alignX,
	        alignY: this.alignY,
	        meetOrSlice: this.meetOrSlice
	      });

	      if (this.resizeFilters.length > 0) {
	        object.resizeFilters = this.resizeFilters.map(function(filterObj) {
	          return filterObj && filterObj.toObject();
	        });
	      }

	      if (!this.includeDefaultValues) {
	        this._removeDefaultValues(object);
	      }

	      return object;
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns SVG representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      var markup = this._createBaseSVGMarkup(), x = -this.width / 2, y = -this.height / 2,
	          preserveAspectRatio = 'none';
	      if (this.group && this.group.type === 'path-group') {
	        x = this.left;
	        y = this.top;
	      }
	      if (this.alignX !== 'none' && this.alignY !== 'none') {
	        preserveAspectRatio = 'x' + this.alignX + 'Y' + this.alignY + ' ' + this.meetOrSlice;
	      }
	      markup.push(
	        '<g transform="', this.getSvgTransform(), this.getSvgTransformMatrix(), '">\n',
	          '<image xlink:href="', this.getSvgSrc(),
	            '" x="', x, '" y="', y,
	            '" style="', this.getSvgStyles(),
	            // we're essentially moving origin of transformation from top/left corner to the center of the shape
	            // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left
	            // so that object's center aligns with container's left/top
	            '" width="', this.width,
	            '" height="', this.height,
	            '" preserveAspectRatio="', preserveAspectRatio, '"',
	          '></image>\n'
	      );

	      if (this.stroke || this.strokeDashArray) {
	        var origFill = this.fill;
	        this.fill = null;
	        markup.push(
	          '<rect ',
	            'x="', x, '" y="', y,
	            '" width="', this.width, '" height="', this.height,
	            '" style="', this.getSvgStyles(),
	          '"/>\n'
	        );
	        this.fill = origFill;
	      }

	      markup.push('</g>\n');

	      return reviver ? reviver(markup.join('')) : markup.join('');
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Returns source of an image
	     * @return {String} Source of an image
	     */
	    getSrc: function() {
	      if (this.getElement()) {
	        return this.getElement().src || this.getElement()._src;
	      }
	    },

	    /**
	     * Sets source of an image
	     * @param {String} src Source string (URL)
	     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)
	     * @param {Object} [options] Options object
	     * @return {fabric.Image} thisArg
	     * @chainable
	     */
	    setSrc: function(src, callback, options) {
	      fabric.util.loadImage(src, function(img) {
	        return this.setElement(img, callback, options);
	      }, this, options && options.crossOrigin);
	    },

	    /**
	     * Returns string representation of an instance
	     * @return {String} String representation of an instance
	     */
	    toString: function() {
	      return '#<fabric.Image: { src: "' + this.getSrc() + '" }>';
	    },

	    /**
	     * Returns a clone of an instance
	     * @param {Function} callback Callback is invoked with a clone as a first argument
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     */
	    clone: function(callback, propertiesToInclude) {
	      this.constructor.fromObject(this.toObject(propertiesToInclude), callback);
	    },

	    /**
	     * Applies filters assigned to this image (from "filters" array)
	     * @method applyFilters
	     * @param {Function} callback Callback is invoked when all filters have been applied and new image is generated
	     * @return {fabric.Image} thisArg
	     * @chainable
	     */
	    applyFilters: function(callback, filters, imgElement, forResizing) {

	      filters = filters || this.filters;
	      imgElement = imgElement || this._originalElement;

	      if (!imgElement) {
	        return;
	      }

	      var imgEl = imgElement,
	          canvasEl = fabric.util.createCanvasElement(),
	          replacement = fabric.util.createImage(),
	          _this = this;

	      canvasEl.width = imgEl.width;
	      canvasEl.height = imgEl.height;
	      canvasEl.getContext('2d').drawImage(imgEl, 0, 0, imgEl.width, imgEl.height);

	      if (filters.length === 0) {
	        this._element = imgElement;
	        callback && callback();
	        return canvasEl;
	      }
	      filters.forEach(function(filter) {
	        filter && filter.applyTo(canvasEl, filter.scaleX || _this.scaleX, filter.scaleY || _this.scaleY);
	        if (!forResizing && filter && filter.type === 'Resize') {
	          _this.width *= filter.scaleX;
	          _this.height *= filter.scaleY;
	        }
	      });

	      /** @ignore */
	      replacement.width = canvasEl.width;
	      replacement.height = canvasEl.height;

	      if (fabric.isLikelyNode) {
	        replacement.src = canvasEl.toBuffer(undefined, fabric.Image.pngCompression);
	        // onload doesn't fire in some node versions, so we invoke callback manually
	        _this._element = replacement;
	        !forResizing && (_this._filteredEl = replacement);
	        callback && callback();
	      }
	      else {
	        replacement.onload = function() {
	          _this._element = replacement;
	          !forResizing && (_this._filteredEl = replacement);
	          callback && callback();
	          replacement.onload = canvasEl = imgEl = null;
	        };
	        replacement.src = canvasEl.toDataURL('image/png');
	      }
	      return canvasEl;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx, noTransform) {
	      var x, y, imageMargins = this._findMargins(), elementToDraw;

	      x = (noTransform ? this.left : -this.width / 2);
	      y = (noTransform ? this.top : -this.height / 2);

	      if (this.meetOrSlice === 'slice') {
	        ctx.beginPath();
	        ctx.rect(x, y, this.width, this.height);
	        ctx.clip();
	      }

	      if (this.isMoving === false && this.resizeFilters.length && this._needsResize()) {
	        this._lastScaleX = this.scaleX;
	        this._lastScaleY = this.scaleY;
	        elementToDraw = this.applyFilters(null, this.resizeFilters, this._filteredEl || this._originalElement, true);
	      }
	      else {
	        elementToDraw = this._element;
	      }
	      elementToDraw && ctx.drawImage(elementToDraw,
	                                     x + imageMargins.marginX,
	                                     y + imageMargins.marginY,
	                                     imageMargins.width,
	                                     imageMargins.height
	                                    );

	      this._renderStroke(ctx);
	    },

	    /**
	     * @private, needed to check if image needs resize
	     */
	    _needsResize: function() {
	      return (this.scaleX !== this._lastScaleX || this.scaleY !== this._lastScaleY);
	    },

	    /**
	     * @private
	     */
	    _findMargins: function() {
	      var width = this.width, height = this.height, scales,
	          scale, marginX = 0, marginY = 0;

	      if (this.alignX !== 'none' || this.alignY !== 'none') {
	        scales = [this.width / this._element.width, this.height / this._element.height];
	        scale = this.meetOrSlice === 'meet'
	                ? Math.min.apply(null, scales) : Math.max.apply(null, scales);
	        width = this._element.width * scale;
	        height = this._element.height * scale;
	        if (this.alignX === 'Mid') {
	          marginX = (this.width - width) / 2;
	        }
	        if (this.alignX === 'Max') {
	          marginX = this.width - width;
	        }
	        if (this.alignY === 'Mid') {
	          marginY = (this.height - height) / 2;
	        }
	        if (this.alignY === 'Max') {
	          marginY = this.height - height;
	        }
	      }
	      return {
	        width:  width,
	        height: height,
	        marginX: marginX,
	        marginY: marginY
	      };
	    },

	    /**
	     * @private
	     */
	    _resetWidthHeight: function() {
	      var element = this.getElement();

	      this.set('width', element.width);
	      this.set('height', element.height);
	    },

	    /**
	     * The Image class's initialization method. This method is automatically
	     * called by the constructor.
	     * @private
	     * @param {HTMLImageElement|String} element The element representing the image
	     * @param {Object} [options] Options object
	     */
	    _initElement: function(element, options) {
	      this.setElement(fabric.util.getById(element), null, options);
	      fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);
	    },

	    /**
	     * @private
	     * @param {Object} [options] Options object
	     */
	    _initConfig: function(options) {
	      options || (options = { });
	      this.setOptions(options);
	      this._setWidthHeight(options);
	      if (this._element && this.crossOrigin) {
	        this._element.crossOrigin = this.crossOrigin;
	      }
	    },

	    /**
	     * @private
	     * @param {Array} filters to be initialized
	     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created
	     */
	    _initFilters: function(filters, callback) {
	      if (filters && filters.length) {
	        fabric.util.enlivenObjects(filters, function(enlivenedObjects) {
	          callback && callback(enlivenedObjects);
	        }, 'fabric.Image.filters');
	      }
	      else {
	        callback && callback();
	      }
	    },

	    /**
	     * @private
	     * @param {Object} [options] Object with width/height properties
	     */
	    _setWidthHeight: function(options) {
	      this.width = 'width' in options
	        ? options.width
	        : (this.getElement()
	            ? this.getElement().width || 0
	            : 0);

	      this.height = 'height' in options
	        ? options.height
	        : (this.getElement()
	            ? this.getElement().height || 0
	            : 0);
	    },

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity of this instance
	     */
	    complexity: function() {
	      return 1;
	    }
	  });

	  /**
	   * Default CSS class name for canvas
	   * @static
	   * @type String
	   * @default
	   */
	  fabric.Image.CSS_CANVAS = 'canvas-img';

	  /**
	   * Alias for getSrc
	   * @static
	   */
	  fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;

	  /**
	   * Creates an instance of fabric.Image from its object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {Function} [callback] Callback to invoke when an image instance is created
	   */
	  fabric.Image.fromObject = function(object, callback) {
	    fabric.util.loadImage(object.src, function(img) {
	      fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {
	        object.filters = filters || [ ];
	        fabric.Image.prototype._initFilters.call(object, object.resizeFilters, function(resizeFilters) {
	          object.resizeFilters = resizeFilters || [ ];
	          var instance = new fabric.Image(img, object);
	          callback && callback(instance);
	        });
	      });
	    }, null, object.crossOrigin);
	  };

	  /**
	   * Creates an instance of fabric.Image from an URL string
	   * @static
	   * @param {String} url URL to create an image from
	   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)
	   * @param {Object} [imgOptions] Options object
	   */
	  fabric.Image.fromURL = function(url, callback, imgOptions) {
	    fabric.util.loadImage(url, function(img) {
	      callback && callback(new fabric.Image(img, imgOptions));
	    }, null, imgOptions && imgOptions.crossOrigin);
	  };

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})
	   * @static
	   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}
	   */
	  fabric.Image.ATTRIBUTE_NAMES =
	    fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href'.split(' '));

	  /**
	   * Returns {@link fabric.Image} instance from an SVG element
	   * @static
	   * @param {SVGElement} element Element to parse
	   * @param {Function} callback Callback to execute when fabric.Image object is created
	   * @param {Object} [options] Options object
	   * @return {fabric.Image} Instance of fabric.Image
	   */
	  fabric.Image.fromElement = function(element, callback, options) {
	    var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES),
	        preserveAR;

	    if (parsedAttributes.preserveAspectRatio) {
	      preserveAR = fabric.util.parsePreserveAspectRatioAttribute(parsedAttributes.preserveAspectRatio);
	      extend(parsedAttributes, preserveAR);
	    }

	    fabric.Image.fromURL(parsedAttributes['xlink:href'], callback,
	      extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));
	  };
	  /* _FROM_SVG_END_ */

	  /**
	   * Indicates that instances of this type are async
	   * @static
	   * @type Boolean
	   * @default
	   */
	  fabric.Image.async = true;

	  /**
	   * Indicates compression level used when generating PNG under Node (in applyFilters). Any of 0-9
	   * @static
	   * @type Number
	   * @default
	   */
	  fabric.Image.pngCompression = 1;

	})( true ? exports : this);


	fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */ {

	  /**
	   * @private
	   * @return {Number} angle value
	   */
	  _getAngleValueForStraighten: function() {
	    var angle = this.getAngle() % 360;
	    if (angle > 0) {
	      return Math.round((angle - 1) / 90) * 90;
	    }
	    return Math.round(angle / 90) * 90;
	  },

	  /**
	   * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  straighten: function() {
	    this.setAngle(this._getAngleValueForStraighten());
	    return this;
	  },

	  /**
	   * Same as {@link fabric.Object.prototype.straighten} but with animation
	   * @param {Object} callbacks Object with callback functions
	   * @param {Function} [callbacks.onComplete] Invoked on completion
	   * @param {Function} [callbacks.onChange] Invoked on every step of animation
	   * @return {fabric.Object} thisArg
	   * @chainable
	   */
	  fxStraighten: function(callbacks) {
	    callbacks = callbacks || { };

	    var empty = function() { },
	        onComplete = callbacks.onComplete || empty,
	        onChange = callbacks.onChange || empty,
	        _this = this;

	    fabric.util.animate({
	      startValue: this.get('angle'),
	      endValue: this._getAngleValueForStraighten(),
	      duration: this.FX_DURATION,
	      onChange: function(value) {
	        _this.setAngle(value);
	        onChange();
	      },
	      onComplete: function() {
	        _this.setCoords();
	        onComplete();
	      },
	      onStart: function() {
	        _this.set('active', false);
	      }
	    });

	    return this;
	  }
	});

	fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */ {

	  /**
	   * Straightens object, then rerenders canvas
	   * @param {fabric.Object} object Object to straighten
	   * @return {fabric.Canvas} thisArg
	   * @chainable
	   */
	  straightenObject: function (object) {
	    object.straighten();
	    this.renderAll();
	    return this;
	  },

	  /**
	   * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated
	   * @param {fabric.Object} object Object to straighten
	   * @return {fabric.Canvas} thisArg
	   * @chainable
	   */
	  fxStraightenObject: function (object) {
	    object.fxStraighten({
	      onChange: this.renderAll.bind(this)
	    });
	    return this;
	  }
	});


	/**
	 * @namespace fabric.Image.filters
	 * @memberOf fabric.Image
	 * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}
	 * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	 */
	fabric.Image.filters = fabric.Image.filters || { };

	/**
	 * Root filter class from which all filter classes inherit from
	 * @class fabric.Image.filters.BaseFilter
	 * @memberOf fabric.Image.filters
	 */
	fabric.Image.filters.BaseFilter = fabric.util.createClass(/** @lends fabric.Image.filters.BaseFilter.prototype */ {

	  /**
	   * Filter type
	   * @param {String} type
	   * @default
	   */
	  type: 'BaseFilter',

	  /**
	   * Constructor
	   * @param {Object} [options] Options object
	   */
	  initialize: function(options) {
	    if (options) {
	      this.setOptions(options);
	    }
	  },

	  /**
	   * Sets filter's properties from options
	   * @param {Object} [options] Options object
	   */
	  setOptions: function(options) {
	    for (var prop in options) {
	      this[prop] = options[prop];
	    }
	  },

	  /**
	   * Returns object representation of an instance
	   * @return {Object} Object representation of an instance
	   */
	  toObject: function() {
	    return { type: this.type };
	  },

	  /**
	   * Returns a JSON representation of an instance
	   * @return {Object} JSON
	   */
	  toJSON: function() {
	    // delegate, not alias
	    return this.toObject();
	  }
	});


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend;

	  /**
	   * Brightness filter class
	   * @class fabric.Image.filters.Brightness
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Brightness({
	   *   brightness: 200
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.Brightness = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Brightness',

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.Brightness.prototype
	     * @param {Object} [options] Options object
	     * @param {Number} [options.brightness=0] Value to brighten the image up (0..255)
	     */
	    initialize: function(options) {
	      options = options || { };
	      this.brightness = options.brightness || 0;
	    },

	    /**
	     * Applies filter to canvas element
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {
	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          brightness = this.brightness;

	      for (var i = 0, len = data.length; i < len; i += 4) {
	        data[i] += brightness;
	        data[i + 1] += brightness;
	        data[i + 2] += brightness;
	      }

	      context.putImageData(imageData, 0, 0);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return extend(this.callSuper('toObject'), {
	        brightness: this.brightness
	      });
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness
	   */
	  fabric.Image.filters.Brightness.fromObject = function(object) {
	    return new fabric.Image.filters.Brightness(object);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend;

	  /**
	   * Adapted from <a href="http://www.html5rocks.com/en/tutorials/canvas/imagefilters/">html5rocks article</a>
	   * @class fabric.Image.filters.Convolute
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example <caption>Sharpen filter</caption>
	   * var filter = new fabric.Image.filters.Convolute({
	   *   matrix: [ 0, -1,  0,
	   *            -1,  5, -1,
	   *             0, -1,  0 ]
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   * @example <caption>Blur filter</caption>
	   * var filter = new fabric.Image.filters.Convolute({
	   *   matrix: [ 1/9, 1/9, 1/9,
	   *             1/9, 1/9, 1/9,
	   *             1/9, 1/9, 1/9 ]
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   * @example <caption>Emboss filter</caption>
	   * var filter = new fabric.Image.filters.Convolute({
	   *   matrix: [ 1,   1,  1,
	   *             1, 0.7, -1,
	   *            -1,  -1, -1 ]
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   * @example <caption>Emboss filter with opaqueness</caption>
	   * var filter = new fabric.Image.filters.Convolute({
	   *   opaque: true,
	   *   matrix: [ 1,   1,  1,
	   *             1, 0.7, -1,
	   *            -1,  -1, -1 ]
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.Convolute = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Convolute',

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.Convolute.prototype
	     * @param {Object} [options] Options object
	     * @param {Boolean} [options.opaque=false] Opaque value (true/false)
	     * @param {Array} [options.matrix] Filter matrix
	     */
	    initialize: function(options) {
	      options = options || { };

	      this.opaque = options.opaque;
	      this.matrix = options.matrix || [
	        0, 0, 0,
	        0, 1, 0,
	        0, 0, 0
	      ];
	    },

	    /**
	     * Applies filter to canvas element
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {

	      var weights = this.matrix,
	          context = canvasEl.getContext('2d'),
	          pixels = context.getImageData(0, 0, canvasEl.width, canvasEl.height),

	          side = Math.round(Math.sqrt(weights.length)),
	          halfSide = Math.floor(side/2),
	          src = pixels.data,
	          sw = pixels.width,
	          sh = pixels.height,
	          output = context.createImageData(sw, sh),
	          dst = output.data,
	          // go through the destination image pixels
	          alphaFac = this.opaque ? 1 : 0,
	          r, g, b, a, dstOff,
	          scx, scy, srcOff, wt;

	      for (var y = 0; y < sh; y++) {
	        for (var x = 0; x < sw; x++) {
	          dstOff = (y * sw + x) * 4;
	          // calculate the weighed sum of the source image pixels that
	          // fall under the convolution matrix
	          r = 0; g = 0; b = 0; a = 0;

	          for (var cy = 0; cy < side; cy++) {
	            for (var cx = 0; cx < side; cx++) {
	              scy = y + cy - halfSide;
	              scx = x + cx - halfSide;

	              /* jshint maxdepth:5 */
	              if (scy < 0 || scy > sh || scx < 0 || scx > sw) {
	                continue;
	              }

	              srcOff = (scy * sw + scx) * 4;
	              wt = weights[cy * side + cx];

	              r += src[srcOff] * wt;
	              g += src[srcOff + 1] * wt;
	              b += src[srcOff + 2] * wt;
	              a += src[srcOff + 3] * wt;
	            }
	          }
	          dst[dstOff] = r;
	          dst[dstOff + 1] = g;
	          dst[dstOff + 2] = b;
	          dst[dstOff + 3] = a + alphaFac * (255 - a);
	        }
	      }

	      context.putImageData(output, 0, 0);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return extend(this.callSuper('toObject'), {
	        opaque: this.opaque,
	        matrix: this.matrix
	      });
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute
	   */
	  fabric.Image.filters.Convolute.fromObject = function(object) {
	    return new fabric.Image.filters.Convolute(object);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend;

	  /**
	   * GradientTransparency filter class
	   * @class fabric.Image.filters.GradientTransparency
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.GradientTransparency#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.GradientTransparency({
	   *   threshold: 200
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.GradientTransparency = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.GradientTransparency.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'GradientTransparency',

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.GradientTransparency.prototype
	     * @param {Object} [options] Options object
	     * @param {Number} [options.threshold=100] Threshold value
	     */
	    initialize: function(options) {
	      options = options || { };
	      this.threshold = options.threshold || 100;
	    },

	    /**
	     * Applies filter to canvas element
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {
	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          threshold = this.threshold,
	          total = data.length;

	      for (var i = 0, len = data.length; i < len; i += 4) {
	        data[i + 3] = threshold + 255 * (total - i) / total;
	      }

	      context.putImageData(imageData, 0, 0);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return extend(this.callSuper('toObject'), {
	        threshold: this.threshold
	      });
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Image.filters.GradientTransparency} Instance of fabric.Image.filters.GradientTransparency
	   */
	  fabric.Image.filters.GradientTransparency.fromObject = function(object) {
	    return new fabric.Image.filters.GradientTransparency(object);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { });

	  /**
	   * Grayscale image filter class
	   * @class fabric.Image.filters.Grayscale
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Grayscale();
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.Grayscale = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Grayscale',

	    /**
	     * Applies filter to canvas element
	     * @memberOf fabric.Image.filters.Grayscale.prototype
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {
	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          len = imageData.width * imageData.height * 4,
	          index = 0,
	          average;

	      while (index < len) {
	        average = (data[index] + data[index + 1] + data[index + 2]) / 3;
	        data[index]     = average;
	        data[index + 1] = average;
	        data[index + 2] = average;
	        index += 4;
	      }

	      context.putImageData(imageData, 0, 0);
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale
	   */
	  fabric.Image.filters.Grayscale.fromObject = function() {
	    return new fabric.Image.filters.Grayscale();
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { });

	  /**
	   * Invert filter class
	   * @class fabric.Image.filters.Invert
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Invert();
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.Invert = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Invert',

	    /**
	     * Applies filter to canvas element
	     * @memberOf fabric.Image.filters.Invert.prototype
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {
	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          iLen = data.length, i;

	      for (i = 0; i < iLen; i+=4) {
	        data[i] = 255 - data[i];
	        data[i + 1] = 255 - data[i + 1];
	        data[i + 2] = 255 - data[i + 2];
	      }

	      context.putImageData(imageData, 0, 0);
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert
	   */
	  fabric.Image.filters.Invert.fromObject = function() {
	    return new fabric.Image.filters.Invert();
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend;

	  /**
	   * Mask filter class
	   * See http://resources.aleph-1.com/mask/
	   * @class fabric.Image.filters.Mask
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Mask#initialize} for constructor definition
	   */
	  fabric.Image.filters.Mask = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Mask.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Mask',

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.Mask.prototype
	     * @param {Object} [options] Options object
	     * @param {fabric.Image} [options.mask] Mask image object
	     * @param {Number} [options.channel=0] Rgb channel (0, 1, 2 or 3)
	     */
	    initialize: function(options) {
	      options = options || { };

	      this.mask = options.mask;
	      this.channel = [ 0, 1, 2, 3 ].indexOf(options.channel) > -1 ? options.channel : 0;
	    },

	    /**
	     * Applies filter to canvas element
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {
	      if (!this.mask) {
	        return;
	      }

	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          maskEl = this.mask.getElement(),
	          maskCanvasEl = fabric.util.createCanvasElement(),
	          channel = this.channel,
	          i,
	          iLen = imageData.width * imageData.height * 4;

	      maskCanvasEl.width = canvasEl.width;
	      maskCanvasEl.height = canvasEl.height;

	      maskCanvasEl.getContext('2d').drawImage(maskEl, 0, 0, canvasEl.width, canvasEl.height);

	      var maskImageData = maskCanvasEl.getContext('2d').getImageData(0, 0, canvasEl.width, canvasEl.height),
	          maskData = maskImageData.data;

	      for (i = 0; i < iLen; i += 4) {
	        data[i + 3] = maskData[i + channel];
	      }

	      context.putImageData(imageData, 0, 0);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return extend(this.callSuper('toObject'), {
	        mask: this.mask.toObject(),
	        channel: this.channel
	      });
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @param {Function} [callback] Callback to invoke when a mask filter instance is created
	   */
	  fabric.Image.filters.Mask.fromObject = function(object, callback) {
	    fabric.util.loadImage(object.mask.src, function(img) {
	      object.mask = new fabric.Image(img, object.mask);
	      callback && callback(new fabric.Image.filters.Mask(object));
	    });
	  };

	  /**
	   * Indicates that instances of this type are async
	   * @static
	   * @type Boolean
	   * @default
	   */
	  fabric.Image.filters.Mask.async = true;

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend;

	  /**
	   * Noise filter class
	   * @class fabric.Image.filters.Noise
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Noise({
	   *   noise: 700
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.Noise = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Noise',

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.Noise.prototype
	     * @param {Object} [options] Options object
	     * @param {Number} [options.noise=0] Noise value
	     */
	    initialize: function(options) {
	      options = options || { };
	      this.noise = options.noise || 0;
	    },

	    /**
	     * Applies filter to canvas element
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {
	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          noise = this.noise, rand;

	      for (var i = 0, len = data.length; i < len; i += 4) {

	        rand = (0.5 - Math.random()) * noise;

	        data[i] += rand;
	        data[i + 1] += rand;
	        data[i + 2] += rand;
	      }

	      context.putImageData(imageData, 0, 0);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return extend(this.callSuper('toObject'), {
	        noise: this.noise
	      });
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise
	   */
	  fabric.Image.filters.Noise.fromObject = function(object) {
	    return new fabric.Image.filters.Noise(object);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend;

	  /**
	   * Pixelate filter class
	   * @class fabric.Image.filters.Pixelate
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Pixelate({
	   *   blocksize: 8
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.Pixelate = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Pixelate',

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.Pixelate.prototype
	     * @param {Object} [options] Options object
	     * @param {Number} [options.blocksize=4] Blocksize for pixelate
	     */
	    initialize: function(options) {
	      options = options || { };
	      this.blocksize = options.blocksize || 4;
	    },

	    /**
	     * Applies filter to canvas element
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {
	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          iLen = imageData.height,
	          jLen = imageData.width,
	          index, i, j, r, g, b, a;

	      for (i = 0; i < iLen; i += this.blocksize) {
	        for (j = 0; j < jLen; j += this.blocksize) {

	          index = (i * 4) * jLen + (j * 4);

	          r = data[index];
	          g = data[index + 1];
	          b = data[index + 2];
	          a = data[index + 3];

	          /*
	           blocksize: 4

	           [1,x,x,x,1]
	           [x,x,x,x,1]
	           [x,x,x,x,1]
	           [x,x,x,x,1]
	           [1,1,1,1,1]
	           */

	          for (var _i = i, _ilen = i + this.blocksize; _i < _ilen; _i++) {
	            for (var _j = j, _jlen = j + this.blocksize; _j < _jlen; _j++) {
	              index = (_i * 4) * jLen + (_j * 4);
	              data[index] = r;
	              data[index + 1] = g;
	              data[index + 2] = b;
	              data[index + 3] = a;
	            }
	          }
	        }
	      }

	      context.putImageData(imageData, 0, 0);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return extend(this.callSuper('toObject'), {
	        blocksize: this.blocksize
	      });
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate
	   */
	  fabric.Image.filters.Pixelate.fromObject = function(object) {
	    return new fabric.Image.filters.Pixelate(object);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend;

	  /**
	   * Remove white filter class
	   * @class fabric.Image.filters.RemoveWhite
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.RemoveWhite#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.RemoveWhite({
	   *   threshold: 40,
	   *   distance: 140
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.RemoveWhite = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.RemoveWhite.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'RemoveWhite',

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.RemoveWhite.prototype
	     * @param {Object} [options] Options object
	     * @param {Number} [options.threshold=30] Threshold value
	     * @param {Number} [options.distance=20] Distance value
	     */
	    initialize: function(options) {
	      options = options || { };
	      this.threshold = options.threshold || 30;
	      this.distance = options.distance || 20;
	    },

	    /**
	     * Applies filter to canvas element
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {
	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          threshold = this.threshold,
	          distance = this.distance,
	          limit = 255 - threshold,
	          abs = Math.abs,
	          r, g, b;

	      for (var i = 0, len = data.length; i < len; i += 4) {
	        r = data[i];
	        g = data[i + 1];
	        b = data[i + 2];

	        if (r > limit &&
	            g > limit &&
	            b > limit &&
	            abs(r - g) < distance &&
	            abs(r - b) < distance &&
	            abs(g - b) < distance
	        ) {
	          data[i + 3] = 0;
	        }
	      }

	      context.putImageData(imageData, 0, 0);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return extend(this.callSuper('toObject'), {
	        threshold: this.threshold,
	        distance: this.distance
	      });
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Image.filters.RemoveWhite} Instance of fabric.Image.filters.RemoveWhite
	   */
	  fabric.Image.filters.RemoveWhite.fromObject = function(object) {
	    return new fabric.Image.filters.RemoveWhite(object);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { });

	  /**
	   * Sepia filter class
	   * @class fabric.Image.filters.Sepia
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Sepia();
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.Sepia = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Sepia.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Sepia',

	    /**
	     * Applies filter to canvas element
	     * @memberOf fabric.Image.filters.Sepia.prototype
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {
	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          iLen = data.length, i, avg;

	      for (i = 0; i < iLen; i+=4) {
	        avg = 0.3  * data[i] + 0.59 * data[i + 1] + 0.11 * data[i + 2];
	        data[i] = avg + 100;
	        data[i + 1] = avg + 50;
	        data[i + 2] = avg + 255;
	      }

	      context.putImageData(imageData, 0, 0);
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @return {fabric.Image.filters.Sepia} Instance of fabric.Image.filters.Sepia
	   */
	  fabric.Image.filters.Sepia.fromObject = function() {
	    return new fabric.Image.filters.Sepia();
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { });

	  /**
	   * Sepia2 filter class
	   * @class fabric.Image.filters.Sepia2
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Sepia2();
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.Sepia2 = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Sepia2.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Sepia2',

	    /**
	     * Applies filter to canvas element
	     * @memberOf fabric.Image.filters.Sepia.prototype
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {
	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          iLen = data.length, i, r, g, b;

	      for (i = 0; i < iLen; i+=4) {
	        r = data[i];
	        g = data[i + 1];
	        b = data[i + 2];

	        data[i] = (r * 0.393 + g * 0.769 + b * 0.189 ) / 1.351;
	        data[i + 1] = (r * 0.349 + g * 0.686 + b * 0.168 ) / 1.203;
	        data[i + 2] = (r * 0.272 + g * 0.534 + b * 0.131 ) / 2.140;
	      }

	      context.putImageData(imageData, 0, 0);
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @return {fabric.Image.filters.Sepia2} Instance of fabric.Image.filters.Sepia2
	   */
	  fabric.Image.filters.Sepia2.fromObject = function() {
	    return new fabric.Image.filters.Sepia2();
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend;

	  /**
	   * Tint filter class
	   * Adapted from <a href="https://github.com/mezzoblue/PaintbrushJS">https://github.com/mezzoblue/PaintbrushJS</a>
	   * @class fabric.Image.filters.Tint
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link fabric.Image.filters.Tint#initialize} for constructor definition
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example <caption>Tint filter with hex color and opacity</caption>
	   * var filter = new fabric.Image.filters.Tint({
	   *   color: '#3513B0',
	   *   opacity: 0.5
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   * @example <caption>Tint filter with rgba color</caption>
	   * var filter = new fabric.Image.filters.Tint({
	   *   color: 'rgba(53, 21, 176, 0.5)'
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.Tint = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Tint.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Tint',

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.Tint.prototype
	     * @param {Object} [options] Options object
	     * @param {String} [options.color=#000000] Color to tint the image with
	     * @param {Number} [options.opacity] Opacity value that controls the tint effect's transparency (0..1)
	     */
	    initialize: function(options) {
	      options = options || { };

	      this.color = options.color || '#000000';
	      this.opacity = typeof options.opacity !== 'undefined'
	                      ? options.opacity
	                      : new fabric.Color(this.color).getAlpha();
	    },

	    /**
	     * Applies filter to canvas element
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {
	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          iLen = data.length, i,
	          tintR, tintG, tintB,
	          r, g, b, alpha1,
	          source;

	      source = new fabric.Color(this.color).getSource();

	      tintR = source[0] * this.opacity;
	      tintG = source[1] * this.opacity;
	      tintB = source[2] * this.opacity;

	      alpha1 = 1 - this.opacity;

	      for (i = 0; i < iLen; i+=4) {
	        r = data[i];
	        g = data[i + 1];
	        b = data[i + 2];

	        // alpha compositing
	        data[i] = tintR + r * alpha1;
	        data[i + 1] = tintG + g * alpha1;
	        data[i + 2] = tintB + b * alpha1;
	      }

	      context.putImageData(imageData, 0, 0);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return extend(this.callSuper('toObject'), {
	        color: this.color,
	        opacity: this.opacity
	      });
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Image.filters.Tint} Instance of fabric.Image.filters.Tint
	   */
	  fabric.Image.filters.Tint.fromObject = function(object) {
	    return new fabric.Image.filters.Tint(object);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend;

	  /**
	   * Multiply filter class
	   * Adapted from <a href="http://www.laurenscorijn.com/articles/colormath-basics">http://www.laurenscorijn.com/articles/colormath-basics</a>
	   * @class fabric.Image.filters.Multiply
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @example <caption>Multiply filter with hex color</caption>
	   * var filter = new fabric.Image.filters.Multiply({
	   *   color: '#F0F'
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   * @example <caption>Multiply filter with rgb color</caption>
	   * var filter = new fabric.Image.filters.Multiply({
	   *   color: 'rgb(53, 21, 176)'
	   * });
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.Multiply = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Multiply.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Multiply',

	    /**
	     * Constructor
	     * @memberOf fabric.Image.filters.Multiply.prototype
	     * @param {Object} [options] Options object
	     * @param {String} [options.color=#000000] Color to multiply the image pixels with
	     */
	    initialize: function(options) {
	      options = options || { };

	      this.color = options.color || '#000000';
	    },

	    /**
	     * Applies filter to canvas element
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl) {
	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          iLen = data.length, i,
	          source;

	      source = new fabric.Color(this.color).getSource();

	      for (i = 0; i < iLen; i+=4) {
	        data[i] *= source[0] / 255;
	        data[i + 1] *= source[1] / 255;
	        data[i + 2] *= source[2] / 255;
	      }

	      context.putImageData(imageData, 0, 0);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return extend(this.callSuper('toObject'), {
	        color: this.color
	      });
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Image.filters.Multiply} Instance of fabric.Image.filters.Multiply
	   */
	  fabric.Image.filters.Multiply.fromObject = function(object) {
	    return new fabric.Image.filters.Multiply(object);
	  };

	})( true ? exports : this);


	(function(global) {
	  'use strict';

	  var fabric = global.fabric;

	  /**
	   * Color Blend filter class
	   * @class fabric.Image.filter.Blend
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @example
	   * var filter = new fabric.Image.filters.Blend({
	   *  color: '#000',
	   *  mode: 'multiply'
	   * });
	   *
	   * var filter = new fabric.Image.filters.Blend({
	   *  image: fabricImageObject,
	   *  mode: 'multiply',
	   *  alpha: 0.5
	   * });

	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.Blend = fabric.util.createClass({
	    type: 'Blend',

	    initialize: function(options) {
	      options = options || {};
	      this.color = options.color || '#000';
	      this.image = options.image || false;
	      this.mode = options.mode || 'multiply';
	      this.alpha = options.alpha || 1;
	    },

	    applyTo: function(canvasEl) {
	      var context = canvasEl.getContext('2d'),
	          imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
	          data = imageData.data,
	          tr, tg, tb,
	          r, g, b,
	          _r, _g, _b,
	          source,
	          isImage = false;

	      if (this.image) {
	        // Blend images
	        isImage = true;

	        var _el = fabric.util.createCanvasElement();
	        _el.width = this.image.width;
	        _el.height = this.image.height;

	        var tmpCanvas = new fabric.StaticCanvas(_el);
	        tmpCanvas.add(this.image);
	        var context2 =  tmpCanvas.getContext('2d');
	        source = context2.getImageData(0, 0, tmpCanvas.width, tmpCanvas.height).data;
	      }
	      else {
	        // Blend color
	        source = new fabric.Color(this.color).getSource();

	        tr = source[0] * this.alpha;
	        tg = source[1] * this.alpha;
	        tb = source[2] * this.alpha;
	      }

	      for (var i = 0, len = data.length; i < len; i += 4) {

	        r = data[i];
	        g = data[i + 1];
	        b = data[i + 2];

	        if (isImage) {
	          tr = source[i] * this.alpha;
	          tg = source[i + 1] * this.alpha;
	          tb = source[i + 2] * this.alpha;
	        }

	        switch (this.mode) {
	          case 'multiply':
	            data[i] = r * tr / 255;
	            data[i + 1] = g * tg / 255;
	            data[i + 2] = b * tb / 255;
	            break;
	          case 'screen':
	            data[i] = 1 - (1 - r) * (1 - tr);
	            data[i + 1] = 1 - (1 - g) * (1 - tg);
	            data[i + 2] = 1 - (1 - b) * (1 - tb);
	            break;
	          case 'add':
	            data[i] = Math.min(255, r + tr);
	            data[i + 1] = Math.min(255, g + tg);
	            data[i + 2] = Math.min(255, b + tb);
	            break;
	          case 'diff':
	          case 'difference':
	            data[i] = Math.abs(r - tr);
	            data[i + 1] = Math.abs(g - tg);
	            data[i + 2] = Math.abs(b - tb);
	            break;
	          case 'subtract':
	            _r = r - tr;
	            _g = g - tg;
	            _b = b - tb;

	            data[i] = (_r < 0) ? 0 : _r;
	            data[i + 1] = (_g < 0) ? 0 : _g;
	            data[i + 2] = (_b < 0) ? 0 : _b;
	            break;
	          case 'darken':
	            data[i] = Math.min(r, tr);
	            data[i + 1] = Math.min(g, tg);
	            data[i + 2] = Math.min(b, tb);
	            break;
	          case 'lighten':
	            data[i] = Math.max(r, tr);
	            data[i + 1] = Math.max(g, tg);
	            data[i + 2] = Math.max(b, tb);
	            break;
	        }
	      }

	      context.putImageData(imageData, 0, 0);
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return {
	        color: this.color,
	        image: this.image,
	        mode: this.mode,
	        alpha: this.alpha
	      };
	    }
	  });

	  fabric.Image.filters.Blend.fromObject = function(object) {
	    return new fabric.Image.filters.Blend(object);
	  };
	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric  = global.fabric || (global.fabric = { }), pow = Math.pow, floor = Math.floor,
	      sqrt = Math.sqrt, abs = Math.abs, max = Math.max, round = Math.round, sin = Math.sin,
	      ceil = Math.ceil;

	  /**
	   * Resize image filter class
	   * @class fabric.Image.filters.Resize
	   * @memberOf fabric.Image.filters
	   * @extends fabric.Image.filters.BaseFilter
	   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
	   * @example
	   * var filter = new fabric.Image.filters.Resize();
	   * object.filters.push(filter);
	   * object.applyFilters(canvas.renderAll.bind(canvas));
	   */
	  fabric.Image.filters.Resize = fabric.util.createClass(fabric.Image.filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */ {

	    /**
	     * Filter type
	     * @param {String} type
	     * @default
	     */
	    type: 'Resize',

	    /**
	     * Resize type
	     * @param {String} resizeType
	     * @default
	     */
	    resizeType: 'hermite',

	    /**
	     * Scale factor for resizing, x axis
	     * @param {Number} scaleX
	     * @default
	     */
	    scaleX: 0,

	    /**
	     * Scale factor for resizing, y axis
	     * @param {Number} scaleY
	     * @default
	     */
	    scaleY: 0,

	    /**
	     * LanczosLobes parameter for lanczos filter
	     * @param {Number} lanczosLobes
	     * @default
	     */
	    lanczosLobes: 3,

	    /**
	     * Applies filter to canvas element
	     * @memberOf fabric.Image.filters.Resize.prototype
	     * @param {Object} canvasEl Canvas element to apply filter to
	     */
	    applyTo: function(canvasEl, scaleX, scaleY) {

	      this.rcpScaleX = 1 / scaleX;
	      this.rcpScaleY = 1 / scaleY;

	      var oW = canvasEl.width, oH = canvasEl.height,
	          dW = round(oW * scaleX), dH = round(oH * scaleY),
	          imageData;

	      if (this.resizeType === 'sliceHack') {
	        imageData = this.sliceByTwo(canvasEl, oW, oH, dW, dH);
	      }
	      if (this.resizeType === 'hermite') {
	        imageData = this.hermiteFastResize(canvasEl, oW, oH, dW, dH);
	      }
	      if (this.resizeType === 'bilinear') {
	        imageData = this.bilinearFiltering(canvasEl, oW, oH, dW, dH);
	      }
	      if (this.resizeType === 'lanczos') {
	        imageData = this.lanczosResize(canvasEl, oW, oH, dW, dH);
	      }
	      canvasEl.width = dW;
	      canvasEl.height = dH;
	      canvasEl.getContext('2d').putImageData(imageData, 0, 0);
	    },

	    sliceByTwo: function(canvasEl, width, height, newWidth, newHeight) {
	      var context = canvasEl.getContext('2d'), imageData,
	          multW = 0.5, multH = 0.5, signW = 1, signH = 1,
	          doneW = false, doneH = false, stepW = width, stepH = height,
	          tmpCanvas = fabric.util.createCanvasElement(),
	          tmpCtx = tmpCanvas.getContext('2d');
	      newWidth = floor(newWidth);
	      newHeight = floor(newHeight);
	      tmpCanvas.width = max(newWidth, width);
	      tmpCanvas.height = max(newHeight, height);

	      if (newWidth > width) {
	        multW = 2;
	        signW = -1;
	      }
	      if (newHeight > height) {
	        multH = 2;
	        signH = -1;
	      }
	      imageData = context.getImageData(0, 0, width, height);
	      canvasEl.width = max(newWidth, width);
	      canvasEl.height = max(newHeight, height);
	      context.putImageData(imageData, 0, 0);

	      while (!doneW || !doneH) {
	        width = stepW;
	        height = stepH;
	        if (newWidth * signW < floor(stepW * multW * signW)) {
	          stepW = floor(stepW * multW);
	        }
	        else {
	          stepW = newWidth;
	          doneW = true;
	        }
	        if (newHeight * signH < floor(stepH * multH * signH)) {
	          stepH = floor(stepH * multH);
	        }
	        else {
	          stepH = newHeight;
	          doneH = true;
	        }
	        imageData = context.getImageData(0, 0, width, height);
	        tmpCtx.putImageData(imageData, 0, 0);
	        context.clearRect(0, 0, stepW, stepH);
	        context.drawImage(tmpCanvas, 0, 0, width, height, 0, 0, stepW, stepH);
	      }
	      return context.getImageData(0, 0, newWidth, newHeight);
	    },

	    lanczosResize: function(canvasEl, oW, oH, dW, dH) {

	      function lanczosCreate(lobes) {
	        return function(x) {
	          if (x > lobes) {
	            return 0;
	          }
	          x *= Math.PI;
	          if (abs(x) < 1e-16) {
	            return 1;
	          }
	          var xx = x / lobes;
	          return sin(x) * sin(xx) / x / xx;
	        };
	      }

	      function process(u) {
	        var v, i, weight, idx, a, red, green,
	            blue, alpha, fX, fY;
	        center.x = (u + 0.5) * ratioX;
	        icenter.x = floor(center.x);
	        for (v = 0; v < dH; v++) {
	          center.y = (v + 0.5) * ratioY;
	          icenter.y = floor(center.y);
	          a = 0, red = 0, green = 0, blue = 0, alpha = 0;
	          for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {
	            if (i < 0 || i >= oW) {
	              continue;
	            }
	            fX = floor(1000 * abs(i - center.x));
	            if (!cacheLanc[fX]) {
	              cacheLanc[fX] = { };
	            }
	            for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {
	              if (j < 0 || j >= oH) {
	                continue;
	              }
	              fY = floor(1000 * abs(j - center.y));
	              if (!cacheLanc[fX][fY]) {
	                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);
	              }
	              weight = cacheLanc[fX][fY];
	              if (weight > 0) {
	                idx = (j * oW + i) * 4;
	                a += weight;
	                red += weight * srcData[idx];
	                green += weight * srcData[idx + 1];
	                blue += weight * srcData[idx + 2];
	                alpha += weight * srcData[idx + 3];
	              }
	            }
	          }
	          idx = (v * dW + u) * 4;
	          destData[idx] = red / a;
	          destData[idx + 1] = green / a;
	          destData[idx + 2] = blue / a;
	          destData[idx + 3] = alpha / a;
	        }

	        if (++u < dW) {
	          return process(u);
	        }
	        else {
	          return destImg;
	        }
	      }

	      var context = canvasEl.getContext('2d'),
	          srcImg = context.getImageData(0, 0, oW, oH),
	          destImg = context.getImageData(0, 0, dW, dH),
	          srcData = srcImg.data, destData = destImg.data,
	          lanczos = lanczosCreate(this.lanczosLobes),
	          ratioX = this.rcpScaleX, ratioY = this.rcpScaleY,
	          rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY,
	          range2X = ceil(ratioX * this.lanczosLobes / 2),
	          range2Y = ceil(ratioY * this.lanczosLobes / 2),
	          cacheLanc = { }, center = { }, icenter = { };

	      return process(0);
	    },

	    bilinearFiltering: function(canvasEl, w, h, w2, h2) {
	      var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl,
	          color, offset = 0, origPix, ratioX = this.rcpScaleX,
	          ratioY = this.rcpScaleY, context = canvasEl.getContext('2d'),
	          w4 = 4 * (w - 1), img = context.getImageData(0, 0, w, h),
	          pixels = img.data, destImage = context.getImageData(0, 0, w2, h2),
	          destPixels = destImage.data;
	      for (i = 0; i < h2; i++) {
	        for (j = 0; j < w2; j++) {
	          x = floor(ratioX * j);
	          y = floor(ratioY * i);
	          xDiff = ratioX * j - x;
	          yDiff = ratioY * i - y;
	          origPix = 4 * (y * w + x);

	          for (chnl = 0; chnl < 4; chnl++) {
	            a = pixels[origPix + chnl];
	            b = pixels[origPix + 4 + chnl];
	            c = pixels[origPix + w4 + chnl];
	            d = pixels[origPix + w4 + 4 + chnl];
	            color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) +
	                    c * yDiff * (1 - xDiff) + d * xDiff * yDiff;
	            destPixels[offset++] = color;
	          }
	        }
	      }
	      return destImage;
	    },

	    hermiteFastResize: function(canvasEl, oW, oH, dW, dH) {
	      var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY,
	          ratioWHalf = ceil(ratioW / 2),
	          ratioHHalf = ceil(ratioH / 2),
	          context = canvasEl.getContext('2d'),
	          img = context.getImageData(0, 0, oW, oH), data = img.data,
	          img2 = context.getImageData(0, 0, dW, dH), data2 = img2.data;
	      for (var j = 0; j < dH; j++) {
	        for (var i = 0; i < dW; i++) {
	          var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0,
	              gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;
	          for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {
	            var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,
	                centerX = (i + 0.5) * ratioW, w0 = dy * dy;
	            for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {
	              var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,
	                  w = sqrt(w0 + dx * dx);
	              /*jshint maxdepth:5 */
	              if (w > 1 && w < -1) {
	                continue;
	              }
	              //hermite filter
	              weight = 2 * w * w * w - 3 * w * w + 1;
	              if (weight > 0) {
	                dx = 4 * (xx + yy * oW);
	                //alpha
	                gxA += weight * data[dx + 3];
	                weightsAlpha += weight;
	                //colors
	                /*jshint maxdepth:6 */
	                if (data[dx + 3] < 255) {
	                  weight = weight * data[dx + 3] / 250;
	                }
	                /*jshint maxdepth:5 */
	                gxR += weight * data[dx];
	                gxG += weight * data[dx + 1];
	                gxB += weight * data[dx + 2];
	                weights += weight;
	              }
	              /*jshint maxdepth:4 */
	            }
	          }
	          data2[x2] = gxR / weights;
	          data2[x2 + 1] = gxG / weights;
	          data2[x2 + 2] = gxB / weights;
	          data2[x2 + 3] = gxA / weightsAlpha;
	        }
	      }
	      return img2;
	    },

	    /**
	     * Returns object representation of an instance
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function() {
	      return {
	        type: this.type,
	        scaleX: this.scaleX,
	        scaleY: this.scaleY,
	        resizeType: this.resizeType,
	        lanczosLobes: this.lanczosLobes
	      };
	    }
	  });

	  /**
	   * Returns filter instance from an object representation
	   * @static
	   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize
	   */
	  fabric.Image.filters.Resize.fromObject = function(object) {
	    return new fabric.Image.filters.Resize(object);
	  };

	})( true ? exports : this);


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = { }),
	      extend = fabric.util.object.extend,
	      clone = fabric.util.object.clone,
	      toFixed = fabric.util.toFixed,
	      supportsLineDash = fabric.StaticCanvas.supports('setLineDash'),
	      NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;

	  if (fabric.Text) {
	    fabric.warn('fabric.Text is already defined');
	    return;
	  }

	  var stateProperties = fabric.Object.prototype.stateProperties.concat();
	  stateProperties.push(
	    'fontFamily',
	    'fontWeight',
	    'fontSize',
	    'text',
	    'textDecoration',
	    'textAlign',
	    'fontStyle',
	    'lineHeight',
	    'textBackgroundColor'
	  );

	  /**
	   * Text class
	   * @class fabric.Text
	   * @extends fabric.Object
	   * @return {fabric.Text} thisArg
	   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}
	   * @see {@link fabric.Text#initialize} for constructor definition
	   */
	  fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */ {

	    /**
	     * Properties which when set cause object to change dimensions
	     * @type Object
	     * @private
	     */
	    _dimensionAffectingProps: {
	      fontSize: true,
	      fontWeight: true,
	      fontFamily: true,
	      fontStyle: true,
	      lineHeight: true,
	      stroke: true,
	      strokeWidth: true,
	      text: true,
	      textAlign: true
	    },

	    /**
	     * @private
	     */
	    _reNewline: /\r?\n/,

	    /**
	     * Use this regular expression to filter for whitespace that is not a new line.
	     * Mostly used when text is 'justify' aligned.
	     * @private
	     */
	    _reSpacesAndTabs: /[ \t\r]+/g,

	    /**
	     * Retrieves object's fontSize
	     * @method getFontSize
	     * @memberOf fabric.Text.prototype
	     * @return {String} Font size (in pixels)
	     */

	    /**
	     * Sets object's fontSize
	     * @method setFontSize
	     * @memberOf fabric.Text.prototype
	     * @param {Number} fontSize Font size (in pixels)
	     * @return {fabric.Text}
	     * @chainable
	     */

	    /**
	     * Retrieves object's fontWeight
	     * @method getFontWeight
	     * @memberOf fabric.Text.prototype
	     * @return {(String|Number)} Font weight
	     */

	    /**
	     * Sets object's fontWeight
	     * @method setFontWeight
	     * @memberOf fabric.Text.prototype
	     * @param {(Number|String)} fontWeight Font weight
	     * @return {fabric.Text}
	     * @chainable
	     */

	    /**
	     * Retrieves object's fontFamily
	     * @method getFontFamily
	     * @memberOf fabric.Text.prototype
	     * @return {String} Font family
	     */

	    /**
	     * Sets object's fontFamily
	     * @method setFontFamily
	     * @memberOf fabric.Text.prototype
	     * @param {String} fontFamily Font family
	     * @return {fabric.Text}
	     * @chainable
	     */

	    /**
	     * Retrieves object's text
	     * @method getText
	     * @memberOf fabric.Text.prototype
	     * @return {String} text
	     */

	    /**
	     * Sets object's text
	     * @method setText
	     * @memberOf fabric.Text.prototype
	     * @param {String} text Text
	     * @return {fabric.Text}
	     * @chainable
	     */

	    /**
	     * Retrieves object's textDecoration
	     * @method getTextDecoration
	     * @memberOf fabric.Text.prototype
	     * @return {String} Text decoration
	     */

	    /**
	     * Sets object's textDecoration
	     * @method setTextDecoration
	     * @memberOf fabric.Text.prototype
	     * @param {String} textDecoration Text decoration
	     * @return {fabric.Text}
	     * @chainable
	     */

	    /**
	     * Retrieves object's fontStyle
	     * @method getFontStyle
	     * @memberOf fabric.Text.prototype
	     * @return {String} Font style
	     */

	    /**
	     * Sets object's fontStyle
	     * @method setFontStyle
	     * @memberOf fabric.Text.prototype
	     * @param {String} fontStyle Font style
	     * @return {fabric.Text}
	     * @chainable
	     */

	    /**
	     * Retrieves object's lineHeight
	     * @method getLineHeight
	     * @memberOf fabric.Text.prototype
	     * @return {Number} Line height
	     */

	    /**
	     * Sets object's lineHeight
	     * @method setLineHeight
	     * @memberOf fabric.Text.prototype
	     * @param {Number} lineHeight Line height
	     * @return {fabric.Text}
	     * @chainable
	     */

	    /**
	     * Retrieves object's textAlign
	     * @method getTextAlign
	     * @memberOf fabric.Text.prototype
	     * @return {String} Text alignment
	     */

	    /**
	     * Sets object's textAlign
	     * @method setTextAlign
	     * @memberOf fabric.Text.prototype
	     * @param {String} textAlign Text alignment
	     * @return {fabric.Text}
	     * @chainable
	     */

	    /**
	     * Retrieves object's textBackgroundColor
	     * @method getTextBackgroundColor
	     * @memberOf fabric.Text.prototype
	     * @return {String} Text background color
	     */

	    /**
	     * Sets object's textBackgroundColor
	     * @method setTextBackgroundColor
	     * @memberOf fabric.Text.prototype
	     * @param {String} textBackgroundColor Text background color
	     * @return {fabric.Text}
	     * @chainable
	     */

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type:                 'text',

	    /**
	     * Font size (in pixels)
	     * @type Number
	     * @default
	     */
	    fontSize:             40,

	    /**
	     * Font weight (e.g. bold, normal, 400, 600, 800)
	     * @type {(Number|String)}
	     * @default
	     */
	    fontWeight:           'normal',

	    /**
	     * Font family
	     * @type String
	     * @default
	     */
	    fontFamily:           'Times New Roman',

	    /**
	     * Text decoration Possible values: "", "underline", "overline" or "line-through".
	     * @type String
	     * @default
	     */
	    textDecoration:       '',

	    /**
	     * Text alignment. Possible values: "left", "center", "right" or "justify".
	     * @type String
	     * @default
	     */
	    textAlign:            'left',

	    /**
	     * Font style . Possible values: "", "normal", "italic" or "oblique".
	     * @type String
	     * @default
	     */
	    fontStyle:            '',

	    /**
	     * Line height
	     * @type Number
	     * @default
	     */
	    lineHeight:           1.16,

	    /**
	     * Background color of text lines
	     * @type String
	     * @default
	     */
	    textBackgroundColor:  '',

	    /**
	     * List of properties to consider when checking if
	     * state of an object is changed ({@link fabric.Object#hasStateChanged})
	     * as well as for history (undo/redo) purposes
	     * @type Array
	     */
	    stateProperties:      stateProperties,

	    /**
	     * When defined, an object is rendered via stroke and this property specifies its color.
	     * <b>Backwards incompatibility note:</b> This property was named "strokeStyle" until v1.1.6
	     * @type String
	     * @default
	     */
	    stroke:               null,

	    /**
	     * Shadow object representing shadow of this shape.
	     * <b>Backwards incompatibility note:</b> This property was named "textShadow" (String) until v1.2.11
	     * @type fabric.Shadow
	     * @default
	     */
	    shadow:               null,

	    /**
	     * @private
	     */
	    _fontSizeFraction: 0.25,

	    /**
	     * Text Line proportion to font Size (in pixels)
	     * @type Number
	     * @default
	     */
	    _fontSizeMult:             1.13,

	    /**
	     * Constructor
	     * @param {String} text Text string
	     * @param {Object} [options] Options object
	     * @return {fabric.Text} thisArg
	     */
	    initialize: function(text, options) {
	      options = options || { };
	      this.text = text;
	      this.__skipDimension = true;
	      this.setOptions(options);
	      this.__skipDimension = false;
	      this._initDimensions();
	    },

	    /**
	     * Renders text object on offscreen canvas, so that it would get dimensions
	     * @private
	     */
	    _initDimensions: function(ctx) {
	      if (this.__skipDimension) {
	        return;
	      }
	      if (!ctx) {
	        ctx = fabric.util.createCanvasElement().getContext('2d');
	        this._setTextStyles(ctx);
	      }
	      this._textLines = this._splitTextIntoLines();
	      this._clearCache();
	      //if textAlign is 'justify' i have to disable caching
	      //when calculating width of text and widths of line.
	      this._cacheLinesWidth = (this.textAlign !== 'justify');
	      this.width = this._getTextWidth(ctx);
	      this._cacheLinesWidth = true;
	      this.height = this._getTextHeight(ctx);
	    },

	    /**
	     * Returns string representation of an instance
	     * @return {String} String representation of text object
	     */
	    toString: function() {
	      return '#<fabric.Text (' + this.complexity() +
	        '): { "text": "' + this.text + '", "fontFamily": "' + this.fontFamily + '" }>';
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx) {
	      this.clipTo && fabric.util.clipContext(this, ctx);
	      this._setOpacity(ctx);
	      this._setShadow(ctx);
	      this._setupCompositeOperation(ctx);
	      this._renderTextBackground(ctx);
	      this._setStrokeStyles(ctx);
	      this._setFillStyles(ctx);
	      this._renderText(ctx);
	      this._renderTextDecoration(ctx);
	      this.clipTo && ctx.restore();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderText: function(ctx) {

	      this._translateForTextAlign(ctx);
	      this._renderTextFill(ctx);
	      this._renderTextStroke(ctx);
	      this._translateForTextAlign(ctx, true);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Boolean} back Indicates if translate back or forward
	     */
	    _translateForTextAlign: function(ctx, back) {
	      if (this.textAlign !== 'left' && this.textAlign !== 'justify') {
	        var sign = back ? -1 : 1;
	        ctx.translate(this.textAlign === 'center' ? (sign * this.width / 2) : sign * this.width, 0);
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _setTextStyles: function(ctx) {
	      ctx.textBaseline = 'alphabetic';
	      if (!this.skipTextAlign) {
	        ctx.textAlign = this.textAlign;
	      }
	      ctx.font = this._getFontDeclaration();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @return {Number} Height of fabric.Text object
	     */
	    _getTextHeight: function() {
	      return this._textLines.length * this._getHeightOfLine();
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @return {Number} Maximum width of fabric.Text object
	     */
	    _getTextWidth: function(ctx) {
	      var maxWidth = this._getLineWidth(ctx, 0);

	      for (var i = 1, len = this._textLines.length; i < len; i++) {
	        var currentLineWidth = this._getLineWidth(ctx, i);
	        if (currentLineWidth > maxWidth) {
	          maxWidth = currentLineWidth;
	        }
	      }
	      return maxWidth;
	    },

	    /**
	     * @private
	     * @param {String} method Method name ("fillText" or "strokeText")
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {String} chars Chars to render
	     * @param {Number} left Left position of text
	     * @param {Number} top Top position of text
	     */
	    _renderChars: function(method, ctx, chars, left, top) {
	      // remove Text word from method var
	      var shortM = method.slice(0, -4);
	      if (this[shortM].toLive) {
	        var offsetX = -this.width / 2 + this[shortM].offsetX || 0,
	            offsetY = -this.height / 2 + this[shortM].offsetY || 0;
	        ctx.save();
	        ctx.translate(offsetX, offsetY);
	        left -= offsetX;
	        top -= offsetY;
	      }
	      ctx[method](chars, left, top);
	      this[shortM].toLive && ctx.restore();
	    },

	    /**
	     * @private
	     * @param {String} method Method name ("fillText" or "strokeText")
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {String} line Text to render
	     * @param {Number} left Left position of text
	     * @param {Number} top Top position of text
	     * @param {Number} lineIndex Index of a line in a text
	     */
	    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {
	      // lift the line by quarter of fontSize
	      top -= this.fontSize * this._fontSizeFraction;

	      // short-circuit
	      var lineWidth = this._getLineWidth(ctx, lineIndex);
	      if (this.textAlign !== 'justify' || this.width < lineWidth) {
	        this._renderChars(method, ctx, line, left, top, lineIndex);
	        return;
	      }

	      // stretch the line
	      var words = line.split(/\s+/),
	          charOffset = 0,
	          wordsWidth = this._getWidthOfWords(ctx, line, lineIndex, 0),
	          widthDiff = this.width - wordsWidth,
	          numSpaces = words.length - 1,
	          spaceWidth = numSpaces > 0 ? widthDiff / numSpaces : 0,
	          leftOffset = 0, word;

	      for (var i = 0, len = words.length; i < len; i++) {
	        while (line[charOffset] === ' ' && charOffset < line.length) {
	          charOffset++;
	        }
	        word = words[i];
	        this._renderChars(method, ctx, word, left + leftOffset, top, lineIndex, charOffset);
	        leftOffset += this._getWidthOfWords(ctx, word, lineIndex, charOffset) + spaceWidth;
	        charOffset += word.length;
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Number} line
	     */
	    _getWidthOfWords: function (ctx, line) {
	      return ctx.measureText(line.replace(/\s+/g, '')).width;
	    },

	    /**
	     * @private
	     * @return {Number} Left offset
	     */
	    _getLeftOffset: function() {
	      return -this.width / 2;
	    },

	    /**
	     * @private
	     * @return {Number} Top offset
	     */
	    _getTopOffset: function() {
	      return -this.height / 2;
	    },

	    /**
	     * Returns true because text has no style
	     */
	    isEmptyStyles: function() {
	      return true;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderTextFill: function(ctx) {
	      if (!this.fill && this.isEmptyStyles()) {
	        return;
	      }

	      var lineHeights = 0;

	      for (var i = 0, len = this._textLines.length; i < len; i++) {
	        var heightOfLine = this._getHeightOfLine(ctx, i),
	            maxHeight = heightOfLine / this.lineHeight;

	        this._renderTextLine(
	          'fillText',
	          ctx,
	          this._textLines[i],
	          this._getLeftOffset(),
	          this._getTopOffset() + lineHeights + maxHeight,
	          i
	        );
	        lineHeights += heightOfLine;
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderTextStroke: function(ctx) {
	      if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {
	        return;
	      }

	      var lineHeights = 0;

	      if (this.shadow && !this.shadow.affectStroke) {
	        this._removeShadow(ctx);
	      }

	      ctx.save();

	      if (this.strokeDashArray) {
	        // Spec requires the concatenation of two copies the dash list when the number of elements is odd
	        if (1 & this.strokeDashArray.length) {
	          this.strokeDashArray.push.apply(this.strokeDashArray, this.strokeDashArray);
	        }
	        supportsLineDash && ctx.setLineDash(this.strokeDashArray);
	      }

	      ctx.beginPath();
	      for (var i = 0, len = this._textLines.length; i < len; i++) {
	        var heightOfLine = this._getHeightOfLine(ctx, i),
	            maxHeight = heightOfLine / this.lineHeight;

	        this._renderTextLine(
	          'strokeText',
	          ctx,
	          this._textLines[i],
	          this._getLeftOffset(),
	          this._getTopOffset() + lineHeights + maxHeight,
	          i
	        );
	        lineHeights += heightOfLine;
	      }
	      ctx.closePath();
	      ctx.restore();
	    },

	    _getHeightOfLine: function() {
	      return this.fontSize * this._fontSizeMult * this.lineHeight;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Array} textLines Array of all text lines
	     */
	    _renderTextBackground: function(ctx) {
	      this._renderTextBoxBackground(ctx);
	      this._renderTextLinesBackground(ctx);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderTextBoxBackground: function(ctx) {
	      if (!this.backgroundColor) {
	        return;
	      }

	      ctx.fillStyle = this.backgroundColor;

	      ctx.fillRect(
	        this._getLeftOffset(),
	        this._getTopOffset(),
	        this.width,
	        this.height
	      );
	      // if there is background color no other shadows
	      // should be casted
	      this._removeShadow(ctx);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderTextLinesBackground: function(ctx) {
	      if (!this.textBackgroundColor) {
	        return;
	      }
	      var lineTopOffset = 0, heightOfLine,
	          lineWidth, lineLeftOffset;

	      ctx.fillStyle = this.textBackgroundColor;
	      for (var i = 0, len = this._textLines.length; i < len; i++) {
	        heightOfLine = this._getHeightOfLine(ctx, i);
	        if (this._textLines[i] !== '') {
	          lineWidth = this.textAlign === 'justify' ? this.width : this._getLineWidth(ctx, i);
	          lineLeftOffset = this._getLineLeftOffset(lineWidth);
	          ctx.fillRect(
	            this._getLeftOffset() + lineLeftOffset,
	            this._getTopOffset() + lineTopOffset,
	            lineWidth,
	            heightOfLine / this.lineHeight
	          );
	        }
	        lineTopOffset += heightOfLine;
	      }
	      // if there is text background color no
	      // other shadows should be casted
	      this._removeShadow(ctx);
	    },

	    /**
	     * @private
	     * @param {Number} lineWidth Width of text line
	     * @return {Number} Line left offset
	     */
	    _getLineLeftOffset: function(lineWidth) {
	      if (this.textAlign === 'center') {
	        return (this.width - lineWidth) / 2;
	      }
	      if (this.textAlign === 'right') {
	        return this.width - lineWidth;
	      }
	      return 0;
	    },

	    /**
	     * @private
	     */
	    _clearCache: function() {
	      this.__lineWidths = [ ];
	      this.__lineHeights = [ ];
	    },

	    /**
	     * @private
	     */
	    _shouldClearCache: function() {
	      var shouldClear = false;
	      if (this._forceClearCache) {
	        this._forceClearCache = false;
	        return true;
	      }
	      for (var prop in this._dimensionAffectingProps) {
	        if (this['__' + prop] !== this[prop]) {
	          this['__' + prop] = this[prop];
	          shouldClear = true;
	        }
	      }
	      return shouldClear;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Number} lineIndex line number
	     * @return {Number} Line width
	     */
	    _getLineWidth: function(ctx, lineIndex) {
	      if (this.__lineWidths[lineIndex]) {
	        return this.__lineWidths[lineIndex];
	      }
	      var width, wordCount, line = this._textLines[lineIndex];
	      if (line === '') {
	        width = 0;
	      }
	      else if (this.textAlign === 'justify' && this._cacheLinesWidth) {
	        wordCount = line.split(/\s+/);
	        //consider not justify last line, not for now.
	        if (wordCount.length > 1) {
	          width = this.width;
	        }
	        else {
	          width = ctx.measureText(line).width;
	        }
	      }
	      else {
	        width = ctx.measureText(line).width;
	      }
	      this._cacheLinesWidth && (this.__lineWidths[lineIndex] = width);
	      return width;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderTextDecoration: function(ctx) {
	      if (!this.textDecoration) {
	        return;
	      }

	      var halfOfVerticalBox = this.height / 2,
	          _this = this, offsets = [];

	      /** @ignore */
	      function renderLinesAtOffset(offsets) {
	        var i, lineHeight = 0, len, j, oLen, lineWidth,
	            lineLeftOffset, heightOfLine;

	        for (i = 0, len = _this._textLines.length; i < len; i++) {

	          lineWidth = _this._getLineWidth(ctx, i),
	          lineLeftOffset = _this._getLineLeftOffset(lineWidth),
	          heightOfLine = _this._getHeightOfLine(ctx, i);

	          for (j = 0, oLen = offsets.length; j < oLen; j++) {
	            ctx.fillRect(
	              _this._getLeftOffset() + lineLeftOffset,
	              lineHeight + (_this._fontSizeMult - 1 + offsets[j] ) * _this.fontSize - halfOfVerticalBox,
	              lineWidth,
	              _this.fontSize / 15);
	          }
	          lineHeight += heightOfLine;
	        }
	      }

	      if (this.textDecoration.indexOf('underline') > -1) {
	        offsets.push(0.85); // 1 - 3/16
	      }
	      if (this.textDecoration.indexOf('line-through') > -1) {
	        offsets.push(0.43);
	      }
	      if (this.textDecoration.indexOf('overline') > -1) {
	        offsets.push(-0.12);
	      }
	      if (offsets.length > 0) {
	        renderLinesAtOffset(offsets);
	      }
	    },

	    /**
	     * @private
	     */
	    _getFontDeclaration: function() {
	      return [
	        // node-canvas needs "weight style", while browsers need "style weight"
	        (fabric.isLikelyNode ? this.fontWeight : this.fontStyle),
	        (fabric.isLikelyNode ? this.fontStyle : this.fontWeight),
	        this.fontSize + 'px',
	        (fabric.isLikelyNode ? ('"' + this.fontFamily + '"') : this.fontFamily)
	      ].join(' ');
	    },

	    /**
	     * Renders text instance on a specified context
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    render: function(ctx, noTransform) {
	      // do not render if object is not visible
	      if (!this.visible) {
	        return;
	      }

	      ctx.save();
	      this._setTextStyles(ctx);

	      if (this._shouldClearCache()) {
	        this._initDimensions(ctx);
	      }
	      if (!noTransform) {
	        this.transform(ctx);
	      }
	      if (this.transformMatrix) {
	        ctx.transform.apply(ctx, this.transformMatrix);
	      }
	      if (this.group && this.group.type === 'path-group') {
	        ctx.translate(this.left, this.top);
	      }
	      this._render(ctx);
	      ctx.restore();
	    },

	    /**
	     * Returns the text as an array of lines.
	     * @returns {Array} Lines in the text
	     */
	    _splitTextIntoLines: function() {
	      return this.text.split(this._reNewline);
	    },

	    /**
	     * Returns object representation of an instance
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} Object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      var object = extend(this.callSuper('toObject', propertiesToInclude), {
	        text:                 this.text,
	        fontSize:             this.fontSize,
	        fontWeight:           this.fontWeight,
	        fontFamily:           this.fontFamily,
	        fontStyle:            this.fontStyle,
	        lineHeight:           this.lineHeight,
	        textDecoration:       this.textDecoration,
	        textAlign:            this.textAlign,
	        textBackgroundColor:  this.textBackgroundColor
	      });
	      if (!this.includeDefaultValues) {
	        this._removeDefaultValues(object);
	      }
	      return object;
	    },

	    /* _TO_SVG_START_ */
	    /**
	     * Returns SVG representation of an instance
	     * @param {Function} [reviver] Method for further parsing of svg representation.
	     * @return {String} svg representation of an instance
	     */
	    toSVG: function(reviver) {
	      var markup = this._createBaseSVGMarkup(),
	          offsets = this._getSVGLeftTopOffsets(this.ctx),
	          textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);
	      this._wrapSVGTextAndBg(markup, textAndBg);

	      return reviver ? reviver(markup.join('')) : markup.join('');
	    },

	    /**
	     * @private
	     */
	    _getSVGLeftTopOffsets: function(ctx) {
	      var lineTop = this._getHeightOfLine(ctx, 0),
	          textLeft = -this.width / 2,
	          textTop = 0;

	      return {
	        textLeft: textLeft + (this.group && this.group.type === 'path-group' ? this.left : 0),
	        textTop: textTop + (this.group && this.group.type === 'path-group' ? -this.top : 0),
	        lineTop: lineTop
	      };
	    },

	    /**
	     * @private
	     */
	    _wrapSVGTextAndBg: function(markup, textAndBg) {
	      var noShadow = true, filter = this.getSvgFilter(),
	          style = filter === '' ? '' : ' style="' + filter + '"';

	      markup.push(
	        '\t<g transform="', this.getSvgTransform(), this.getSvgTransformMatrix(), '"',
	          style, '>\n',
	          textAndBg.textBgRects.join(''),
	          '\t\t<text ',
	            (this.fontFamily ? 'font-family="' + this.fontFamily.replace(/"/g, '\'') + '" ': ''),
	            (this.fontSize ? 'font-size="' + this.fontSize + '" ': ''),
	            (this.fontStyle ? 'font-style="' + this.fontStyle + '" ': ''),
	            (this.fontWeight ? 'font-weight="' + this.fontWeight + '" ': ''),
	            (this.textDecoration ? 'text-decoration="' + this.textDecoration + '" ': ''),
	            'style="', this.getSvgStyles(noShadow), '" >\n',
	            textAndBg.textSpans.join(''),
	          '\t\t</text>\n',
	        '\t</g>\n'
	      );
	    },

	    /**
	     * @private
	     * @param {Number} textTopOffset Text top offset
	     * @param {Number} textLeftOffset Text left offset
	     * @return {Object}
	     */
	    _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {
	      var textSpans = [ ],
	          textBgRects = [ ],
	          height = 0;
	      // bounding-box background
	      this._setSVGBg(textBgRects);

	      // text and text-background
	      for (var i = 0, len = this._textLines.length; i < len; i++) {
	        if (this.textBackgroundColor) {
	          this._setSVGTextLineBg(textBgRects, i, textLeftOffset, textTopOffset, height);
	        }
	        this._setSVGTextLineText(i, textSpans, height, textLeftOffset, textTopOffset, textBgRects);
	        height += this._getHeightOfLine(this.ctx, i);
	      }

	      return {
	        textSpans: textSpans,
	        textBgRects: textBgRects
	      };
	    },

	    _setSVGTextLineText: function(i, textSpans, height, textLeftOffset, textTopOffset) {
	      var yPos = this.fontSize * (this._fontSizeMult - this._fontSizeFraction)
	        - textTopOffset + height - this.height / 2;
	      if (this.textAlign === 'justify') {
	        // i call from here to do not intefere with IText
	        this._setSVGTextLineJustifed(i, textSpans, yPos, textLeftOffset);
	        return;
	      }
	      textSpans.push(
	        '\t\t\t<tspan x="',
	          toFixed(textLeftOffset + this._getLineLeftOffset(this._getLineWidth(this.ctx, i)), NUM_FRACTION_DIGITS), '" ',
	          'y="',
	          toFixed(yPos, NUM_FRACTION_DIGITS),
	          '" ',
	          // doing this on <tspan> elements since setting opacity
	          // on containing <text> one doesn't work in Illustrator
	          this._getFillAttributes(this.fill), '>',
	          fabric.util.string.escapeXml(this._textLines[i]),
	        '</tspan>\n'
	      );
	    },

	    _setSVGTextLineJustifed: function(i, textSpans, yPos, textLeftOffset) {
	      var ctx = fabric.util.createCanvasElement().getContext('2d');

	      this._setTextStyles(ctx);

	      var line = this._textLines[i],
	          words = line.split(/\s+/),
	          wordsWidth = this._getWidthOfWords(ctx, line),
	          widthDiff = this.width - wordsWidth,
	          numSpaces = words.length - 1,
	          spaceWidth = numSpaces > 0 ? widthDiff / numSpaces : 0,
	          word, attributes = this._getFillAttributes(this.fill),
	          len;

	      textLeftOffset += this._getLineLeftOffset(this._getLineWidth(ctx, i));

	      for (i = 0, len = words.length; i < len; i++) {
	        word = words[i];
	        textSpans.push(
	          '\t\t\t<tspan x="',
	            toFixed(textLeftOffset, NUM_FRACTION_DIGITS), '" ',
	            'y="',
	            toFixed(yPos, NUM_FRACTION_DIGITS),
	            '" ',
	            // doing this on <tspan> elements since setting opacity
	            // on containing <text> one doesn't work in Illustrator
	            attributes, '>',
	            fabric.util.string.escapeXml(word),
	          '</tspan>\n'
	        );
	        textLeftOffset += this._getWidthOfWords(ctx, word) + spaceWidth;
	      }
	    },

	    _setSVGTextLineBg: function(textBgRects, i, textLeftOffset, textTopOffset, height) {
	      textBgRects.push(
	        '\t\t<rect ',
	          this._getFillAttributes(this.textBackgroundColor),
	          ' x="',
	          toFixed(textLeftOffset + this._getLineLeftOffset(this._getLineWidth(this.ctx, i)), NUM_FRACTION_DIGITS),
	          '" y="',
	          toFixed(height - this.height / 2, NUM_FRACTION_DIGITS),
	          '" width="',
	          toFixed(this._getLineWidth(this.ctx, i), NUM_FRACTION_DIGITS),
	          '" height="',
	          toFixed(this._getHeightOfLine(this.ctx, i) / this.lineHeight, NUM_FRACTION_DIGITS),
	        '"></rect>\n');
	    },

	    _setSVGBg: function(textBgRects) {
	      if (this.backgroundColor) {
	        textBgRects.push(
	          '\t\t<rect ',
	            this._getFillAttributes(this.backgroundColor),
	            ' x="',
	            toFixed(-this.width / 2, NUM_FRACTION_DIGITS),
	            '" y="',
	            toFixed(-this.height / 2, NUM_FRACTION_DIGITS),
	            '" width="',
	            toFixed(this.width, NUM_FRACTION_DIGITS),
	            '" height="',
	            toFixed(this.height, NUM_FRACTION_DIGITS),
	          '"></rect>\n');
	      }
	    },

	    /**
	     * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values
	     * we work around it by "moving" alpha channel into opacity attribute and setting fill's alpha to 1
	     *
	     * @private
	     * @param {Any} value
	     * @return {String}
	     */
	    _getFillAttributes: function(value) {
	      var fillColor = (value && typeof value === 'string') ? new fabric.Color(value) : '';
	      if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {
	        return 'fill="' + value + '"';
	      }
	      return 'opacity="' + fillColor.getAlpha() + '" fill="' + fillColor.setAlpha(1).toRgb() + '"';
	    },
	    /* _TO_SVG_END_ */

	    /**
	     * Sets specified property to a specified value
	     * @param {String} key
	     * @param {Any} value
	     * @return {fabric.Text} thisArg
	     * @chainable
	     */
	    _set: function(key, value) {
	      this.callSuper('_set', key, value);

	      if (key in this._dimensionAffectingProps) {
	        this._initDimensions();
	        this.setCoords();
	      }
	    },

	    /**
	     * Returns complexity of an instance
	     * @return {Number} complexity
	     */
	    complexity: function() {
	      return 1;
	    }
	  });

	  /* _FROM_SVG_START_ */
	  /**
	   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})
	   * @static
	   * @memberOf fabric.Text
	   * @see: http://www.w3.org/TR/SVG/text.html#TextElement
	   */
	  fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(
	    'x y dx dy font-family font-style font-weight font-size text-decoration text-anchor'.split(' '));

	  /**
	   * Default SVG font size
	   * @static
	   * @memberOf fabric.Text
	   */
	  fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;

	  /**
	   * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)
	   * @static
	   * @memberOf fabric.Text
	   * @param {SVGElement} element Element to parse
	   * @param {Object} [options] Options object
	   * @return {fabric.Text} Instance of fabric.Text
	   */
	  fabric.Text.fromElement = function(element, options) {
	    if (!element) {
	      return null;
	    }

	    var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES);
	    options = fabric.util.object.extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes);

	    options.top = options.top || 0;
	    options.left = options.left || 0;
	    if ('dx' in parsedAttributes) {
	      options.left += parsedAttributes.dx;
	    }
	    if ('dy' in parsedAttributes) {
	      options.top += parsedAttributes.dy;
	    }
	    if (!('fontSize' in options)) {
	      options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;
	    }

	    if (!options.originX) {
	      options.originX = 'left';
	    }

	    var textContent = '';

	    // The XML is not properly parsed in IE9 so a workaround to get
	    // textContent is through firstChild.data. Another workaround would be
	    // to convert XML loaded from a file to be converted using DOMParser (same way loadSVGFromString() does)
	    if (!('textContent' in element)) {
	      if ('firstChild' in element && element.firstChild !== null) {
	        if ('data' in element.firstChild && element.firstChild.data !== null) {
	          textContent = element.firstChild.data;
	        }
	      }
	    }
	    else {
	      textContent = element.textContent;
	    }

	    textContent = textContent.replace(/^\s+|\s+$|\n+/g, '').replace(/\s+/g, ' ');

	    var text = new fabric.Text(textContent, options),
	        /*
	          Adjust positioning:
	            x/y attributes in SVG correspond to the bottom-left corner of text bounding box
	            top/left properties in Fabric correspond to center point of text bounding box
	        */
	        offX = 0;

	    if (text.originX === 'left') {
	      offX = text.getWidth() / 2;
	    }
	    if (text.originX === 'right') {
	      offX = -text.getWidth() / 2;
	    }
	    text.set({
	      left: text.getLeft() + offX,
	      top: text.getTop() - text.getHeight() / 2 + text.fontSize * (0.18 + text._fontSizeFraction) /* 0.3 is the old lineHeight */
	    });

	    return text;
	  };
	  /* _FROM_SVG_END_ */

	  /**
	   * Returns fabric.Text instance from an object representation
	   * @static
	   * @memberOf fabric.Text
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Text} Instance of fabric.Text
	   */
	  fabric.Text.fromObject = function(object) {
	    return new fabric.Text(object.text, clone(object));
	  };

	  fabric.util.createAccessors(fabric.Text);

	})( true ? exports : this);


	(function() {

	  var clone = fabric.util.object.clone;

	  /**
	   * IText class (introduced in <b>v1.4</b>) Events are also fired with "text:"
	   * prefix when observing canvas.
	   * @class fabric.IText
	   * @extends fabric.Text
	   * @mixes fabric.Observable
	   *
	   * @fires changed
	   * @fires selection:changed
	   * @fires editing:entered
	   * @fires editing:exited
	   *
	   * @return {fabric.IText} thisArg
	   * @see {@link fabric.IText#initialize} for constructor definition
	   *
	   * <p>Supported key combinations:</p>
	   * <pre>
	   *   Move cursor:                    left, right, up, down
	   *   Select character:               shift + left, shift + right
	   *   Select text vertically:         shift + up, shift + down
	   *   Move cursor by word:            alt + left, alt + right
	   *   Select words:                   shift + alt + left, shift + alt + right
	   *   Move cursor to line start/end:  cmd + left, cmd + right or home, end
	   *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end
	   *   Jump to start/end of text:      cmd + up, cmd + down
	   *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown
	   *   Delete character:               backspace
	   *   Delete word:                    alt + backspace
	   *   Delete line:                    cmd + backspace
	   *   Forward delete:                 delete
	   *   Copy text:                      ctrl/cmd + c
	   *   Paste text:                     ctrl/cmd + v
	   *   Cut text:                       ctrl/cmd + x
	   *   Select entire text:             ctrl/cmd + a
	   *   Quit editing                    tab or esc
	   * </pre>
	   *
	   * <p>Supported mouse/touch combination</p>
	   * <pre>
	   *   Position cursor:                click/touch
	   *   Create selection:               click/touch & drag
	   *   Create selection:               click & shift + click
	   *   Select word:                    double click
	   *   Select line:                    triple click
	   * </pre>
	   */
	  fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */ {

	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'i-text',

	    /**
	     * Index where text selection starts (or where cursor is when there is no selection)
	     * @type Number
	     * @default
	     */
	    selectionStart: 0,

	    /**
	     * Index where text selection ends
	     * @type Number
	     * @default
	     */
	    selectionEnd: 0,

	    /**
	     * Color of text selection
	     * @type String
	     * @default
	     */
	    selectionColor: 'rgba(17,119,255,0.3)',

	    /**
	     * Indicates whether text is in editing mode
	     * @type Boolean
	     * @default
	     */
	    isEditing: false,

	    /**
	     * Indicates whether a text can be edited
	     * @type Boolean
	     * @default
	     */
	    editable: true,

	    /**
	     * Border color of text object while it's in editing mode
	     * @type String
	     * @default
	     */
	    editingBorderColor: 'rgba(102,153,255,0.25)',

	    /**
	     * Width of cursor (in px)
	     * @type Number
	     * @default
	     */
	    cursorWidth: 2,

	    /**
	     * Color of default cursor (when not overwritten by character style)
	     * @type String
	     * @default
	     */
	    cursorColor: '#333',

	    /**
	     * Delay between cursor blink (in ms)
	     * @type Number
	     * @default
	     */
	    cursorDelay: 1000,

	    /**
	     * Duration of cursor fadein (in ms)
	     * @type Number
	     * @default
	     */
	    cursorDuration: 600,

	    /**
	     * Object containing character styles
	     * (where top-level properties corresponds to line number and 2nd-level properties -- to char number in a line)
	     * @type Object
	     * @default
	     */
	    styles: null,

	    /**
	     * Indicates whether internal text char widths can be cached
	     * @type Boolean
	     * @default
	     */
	    caching: true,

	    /**
	     * @private
	     */
	    _reSpace: /\s|\n/,

	    /**
	     * @private
	     */
	    _currentCursorOpacity: 0,

	    /**
	     * @private
	     */
	    _selectionDirection: null,

	    /**
	     * @private
	     */
	    _abortCursorAnimation: false,

	    /**
	     * @private
	     */
	    _charWidthsCache: { },

	    /**
	     * @private
	     */
	    __widthOfSpace: [ ],

	    /**
	     * Constructor
	     * @param {String} text Text string
	     * @param {Object} [options] Options object
	     * @return {fabric.IText} thisArg
	     */
	    initialize: function(text, options) {
	      this.styles = options ? (options.styles || { }) : { };
	      this.callSuper('initialize', text, options);
	      this.initBehavior();
	    },

	    /**
	     * @private
	     */
	    _clearCache: function() {
	      this.callSuper('_clearCache');
	      this.__widthOfSpace = [ ];
	    },

	    /**
	     * Returns true if object has no styling
	     */
	    isEmptyStyles: function() {
	      if (!this.styles) {
	        return true;
	      }
	      var obj = this.styles;

	      for (var p1 in obj) {
	        for (var p2 in obj[p1]) {
	          /*jshint unused:false */
	          for (var p3 in obj[p1][p2]) {
	            return false;
	          }
	        }
	      }
	      return true;
	    },

	    /**
	     * Sets selection start (left boundary of a selection)
	     * @param {Number} index Index to set selection start to
	     */
	    setSelectionStart: function(index) {
	      index = Math.max(index, 0);
	      if (this.selectionStart !== index) {
	        this.fire('selection:changed');
	        this.canvas && this.canvas.fire('text:selection:changed', { target: this });
	        this.selectionStart = index;
	      }
	      this._updateTextarea();
	    },

	    /**
	     * Sets selection end (right boundary of a selection)
	     * @param {Number} index Index to set selection end to
	     */
	    setSelectionEnd: function(index) {
	      index = Math.min(index, this.text.length);
	      if (this.selectionEnd !== index) {
	        this.fire('selection:changed');
	        this.canvas && this.canvas.fire('text:selection:changed', { target: this });
	        this.selectionEnd = index;
	      }
	      this._updateTextarea();
	    },

	    /**
	     * Gets style of a current selection/cursor (at the start position)
	     * @param {Number} [startIndex] Start index to get styles at
	     * @param {Number} [endIndex] End index to get styles at
	     * @return {Object} styles Style object at a specified (or current) index
	     */
	    getSelectionStyles: function(startIndex, endIndex) {

	      if (arguments.length === 2) {
	        var styles = [ ];
	        for (var i = startIndex; i < endIndex; i++) {
	          styles.push(this.getSelectionStyles(i));
	        }
	        return styles;
	      }

	      var loc = this.get2DCursorLocation(startIndex),
	          style = this._getStyleDeclaration(loc.lineIndex, loc.charIndex);

	      return style || {};
	    },

	    /**
	     * Sets style of a current selection
	     * @param {Object} [styles] Styles object
	     * @return {fabric.IText} thisArg
	     * @chainable
	     */
	    setSelectionStyles: function(styles) {
	      if (this.selectionStart === this.selectionEnd) {
	        this._extendStyles(this.selectionStart, styles);
	      }
	      else {
	        for (var i = this.selectionStart; i < this.selectionEnd; i++) {
	          this._extendStyles(i, styles);
	        }
	      }
	      /* not included in _extendStyles to avoid clearing cache more than once */
	      this._forceClearCache = true;
	      return this;
	    },

	    /**
	     * @private
	     */
	    _extendStyles: function(index, styles) {
	      var loc = this.get2DCursorLocation(index);

	      if (!this._getLineStyle(loc.lineIndex)) {
	        this._setLineStyle(loc.lineIndex, {});
	      }

	      if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {
	        this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});
	      }

	      fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _render: function(ctx) {
	      this.callSuper('_render', ctx);
	      this.ctx = ctx;
	      this.isEditing && this.renderCursorOrSelection();
	    },

	    /**
	     * Renders cursor or selection (depending on what exists)
	     */
	    renderCursorOrSelection: function() {
	      if (!this.active) {
	        return;
	      }

	      var chars = this.text.split(''),
	          boundaries, ctx;

	      if (this.canvas.contextTop) {
	        ctx = this.canvas.contextTop;
	        ctx.save();
	        ctx.transform.apply(ctx, this.canvas.viewportTransform);
	        this.transform(ctx);
	        this.transformMatrix && ctx.transform.apply(ctx, this.transformMatrix);
	      }
	      else {
	        ctx = this.ctx;
	        ctx.save();
	      }

	      if (this.selectionStart === this.selectionEnd) {
	        boundaries = this._getCursorBoundaries(chars, 'cursor');
	        this.renderCursor(boundaries, ctx);
	      }
	      else {
	        boundaries = this._getCursorBoundaries(chars, 'selection');
	        this.renderSelection(chars, boundaries, ctx);
	      }

	      ctx.restore();
	    },

	    /**
	     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)
	     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.
	     */
	    get2DCursorLocation: function(selectionStart) {
	      if (typeof selectionStart === 'undefined') {
	        selectionStart = this.selectionStart;
	      }
	      var len = this._textLines.length;
	      for (var i = 0; i < len; i++) {
	        if (selectionStart <= this._textLines[i].length) {
	          return {
	            lineIndex: i,
	            charIndex: selectionStart
	          };
	        }
	        selectionStart -= this._textLines[i].length + 1;
	      }
	      return {
	        lineIndex: i - 1,
	        charIndex: this._textLines[i - 1].length < selectionStart ? this._textLines[i - 1].length : selectionStart
	      };
	    },

	    /**
	     * Returns complete style of char at the current cursor
	     * @param {Number} lineIndex Line index
	     * @param {Number} charIndex Char index
	     * @return {Object} Character style
	     */
	    getCurrentCharStyle: function(lineIndex, charIndex) {
	      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);

	      return {
	        fontSize: style && style.fontSize || this.fontSize,
	        fill: style && style.fill || this.fill,
	        textBackgroundColor: style && style.textBackgroundColor || this.textBackgroundColor,
	        textDecoration: style && style.textDecoration || this.textDecoration,
	        fontFamily: style && style.fontFamily || this.fontFamily,
	        fontWeight: style && style.fontWeight || this.fontWeight,
	        fontStyle: style && style.fontStyle || this.fontStyle,
	        stroke: style && style.stroke || this.stroke,
	        strokeWidth: style && style.strokeWidth || this.strokeWidth
	      };
	    },

	    /**
	     * Returns fontSize of char at the current cursor
	     * @param {Number} lineIndex Line index
	     * @param {Number} charIndex Char index
	     * @return {Number} Character font size
	     */
	    getCurrentCharFontSize: function(lineIndex, charIndex) {
	      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);
	      return style && style.fontSize ? style.fontSize : this.fontSize;
	    },

	    /**
	     * Returns color (fill) of char at the current cursor
	     * @param {Number} lineIndex Line index
	     * @param {Number} charIndex Char index
	     * @return {String} Character color (fill)
	     */
	    getCurrentCharColor: function(lineIndex, charIndex) {
	      var style = this._getStyleDeclaration(lineIndex, charIndex === 0 ? 0 : charIndex - 1);
	      return style && style.fill ? style.fill : this.cursorColor;
	    },

	    /**
	     * Returns cursor boundaries (left, top, leftOffset, topOffset)
	     * @private
	     * @param {Array} chars Array of characters
	     * @param {String} typeOfBoundaries
	     */
	    _getCursorBoundaries: function(chars, typeOfBoundaries) {

	      // left/top are left/top of entire text box
	      // leftOffset/topOffset are offset from that left/top point of a text box

	      var left = Math.round(this._getLeftOffset()),
	          top = this._getTopOffset(),

	          offsets = this._getCursorBoundariesOffsets(
	                      chars, typeOfBoundaries);

	      return {
	        left: left,
	        top: top,
	        leftOffset: offsets.left + offsets.lineLeft,
	        topOffset: offsets.top
	      };
	    },

	    /**
	     * @private
	     */
	    _getCursorBoundariesOffsets: function(chars, typeOfBoundaries) {

	      var lineLeftOffset = 0,

	          lineIndex = 0,
	          charIndex = 0,
	          topOffset = 0,
	          leftOffset = 0;

	      for (var i = 0; i < this.selectionStart; i++) {
	        if (chars[i] === '\n') {
	          leftOffset = 0;
	          topOffset += this._getHeightOfLine(this.ctx, lineIndex);

	          lineIndex++;
	          charIndex = 0;
	        }
	        else {
	          leftOffset += this._getWidthOfChar(this.ctx, chars[i], lineIndex, charIndex);
	          charIndex++;
	        }

	        lineLeftOffset = this._getLineLeftOffset(this._getLineWidth(this.ctx, lineIndex));
	      }
	      if (typeOfBoundaries === 'cursor') {
	        topOffset += (1 - this._fontSizeFraction) * this._getHeightOfLine(this.ctx, lineIndex) / this.lineHeight
	          - this.getCurrentCharFontSize(lineIndex, charIndex) * (1 - this._fontSizeFraction);
	      }

	      return {
	        top: topOffset,
	        left: leftOffset,
	        lineLeft: lineLeftOffset
	      };
	    },

	    /**
	     * Renders cursor
	     * @param {Object} boundaries
	     * @param {CanvasRenderingContext2D} ctx transformed context to draw on
	     */
	    renderCursor: function(boundaries, ctx) {

	      var cursorLocation = this.get2DCursorLocation(),
	          lineIndex = cursorLocation.lineIndex,
	          charIndex = cursorLocation.charIndex,
	          charHeight = this.getCurrentCharFontSize(lineIndex, charIndex),
	          leftOffset = (lineIndex === 0 && charIndex === 0)
	                    ? this._getLineLeftOffset(this._getLineWidth(ctx, lineIndex))
	                    : boundaries.leftOffset;

	      ctx.fillStyle = this.getCurrentCharColor(lineIndex, charIndex);
	      ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;

	      ctx.fillRect(
	        boundaries.left + leftOffset,
	        boundaries.top + boundaries.topOffset,
	        this.cursorWidth / this.scaleX,
	        charHeight);

	    },

	    /**
	     * Renders text selection
	     * @param {Array} chars Array of characters
	     * @param {Object} boundaries Object with left/top/leftOffset/topOffset
	     * @param {CanvasRenderingContext2D} ctx transformed context to draw on
	     */
	    renderSelection: function(chars, boundaries, ctx) {

	      ctx.fillStyle = this.selectionColor;

	      var start = this.get2DCursorLocation(this.selectionStart),
	          end = this.get2DCursorLocation(this.selectionEnd),
	          startLine = start.lineIndex,
	          endLine = end.lineIndex;

	      for (var i = startLine; i <= endLine; i++) {
	        var lineOffset = this._getLineLeftOffset(this._getLineWidth(ctx, i)) || 0,
	            lineHeight = this._getHeightOfLine(this.ctx, i),
	            boxWidth = 0, line = this._textLines[i];

	        if (i === startLine) {
	          for (var j = 0, len = line.length; j < len; j++) {
	            if (j >= start.charIndex && (i !== endLine || j < end.charIndex)) {
	              boxWidth += this._getWidthOfChar(ctx, line[j], i, j);
	            }
	            if (j < start.charIndex) {
	              lineOffset += this._getWidthOfChar(ctx, line[j], i, j);
	            }
	          }
	        }
	        else if (i > startLine && i < endLine) {
	          boxWidth += this._getLineWidth(ctx, i) || 5;
	        }
	        else if (i === endLine) {
	          for (var j2 = 0, j2len = end.charIndex; j2 < j2len; j2++) {
	            boxWidth += this._getWidthOfChar(ctx, line[j2], i, j2);
	          }
	        }

	        ctx.fillRect(
	          boundaries.left + lineOffset,
	          boundaries.top + boundaries.topOffset,
	          boxWidth,
	          lineHeight);

	        boundaries.topOffset += lineHeight;
	      }
	    },

	    /**
	     * @private
	     * @param {String} method
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderChars: function(method, ctx, line, left, top, lineIndex, charOffset) {

	      if (this.isEmptyStyles()) {
	        return this._renderCharsFast(method, ctx, line, left, top);
	      }

	      charOffset = charOffset || 0;
	      this.skipTextAlign = true;

	      // set proper box offset
	      left -= this.textAlign === 'center'
	        ? (this.width / 2)
	        : (this.textAlign === 'right')
	          ? this.width
	          : 0;

	      // set proper line offset
	      var lineHeight = this._getHeightOfLine(ctx, lineIndex),
	          lineLeftOffset = this._getLineLeftOffset(this._getLineWidth(ctx, lineIndex)),
	          prevStyle,
	          thisStyle,
	          charsToRender = '';

	      left += lineLeftOffset || 0;

	      ctx.save();
	      top -= lineHeight / this.lineHeight * this._fontSizeFraction;
	      for (var i = charOffset, len = line.length + charOffset; i <= len; i++) {
	        prevStyle = prevStyle || this.getCurrentCharStyle(lineIndex, i);
	        thisStyle = this.getCurrentCharStyle(lineIndex, i + 1);

	        if (this._hasStyleChanged(prevStyle, thisStyle) || i === len) {
	          this._renderChar(method, ctx, lineIndex, i - 1, charsToRender, left, top, lineHeight);
	          charsToRender = '';
	          prevStyle = thisStyle;
	        }
	        charsToRender += line[i - charOffset];
	      }
	      ctx.restore();
	    },

	    /**
	     * @private
	     * @param {String} method
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {String} line Content of the line
	     * @param {Number} left Left coordinate
	     * @param {Number} top Top coordinate
	     */
	    _renderCharsFast: function(method, ctx, line, left, top) {
	      this.skipTextAlign = false;

	      if (method === 'fillText' && this.fill) {
	        this.callSuper('_renderChars', method, ctx, line, left, top);
	      }
	      if (method === 'strokeText' && ((this.stroke && this.strokeWidth > 0) || this.skipFillStrokeCheck)) {
	        this.callSuper('_renderChars', method, ctx, line, left, top);
	      }
	    },

	    /**
	     * @private
	     * @param {String} method
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Number} lineIndex
	     * @param {Number} i
	     * @param {String} _char
	     * @param {Number} left Left coordinate
	     * @param {Number} top Top coordinate
	     * @param {Number} lineHeight Height of the line
	     */
	    _renderChar: function(method, ctx, lineIndex, i, _char, left, top, lineHeight) {
	      var charWidth, charHeight, shouldFill, shouldStroke,
	          decl = this._getStyleDeclaration(lineIndex, i),
	          offset, textDecoration;

	      if (decl) {
	        charHeight = this._getHeightOfChar(ctx, _char, lineIndex, i);
	        shouldStroke = decl.stroke;
	        shouldFill = decl.fill;
	        textDecoration = decl.textDecoration;
	      }
	      else {
	        charHeight = this.fontSize;
	      }

	      shouldStroke = (shouldStroke || this.stroke) && method === 'strokeText';
	      shouldFill = (shouldFill || this.fill) && method === 'fillText';

	      decl && ctx.save();

	      charWidth = this._applyCharStylesGetWidth(ctx, _char, lineIndex, i, decl || {});
	      textDecoration = textDecoration || this.textDecoration;

	      if (decl && decl.textBackgroundColor) {
	        this._removeShadow(ctx);
	      }
	      shouldFill && ctx.fillText(_char, left, top);
	      shouldStroke && ctx.strokeText(_char, left, top);

	      if (textDecoration || textDecoration !== '') {
	        offset = this._fontSizeFraction * lineHeight / this.lineHeight;
	        this._renderCharDecoration(ctx, textDecoration, left, top, offset, charWidth, charHeight);
	      }

	      decl && ctx.restore();
	      ctx.translate(charWidth, 0);
	    },

	    /**
	     * @private
	     * @param {Object} prevStyle
	     * @param {Object} thisStyle
	     */
	    _hasStyleChanged: function(prevStyle, thisStyle) {
	      return (prevStyle.fill !== thisStyle.fill ||
	              prevStyle.fontSize !== thisStyle.fontSize ||
	              prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor ||
	              prevStyle.textDecoration !== thisStyle.textDecoration ||
	              prevStyle.fontFamily !== thisStyle.fontFamily ||
	              prevStyle.fontWeight !== thisStyle.fontWeight ||
	              prevStyle.fontStyle !== thisStyle.fontStyle ||
	              prevStyle.stroke !== thisStyle.stroke ||
	              prevStyle.strokeWidth !== thisStyle.strokeWidth
	      );
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderCharDecoration: function(ctx, textDecoration, left, top, offset, charWidth, charHeight) {

	      if (!textDecoration) {
	        return;
	      }

	      var decorationWeight = charHeight / 15,
	          positions = {
	            underline: top + charHeight / 10,
	            'line-through': top - charHeight * (this._fontSizeFraction + this._fontSizeMult - 1) + decorationWeight,
	            overline: top - (this._fontSizeMult - this._fontSizeFraction) * charHeight
	          },
	          decorations = ['underline', 'line-through', 'overline'], i, decoration;

	      for (i = 0; i < decorations.length; i++) {
	        decoration = decorations[i];
	        if (textDecoration.indexOf(decoration) > -1) {
	          ctx.fillRect(left, positions[decoration], charWidth , decorationWeight);
	        }
	      }
	    },

	    /**
	     * @private
	     * @param {String} method
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {String} line
	     */
	    _renderTextLine: function(method, ctx, line, left, top, lineIndex) {
	      // to "cancel" this.fontSize subtraction in fabric.Text#_renderTextLine
	      // the adding 0.03 is just to align text with itext by overlap test
	      if (!this.isEmptyStyles()) {
	        top += this.fontSize * (this._fontSizeFraction + 0.03);
	      }
	      this.callSuper('_renderTextLine', method, ctx, line, left, top, lineIndex);
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderTextDecoration: function(ctx) {
	      if (this.isEmptyStyles()) {
	        return this.callSuper('_renderTextDecoration', ctx);
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _renderTextLinesBackground: function(ctx) {
	      this.callSuper('_renderTextLinesBackground', ctx);

	      var lineTopOffset = 0, heightOfLine,
	          lineWidth, lineLeftOffset,
	          leftOffset = this._getLeftOffset(),
	          topOffset = this._getTopOffset(),
	          line, _char, style;

	      for (var i = 0, len = this._textLines.length; i < len; i++) {
	        heightOfLine = this._getHeightOfLine(ctx, i);
	        line = this._textLines[i];

	        if (line === '' || !this.styles || !this._getLineStyle(i)) {
	          lineTopOffset += heightOfLine;
	          continue;
	        }

	        lineWidth = this._getLineWidth(ctx, i);
	        lineLeftOffset = this._getLineLeftOffset(lineWidth);

	        for (var j = 0, jlen = line.length; j < jlen; j++) {
	          style = this._getStyleDeclaration(i, j);
	          if (!style || !style.textBackgroundColor) {
	            continue;
	          }
	          _char = line[j];

	          ctx.fillStyle = style.textBackgroundColor;

	          ctx.fillRect(
	            leftOffset + lineLeftOffset + this._getWidthOfCharsAt(ctx, i, j),
	            topOffset + lineTopOffset,
	            this._getWidthOfChar(ctx, _char, i, j) + 1,
	            heightOfLine / this.lineHeight
	          );
	        }
	        lineTopOffset += heightOfLine;
	      }
	    },

	    /**
	     * @private
	     */
	    _getCacheProp: function(_char, styleDeclaration) {
	      return _char +
	             styleDeclaration.fontFamily +
	             styleDeclaration.fontSize +
	             styleDeclaration.fontWeight +
	             styleDeclaration.fontStyle +
	             styleDeclaration.shadow;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {String} _char
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @param {Object} [decl]
	     */
	    _applyCharStylesGetWidth: function(ctx, _char, lineIndex, charIndex, decl) {
	      var charDecl = this._getStyleDeclaration(lineIndex, charIndex),
	          styleDeclaration = (decl && clone(decl)) || clone(charDecl), width;

	      this._applyFontStyles(styleDeclaration);

	      var cacheProp = this._getCacheProp(_char, styleDeclaration);

	      // short-circuit if no styles for this char
	      // global style from object is always applyed and handled by save and restore
	      if (!charDecl && this._charWidthsCache[cacheProp] && this.caching) {
	        return this._charWidthsCache[cacheProp];
	      }

	      if (typeof styleDeclaration.shadow === 'string') {
	        styleDeclaration.shadow = new fabric.Shadow(styleDeclaration.shadow);
	      }

	      var fill = styleDeclaration.fill || this.fill;
	      ctx.fillStyle = fill.toLive
	        ? fill.toLive(ctx, this)
	        : fill;

	      if (styleDeclaration.stroke) {
	        ctx.strokeStyle = (styleDeclaration.stroke && styleDeclaration.stroke.toLive)
	          ? styleDeclaration.stroke.toLive(ctx, this)
	          : styleDeclaration.stroke;
	      }

	      ctx.lineWidth = styleDeclaration.strokeWidth || this.strokeWidth;
	      ctx.font = this._getFontDeclaration.call(styleDeclaration);

	      //if we want this._setShadow.call to work with styleDeclarion
	      //we have to add those references
	      if (styleDeclaration.shadow) {
	        styleDeclaration.scaleX = this.scaleX;
	        styleDeclaration.scaleY = this.scaleY;
	        styleDeclaration.canvas = this.canvas;
	        this._setShadow.call(styleDeclaration, ctx);
	      }

	      if (!this.caching || !this._charWidthsCache[cacheProp]) {
	        width = ctx.measureText(_char).width;
	        this.caching && (this._charWidthsCache[cacheProp] = width);
	      }

	      return this._charWidthsCache[cacheProp];
	    },

	    /**
	     * @private
	     * @param {Object} styleDeclaration
	     */
	    _applyFontStyles: function(styleDeclaration) {
	      if (!styleDeclaration.fontFamily) {
	        styleDeclaration.fontFamily = this.fontFamily;
	      }
	      if (!styleDeclaration.fontSize) {
	        styleDeclaration.fontSize = this.fontSize;
	      }
	      if (!styleDeclaration.fontWeight) {
	        styleDeclaration.fontWeight = this.fontWeight;
	      }
	      if (!styleDeclaration.fontStyle) {
	        styleDeclaration.fontStyle = this.fontStyle;
	      }
	    },

	    /**
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @param {Boolean} [returnCloneOrEmpty=false]
	     * @private
	     */
	    _getStyleDeclaration: function(lineIndex, charIndex, returnCloneOrEmpty) {
	      if (returnCloneOrEmpty) {
	        return (this.styles[lineIndex] && this.styles[lineIndex][charIndex])
	          ? clone(this.styles[lineIndex][charIndex])
	          : { };
	      }

	      return this.styles[lineIndex] && this.styles[lineIndex][charIndex] ? this.styles[lineIndex][charIndex] : null;
	    },

	    /**
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @param {Object} style
	     * @private
	     */
	    _setStyleDeclaration: function(lineIndex, charIndex, style) {
	      this.styles[lineIndex][charIndex] = style;
	    },

	    /**
	     *
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @private
	     */
	    _deleteStyleDeclaration: function(lineIndex, charIndex) {
	      delete this.styles[lineIndex][charIndex];
	    },

	    /**
	     * @param {Number} lineIndex
	     * @private
	     */
	    _getLineStyle: function(lineIndex) {
	      return this.styles[lineIndex];
	    },

	    /**
	     * @param {Number} lineIndex
	     * @param {Object} style
	     * @private
	     */
	    _setLineStyle: function(lineIndex, style) {
	      this.styles[lineIndex] = style;
	    },

	    /**
	     * @param {Number} lineIndex
	     * @private
	     */
	    _deleteLineStyle: function(lineIndex) {
	      delete this.styles[lineIndex];
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _getWidthOfChar: function(ctx, _char, lineIndex, charIndex) {
	      if (this.textAlign === 'justify' && this._reSpacesAndTabs.test(_char)) {
	        return this._getWidthOfSpace(ctx, lineIndex);
	      }

	      var styleDeclaration = this._getStyleDeclaration(lineIndex, charIndex, true);
	      this._applyFontStyles(styleDeclaration);
	      var cacheProp = this._getCacheProp(_char, styleDeclaration);

	      if (this._charWidthsCache[cacheProp] && this.caching) {
	        return this._charWidthsCache[cacheProp];
	      }
	      else if (ctx) {
	        ctx.save();
	        var width = this._applyCharStylesGetWidth(ctx, _char, lineIndex, charIndex);
	        ctx.restore();
	        return width;
	      }
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _getHeightOfChar: function(ctx, lineIndex, charIndex) {
	      var style = this._getStyleDeclaration(lineIndex, charIndex);
	      return style && style.fontSize ? style.fontSize : this.fontSize;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _getWidthOfCharsAt: function(ctx, lineIndex, charIndex) {
	      var width = 0, i, _char;
	      for (i = 0; i < charIndex; i++) {
	        _char = this._textLines[lineIndex][i];
	        width += this._getWidthOfChar(ctx, _char, lineIndex, i);
	      }
	      return width;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _getLineWidth: function(ctx, lineIndex) {
	      if (this.__lineWidths[lineIndex]) {
	        return this.__lineWidths[lineIndex];
	      }
	      this.__lineWidths[lineIndex] = this._getWidthOfCharsAt(ctx, lineIndex, this._textLines[lineIndex].length);
	      return this.__lineWidths[lineIndex];
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Number} lineIndex
	     */
	    _getWidthOfSpace: function (ctx, lineIndex) {
	      if (this.__widthOfSpace[lineIndex]) {
	        return this.__widthOfSpace[lineIndex];
	      }
	      var line = this._textLines[lineIndex],
	          wordsWidth = this._getWidthOfWords(ctx, line, lineIndex, 0),
	          widthDiff = this.width - wordsWidth,
	          numSpaces = line.length - line.replace(this._reSpacesAndTabs, '').length,
	          width = widthDiff / numSpaces;
	      this.__widthOfSpace[lineIndex] = width;
	      return width;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     * @param {Number} line
	     * @param {Number} lineIndex
	     */
	    _getWidthOfWords: function (ctx, line, lineIndex, charOffset) {
	      var width = 0;

	      for (var charIndex = 0; charIndex < line.length; charIndex++) {
	        var _char = line[charIndex];

	        if (!_char.match(/\s/)) {
	          width += this._getWidthOfChar(ctx, _char, lineIndex, charIndex + charOffset);
	        }
	      }

	      return width;
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _getHeightOfLine: function(ctx, lineIndex) {
	      if (this.__lineHeights[lineIndex]) {
	        return this.__lineHeights[lineIndex];
	      }

	      var line = this._textLines[lineIndex],
	          maxHeight = this._getHeightOfChar(ctx, lineIndex, 0);

	      for (var i = 1, len = line.length; i < len; i++) {
	        var currentCharHeight = this._getHeightOfChar(ctx, lineIndex, i);
	        if (currentCharHeight > maxHeight) {
	          maxHeight = currentCharHeight;
	        }
	      }
	      this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;
	      return this.__lineHeights[lineIndex];
	    },

	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} ctx Context to render on
	     */
	    _getTextHeight: function(ctx) {
	      var height = 0;
	      for (var i = 0, len = this._textLines.length; i < len; i++) {
	        height += this._getHeightOfLine(ctx, i);
	      }
	      return height;
	    },

	    /**
	     * Returns object representation of an instance
	     * @method toObject
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      var clonedStyles = { }, i, j, row;
	      for (i in this.styles) {
	        row = this.styles[i];
	        clonedStyles[i] = { };
	        for (j in row) {
	          clonedStyles[i][j] = clone(row[j]);
	        }
	      }
	      return fabric.util.object.extend(this.callSuper('toObject', propertiesToInclude), {
	        styles: clonedStyles
	      });
	    }
	  });

	  /**
	   * Returns fabric.IText instance from an object representation
	   * @static
	   * @memberOf fabric.IText
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.IText} instance of fabric.IText
	   */
	  fabric.IText.fromObject = function(object) {
	    return new fabric.IText(object.text, clone(object));
	  };
	})();


	(function() {

	  var clone = fabric.util.object.clone;

	  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {

	    /**
	     * Initializes all the interactive behavior of IText
	     */
	    initBehavior: function() {
	      this.initAddedHandler();
	      this.initRemovedHandler();
	      this.initCursorSelectionHandlers();
	      this.initDoubleClickSimulation();
	    },

	    /**
	     * Initializes "selected" event handler
	     */
	    initSelectedHandler: function() {
	      this.on('selected', function() {

	        var _this = this;
	        setTimeout(function() {
	          _this.selected = true;
	        }, 100);
	      });
	    },

	    /**
	     * Initializes "added" event handler
	     */
	    initAddedHandler: function() {
	      var _this = this;
	      this.on('added', function() {
	        if (this.canvas && !this.canvas._hasITextHandlers) {
	          this.canvas._hasITextHandlers = true;
	          this._initCanvasHandlers();
	        }

	        // Track IText instances per-canvas. Only register in this array once added
	        // to a canvas; we don't want to leak a reference to the instance forever
	        // simply because it existed at some point.
	        // (Might be added to a collection, but not on a canvas.)
	        if (_this.canvas) {
	          _this.canvas._iTextInstances = _this.canvas._iTextInstances || [];
	          _this.canvas._iTextInstances.push(_this);
	        }
	      });
	    },

	    initRemovedHandler: function() {
	      var _this = this;
	      this.on('removed', function() {
	        // (Might be removed from a collection, but not on a canvas.)
	        if (_this.canvas) {
	          _this.canvas._iTextInstances = _this.canvas._iTextInstances || [];
	          fabric.util.removeFromArray(_this.canvas._iTextInstances, _this);
	        }
	      });
	    },

	    /**
	     * @private
	     */
	    _initCanvasHandlers: function() {
	      var _this = this;

	      this.canvas.on('selection:cleared', function() {
	        fabric.IText.prototype.exitEditingOnOthers(_this.canvas);
	      });

	      this.canvas.on('mouse:up', function() {
	        if (_this.canvas._iTextInstances) {
	          _this.canvas._iTextInstances.forEach(function(obj) {
	            obj.__isMousedown = false;
	          });
	        }
	      });

	      this.canvas.on('object:selected', function() {
	        fabric.IText.prototype.exitEditingOnOthers(_this.canvas);
	      });
	    },

	    /**
	     * @private
	     */
	    _tick: function() {
	      this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');
	    },

	    /**
	     * @private
	     */
	    _animateCursor: function(obj, targetOpacity, duration, completeMethod) {

	      var tickState;

	      tickState = {
	        isAborted: false,
	        abort: function() {
	          this.isAborted = true;
	        },
	      };

	      obj.animate('_currentCursorOpacity', targetOpacity, {
	        duration: duration,
	        onComplete: function() {
	          if (!tickState.isAborted) {
	            obj[completeMethod]();
	          }
	        },
	        onChange: function() {
	          if (obj.canvas) {
	            obj.canvas.clearContext(obj.canvas.contextTop || obj.ctx);
	            obj.renderCursorOrSelection();
	          }
	        },
	        abort: function() {
	          return tickState.isAborted;
	        }
	      });
	      return tickState;
	    },

	    /**
	     * @private
	     */
	    _onTickComplete: function() {

	      var _this = this;

	      if (this._cursorTimeout1) {
	        clearTimeout(this._cursorTimeout1);
	      }
	      this._cursorTimeout1 = setTimeout(function() {
	        _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');
	      }, 100);
	    },

	    /**
	     * Initializes delayed cursor
	     */
	    initDelayedCursor: function(restart) {
	      var _this = this,
	          delay = restart ? 0 : this.cursorDelay;

	      this._currentTickState && this._currentTickState.abort();
	      this._currentTickCompleteState && this._currentTickCompleteState.abort();
	      clearTimeout(this._cursorTimeout1);
	      this._currentCursorOpacity = 1;
	      if (this.canvas) {
	        this.canvas.clearContext(this.canvas.contextTop || this.ctx);
	        this.renderCursorOrSelection();
	      }
	      if (this._cursorTimeout2) {
	        clearTimeout(this._cursorTimeout2);
	      }
	      this._cursorTimeout2 = setTimeout(function() {
	        _this._tick();
	      }, delay);
	    },

	    /**
	     * Aborts cursor animation and clears all timeouts
	     */
	    abortCursorAnimation: function() {
	      this._currentTickState && this._currentTickState.abort();
	      this._currentTickCompleteState && this._currentTickCompleteState.abort();

	      clearTimeout(this._cursorTimeout1);
	      clearTimeout(this._cursorTimeout2);

	      this._currentCursorOpacity = 0;
	      this.canvas && this.canvas.clearContext(this.canvas.contextTop || this.ctx);
	    },

	    /**
	     * Selects entire text
	     */
	    selectAll: function() {
	      this.setSelectionStart(0);
	      this.setSelectionEnd(this.text.length);
	    },

	    /**
	     * Returns selected text
	     * @return {String}
	     */
	    getSelectedText: function() {
	      return this.text.slice(this.selectionStart, this.selectionEnd);
	    },

	    /**
	     * Find new selection index representing start of current word according to current selection index
	     * @param {Number} startFrom Surrent selection index
	     * @return {Number} New selection index
	     */
	    findWordBoundaryLeft: function(startFrom) {
	      var offset = 0, index = startFrom - 1;

	      // remove space before cursor first
	      if (this._reSpace.test(this.text.charAt(index))) {
	        while (this._reSpace.test(this.text.charAt(index))) {
	          offset++;
	          index--;
	        }
	      }
	      while (/\S/.test(this.text.charAt(index)) && index > -1) {
	        offset++;
	        index--;
	      }

	      return startFrom - offset;
	    },

	    /**
	     * Find new selection index representing end of current word according to current selection index
	     * @param {Number} startFrom Current selection index
	     * @return {Number} New selection index
	     */
	    findWordBoundaryRight: function(startFrom) {
	      var offset = 0, index = startFrom;

	      // remove space after cursor first
	      if (this._reSpace.test(this.text.charAt(index))) {
	        while (this._reSpace.test(this.text.charAt(index))) {
	          offset++;
	          index++;
	        }
	      }
	      while (/\S/.test(this.text.charAt(index)) && index < this.text.length) {
	        offset++;
	        index++;
	      }

	      return startFrom + offset;
	    },

	    /**
	     * Find new selection index representing start of current line according to current selection index
	     * @param {Number} startFrom Current selection index
	     * @return {Number} New selection index
	     */
	    findLineBoundaryLeft: function(startFrom) {
	      var offset = 0, index = startFrom - 1;

	      while (!/\n/.test(this.text.charAt(index)) && index > -1) {
	        offset++;
	        index--;
	      }

	      return startFrom - offset;
	    },

	    /**
	     * Find new selection index representing end of current line according to current selection index
	     * @param {Number} startFrom Current selection index
	     * @return {Number} New selection index
	     */
	    findLineBoundaryRight: function(startFrom) {
	      var offset = 0, index = startFrom;

	      while (!/\n/.test(this.text.charAt(index)) && index < this.text.length) {
	        offset++;
	        index++;
	      }

	      return startFrom + offset;
	    },

	    /**
	     * Returns number of newlines in selected text
	     * @return {Number} Number of newlines in selected text
	     */
	    getNumNewLinesInSelectedText: function() {
	      var selectedText = this.getSelectedText(),
	          numNewLines  = 0;

	      for (var i = 0, len = selectedText.length; i < len; i++) {
	        if (selectedText[i] === '\n') {
	          numNewLines++;
	        }
	      }
	      return numNewLines;
	    },

	    /**
	     * Finds index corresponding to beginning or end of a word
	     * @param {Number} selectionStart Index of a character
	     * @param {Number} direction 1 or -1
	     * @return {Number} Index of the beginning or end of a word
	     */
	    searchWordBoundary: function(selectionStart, direction) {
	      var index     = this._reSpace.test(this.text.charAt(selectionStart)) ? selectionStart - 1 : selectionStart,
	          _char     = this.text.charAt(index),
	          reNonWord = /[ \n\.,;!\?\-]/;

	      while (!reNonWord.test(_char) && index > 0 && index < this.text.length) {
	        index += direction;
	        _char = this.text.charAt(index);
	      }
	      if (reNonWord.test(_char) && _char !== '\n') {
	        index += direction === 1 ? 0 : 1;
	      }
	      return index;
	    },

	    /**
	     * Selects a word based on the index
	     * @param {Number} selectionStart Index of a character
	     */
	    selectWord: function(selectionStart) {
	      var newSelectionStart = this.searchWordBoundary(selectionStart, -1), /* search backwards */
	          newSelectionEnd   = this.searchWordBoundary(selectionStart, 1);
	      /* search forward */

	      this.setSelectionStart(newSelectionStart);
	      this.setSelectionEnd(newSelectionEnd);
	    },

	    /**
	     * Selects a line based on the index
	     * @param {Number} selectionStart Index of a character
	     */
	    selectLine: function(selectionStart) {
	      var newSelectionStart = this.findLineBoundaryLeft(selectionStart),
	          newSelectionEnd   = this.findLineBoundaryRight(selectionStart);

	      this.setSelectionStart(newSelectionStart);
	      this.setSelectionEnd(newSelectionEnd);
	    },

	    /**
	     * Enters editing state
	     * @return {fabric.IText} thisArg
	     * @chainable
	     */
	    enterEditing: function(e) {
	      if (this.isEditing || !this.editable) {
	        return;
	      }

	      if (this.canvas) {
	        this.exitEditingOnOthers(this.canvas);
	      }

	      this.isEditing = true;

	      this.initHiddenTextarea(e);
	      this.hiddenTextarea.focus();
	      this._updateTextarea();
	      this._saveEditingProps();
	      this._setEditingProps();

	      this._tick();
	      this.fire('editing:entered');

	      if (!this.canvas) {
	        return this;
	      }

	      this.canvas.renderAll();
	      this.canvas.fire('text:editing:entered', { target: this });
	      this.initMouseMoveHandler();
	      return this;
	    },

	    exitEditingOnOthers: function(canvas) {
	      if (canvas._iTextInstances) {
	        canvas._iTextInstances.forEach(function(obj) {
	          obj.selected = false;
	          if (obj.isEditing) {
	            obj.exitEditing();
	          }
	        });
	      }
	    },

	    /**
	     * Initializes "mousemove" event handler
	     */
	    initMouseMoveHandler: function() {
	      var _this = this;
	      this.canvas.on('mouse:move', function(options) {
	        if (!_this.__isMousedown || !_this.isEditing) {
	          return;
	        }

	        var newSelectionStart = _this.getSelectionStartFromPointer(options.e);
	        if (newSelectionStart >= _this.__selectionStartOnMouseDown) {
	          _this.setSelectionStart(_this.__selectionStartOnMouseDown);
	          _this.setSelectionEnd(newSelectionStart);
	        }
	        else {
	          _this.setSelectionStart(newSelectionStart);
	          _this.setSelectionEnd(_this.__selectionStartOnMouseDown);
	        }
	      });
	    },

	    /**
	     * @private
	     */
	    _setEditingProps: function() {
	      this.hoverCursor = 'text';

	      if (this.canvas) {
	        this.canvas.defaultCursor = this.canvas.moveCursor = 'text';
	      }

	      this.borderColor = this.editingBorderColor;

	      this.hasControls = this.selectable = false;
	      this.lockMovementX = this.lockMovementY = true;
	    },

	    /**
	     * @private
	     */
	    _updateTextarea: function() {
	      if (!this.hiddenTextarea || this.inCompositionMode) {
	        return;
	      }

	      this.hiddenTextarea.value = this.text;
	      this.hiddenTextarea.selectionStart = this.selectionStart;
	      this.hiddenTextarea.selectionEnd = this.selectionEnd;
	      if (this.selectionStart === this.selectionEnd) {
	        var p = this._calcTextareaPosition();
	        this.hiddenTextarea.style.left = p.x + 'px';
	        this.hiddenTextarea.style.top = p.y + 'px';
	      }
	    },

	    /**
	     * @private
	     */
	    _calcTextareaPosition: function() {
	      var chars = this.text.split(''),
	          boundaries = this._getCursorBoundaries(chars, 'cursor'),
	          cursorLocation = this.get2DCursorLocation(),
	          lineIndex = cursorLocation.lineIndex,
	          charIndex = cursorLocation.charIndex,
	          charHeight = this.getCurrentCharFontSize(lineIndex, charIndex),
	          leftOffset = (lineIndex === 0 && charIndex === 0)
	                    ? this._getLineLeftOffset(this._getLineWidth(this.ctx, lineIndex))
	                    : boundaries.leftOffset,
	          m = this.calcTransformMatrix(),
	          p = { x: boundaries.left + leftOffset, y: boundaries.top + boundaries.topOffset + charHeight };
	      this.hiddenTextarea.style.fontSize = charHeight + 'px';
	      return fabric.util.transformPoint(p, m);
	    },

	    /**
	     * @private
	     */
	    _saveEditingProps: function() {
	      this._savedProps = {
	        hasControls: this.hasControls,
	        borderColor: this.borderColor,
	        lockMovementX: this.lockMovementX,
	        lockMovementY: this.lockMovementY,
	        hoverCursor: this.hoverCursor,
	        defaultCursor: this.canvas && this.canvas.defaultCursor,
	        moveCursor: this.canvas && this.canvas.moveCursor
	      };
	    },

	    /**
	     * @private
	     */
	    _restoreEditingProps: function() {
	      if (!this._savedProps) {
	        return;
	      }

	      this.hoverCursor = this._savedProps.overCursor;
	      this.hasControls = this._savedProps.hasControls;
	      this.borderColor = this._savedProps.borderColor;
	      this.lockMovementX = this._savedProps.lockMovementX;
	      this.lockMovementY = this._savedProps.lockMovementY;

	      if (this.canvas) {
	        this.canvas.defaultCursor = this._savedProps.defaultCursor;
	        this.canvas.moveCursor = this._savedProps.moveCursor;
	      }
	    },

	    /**
	     * Exits from editing state
	     * @return {fabric.IText} thisArg
	     * @chainable
	     */
	    exitEditing: function() {

	      this.selected = false;
	      this.isEditing = false;
	      this.selectable = true;

	      this.selectionEnd = this.selectionStart;
	      this.hiddenTextarea && this.canvas && this.hiddenTextarea.parentNode.removeChild(this.hiddenTextarea);
	      this.hiddenTextarea = null;

	      this.abortCursorAnimation();
	      this._restoreEditingProps();
	      this._currentCursorOpacity = 0;

	      this.fire('editing:exited');
	      this.canvas && this.canvas.fire('text:editing:exited', { target: this });

	      return this;
	    },

	    /**
	     * @private
	     */
	    _removeExtraneousStyles: function() {
	      for (var prop in this.styles) {
	        if (!this._textLines[prop]) {
	          delete this.styles[prop];
	        }
	      }
	    },

	    /**
	     * @private
	     */
	    _removeCharsFromTo: function(start, end) {
	      while (end !== start) {
	        this._removeSingleCharAndStyle(start + 1);
	        end--;
	      }
	      this.setSelectionStart(start);
	    },

	    _removeSingleCharAndStyle: function(index) {
	      var isBeginningOfLine = this.text[index - 1] === '\n',
	          indexStyle        = isBeginningOfLine ? index : index - 1;
	      this.removeStyleObject(isBeginningOfLine, indexStyle);
	      this.text = this.text.slice(0, index - 1) +
	        this.text.slice(index);

	      this._textLines = this._splitTextIntoLines();
	    },

	    /**
	     * Inserts characters where cursor is (replacing selection if one exists)
	     * @param {String} _chars Characters to insert
	     * @param {Boolean} useCopiedStyle use fabric.copiedTextStyle
	     */
	    insertChars: function(_chars, useCopiedStyle) {
	      var style;

	      if (this.selectionEnd - this.selectionStart > 1) {
	        this._removeCharsFromTo(this.selectionStart, this.selectionEnd);
	        this.setSelectionEnd(this.selectionStart);
	      }
	      //short circuit for block paste
	      if (!useCopiedStyle && this.isEmptyStyles()) {
	        this.insertChar(_chars, false);
	        return;
	      }
	      for (var i = 0, len = _chars.length; i < len; i++) {
	        if (useCopiedStyle) {
	          style = fabric.copiedTextStyle[i];
	        }
	        this.insertChar(_chars[i], i < len - 1, style);
	      }
	    },

	    /**
	     * Inserts a character where cursor is
	     * @param {String} _char Characters to insert
	     * @param {Boolean} skipUpdate trigger rendering and updates at the end of text insert
	     * @param {Object} styleObject Style to be inserted for the new char
	     */
	    insertChar: function(_char, skipUpdate, styleObject) {
	      var isEndOfLine = this.text[this.selectionStart] === '\n';
	      this.text = this.text.slice(0, this.selectionStart) +
	        _char + this.text.slice(this.selectionEnd);
	      this._textLines = this._splitTextIntoLines();
	      this.insertStyleObjects(_char, isEndOfLine, styleObject);
	      this.selectionStart += _char.length;
	      this.selectionEnd = this.selectionStart;
	      if (skipUpdate) {
	        return;
	      }
	      this._updateTextarea();
	      this.canvas && this.canvas.renderAll();
	      this.setCoords();
	      this.fire('changed');
	      this.canvas && this.canvas.fire('text:changed', { target: this });
	    },

	    /**
	     * Inserts new style object
	     * @param {Number} lineIndex Index of a line
	     * @param {Number} charIndex Index of a char
	     * @param {Boolean} isEndOfLine True if it's end of line
	     */
	    insertNewlineStyleObject: function(lineIndex, charIndex, isEndOfLine) {

	      this.shiftLineStyles(lineIndex, +1);

	      if (!this.styles[lineIndex + 1]) {
	        this.styles[lineIndex + 1] = {};
	      }

	      var currentCharStyle = {},
	          newLineStyles    = {};

	      if (this.styles[lineIndex] && this.styles[lineIndex][charIndex - 1]) {
	        currentCharStyle = this.styles[lineIndex][charIndex - 1];
	      }

	      // if there's nothing after cursor,
	      // we clone current char style onto the next (otherwise empty) line
	      if (isEndOfLine) {
	        newLineStyles[0] = clone(currentCharStyle);
	        this.styles[lineIndex + 1] = newLineStyles;
	      }
	      // otherwise we clone styles of all chars
	      // after cursor onto the next line, from the beginning
	      else {
	        for (var index in this.styles[lineIndex]) {
	          if (parseInt(index, 10) >= charIndex) {
	            newLineStyles[parseInt(index, 10) - charIndex] = this.styles[lineIndex][index];
	            // remove lines from the previous line since they're on a new line now
	            delete this.styles[lineIndex][index];
	          }
	        }
	        this.styles[lineIndex + 1] = newLineStyles;
	      }
	      this._forceClearCache = true;
	    },

	    /**
	     * Inserts style object for a given line/char index
	     * @param {Number} lineIndex Index of a line
	     * @param {Number} charIndex Index of a char
	     * @param {Object} [style] Style object to insert, if given
	     */
	    insertCharStyleObject: function(lineIndex, charIndex, style) {

	      var currentLineStyles       = this.styles[lineIndex],
	          currentLineStylesCloned = clone(currentLineStyles);

	      if (charIndex === 0 && !style) {
	        charIndex = 1;
	      }

	      // shift all char styles by 1 forward
	      // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4
	      for (var index in currentLineStylesCloned) {
	        var numericIndex = parseInt(index, 10);

	        if (numericIndex >= charIndex) {
	          currentLineStyles[numericIndex + 1] = currentLineStylesCloned[numericIndex];

	          // only delete the style if there was nothing moved there
	          if (!currentLineStylesCloned[numericIndex - 1]) {
	            delete currentLineStyles[numericIndex];
	          }
	        }
	      }

	      this.styles[lineIndex][charIndex] =
	        style || clone(currentLineStyles[charIndex - 1]);
	      this._forceClearCache = true;
	    },

	    /**
	     * Inserts style object(s)
	     * @param {String} _chars Characters at the location where style is inserted
	     * @param {Boolean} isEndOfLine True if it's end of line
	     * @param {Object} [styleObject] Style to insert
	     */
	    insertStyleObjects: function(_chars, isEndOfLine, styleObject) {
	      // removed shortcircuit over isEmptyStyles

	      var cursorLocation = this.get2DCursorLocation(),
	          lineIndex      = cursorLocation.lineIndex,
	          charIndex      = cursorLocation.charIndex;

	      if (!this._getLineStyle(lineIndex)) {
	        this._setLineStyle(lineIndex, {});
	      }

	      if (_chars === '\n') {
	        this.insertNewlineStyleObject(lineIndex, charIndex, isEndOfLine);
	      }
	      else {
	        this.insertCharStyleObject(lineIndex, charIndex, styleObject);
	      }
	    },

	    /**
	     * Shifts line styles up or down
	     * @param {Number} lineIndex Index of a line
	     * @param {Number} offset Can be -1 or +1
	     */
	    shiftLineStyles: function(lineIndex, offset) {
	      // shift all line styles by 1 upward
	      var clonedStyles = clone(this.styles);
	      for (var line in this.styles) {
	        var numericLine = parseInt(line, 10);
	        if (numericLine > lineIndex) {
	          this.styles[numericLine + offset] = clonedStyles[numericLine];
	          if (!clonedStyles[numericLine - offset]) {
	            delete this.styles[numericLine];
	          }
	        }
	      }
	      //TODO: evaluate if delete old style lines with offset -1
	    },

	    /**
	     * Removes style object
	     * @param {Boolean} isBeginningOfLine True if cursor is at the beginning of line
	     * @param {Number} [index] Optional index. When not given, current selectionStart is used.
	     */
	    removeStyleObject: function(isBeginningOfLine, index) {

	      var cursorLocation = this.get2DCursorLocation(index),
	          lineIndex      = cursorLocation.lineIndex,
	          charIndex      = cursorLocation.charIndex;

	      this._removeStyleObject(isBeginningOfLine, cursorLocation, lineIndex, charIndex);
	    },

	    _getTextOnPreviousLine: function(lIndex) {
	      return this._textLines[lIndex - 1];
	    },

	    _removeStyleObject: function(isBeginningOfLine, cursorLocation, lineIndex, charIndex) {

	      if (isBeginningOfLine) {
	        var textOnPreviousLine     = this._getTextOnPreviousLine(cursorLocation.lineIndex),
	            newCharIndexOnPrevLine = textOnPreviousLine ? textOnPreviousLine.length : 0;

	        if (!this.styles[lineIndex - 1]) {
	          this.styles[lineIndex - 1] = {};
	        }
	        for (charIndex in this.styles[lineIndex]) {
	          this.styles[lineIndex - 1][parseInt(charIndex, 10) + newCharIndexOnPrevLine]
	            = this.styles[lineIndex][charIndex];
	        }
	        this.shiftLineStyles(cursorLocation.lineIndex, -1);
	      }
	      else {
	        var currentLineStyles = this.styles[lineIndex];

	        if (currentLineStyles) {
	          delete currentLineStyles[charIndex];
	        }
	        var currentLineStylesCloned = clone(currentLineStyles);
	        // shift all styles by 1 backwards
	        for (var i in currentLineStylesCloned) {
	          var numericIndex = parseInt(i, 10);
	          if (numericIndex >= charIndex && numericIndex !== 0) {
	            currentLineStyles[numericIndex - 1] = currentLineStylesCloned[numericIndex];
	            delete currentLineStyles[numericIndex];
	          }
	        }
	      }
	    },

	    /**
	     * Inserts new line
	     */
	    insertNewline: function() {
	      this.insertChars('\n');
	    }
	  });
	})();


	fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {
	  /**
	   * Initializes "dbclick" event handler
	   */
	  initDoubleClickSimulation: function() {

	    // for double click
	    this.__lastClickTime = +new Date();

	    // for triple click
	    this.__lastLastClickTime = +new Date();

	    this.__lastPointer = { };

	    this.on('mousedown', this.onMouseDown.bind(this));
	  },

	  onMouseDown: function(options) {

	    this.__newClickTime = +new Date();
	    var newPointer = this.canvas.getPointer(options.e);

	    if (this.isTripleClick(newPointer)) {
	      this.fire('tripleclick', options);
	      this._stopEvent(options.e);
	    }
	    else if (this.isDoubleClick(newPointer)) {
	      this.fire('dblclick', options);
	      this._stopEvent(options.e);
	    }

	    this.__lastLastClickTime = this.__lastClickTime;
	    this.__lastClickTime = this.__newClickTime;
	    this.__lastPointer = newPointer;
	    this.__lastIsEditing = this.isEditing;
	    this.__lastSelected = this.selected;
	  },

	  isDoubleClick: function(newPointer) {
	    return this.__newClickTime - this.__lastClickTime < 500 &&
	        this.__lastPointer.x === newPointer.x &&
	        this.__lastPointer.y === newPointer.y && this.__lastIsEditing;
	  },

	  isTripleClick: function(newPointer) {
	    return this.__newClickTime - this.__lastClickTime < 500 &&
	        this.__lastClickTime - this.__lastLastClickTime < 500 &&
	        this.__lastPointer.x === newPointer.x &&
	        this.__lastPointer.y === newPointer.y;
	  },

	  /**
	   * @private
	   */
	  _stopEvent: function(e) {
	    e.preventDefault && e.preventDefault();
	    e.stopPropagation && e.stopPropagation();
	  },

	  /**
	   * Initializes event handlers related to cursor or selection
	   */
	  initCursorSelectionHandlers: function() {
	    this.initSelectedHandler();
	    this.initMousedownHandler();
	    this.initMouseupHandler();
	    this.initClicks();
	  },

	  /**
	   * Initializes double and triple click event handlers
	   */
	  initClicks: function() {
	    this.on('dblclick', function(options) {
	      this.selectWord(this.getSelectionStartFromPointer(options.e));
	    });
	    this.on('tripleclick', function(options) {
	      this.selectLine(this.getSelectionStartFromPointer(options.e));
	    });
	  },

	  /**
	   * Initializes "mousedown" event handler
	   */
	  initMousedownHandler: function() {
	    this.on('mousedown', function(options) {
	      if (!this.editable) {
	        return;
	      }
	      var pointer = this.canvas.getPointer(options.e);

	      this.__mousedownX = pointer.x;
	      this.__mousedownY = pointer.y;
	      this.__isMousedown = true;

	      if (this.hiddenTextarea && this.canvas) {
	        this.canvas.wrapperEl.appendChild(this.hiddenTextarea);
	      }

	      if (this.selected) {
	        this.setCursorByClick(options.e);
	      }

	      if (this.isEditing) {
	        this.__selectionStartOnMouseDown = this.selectionStart;
	        this.initDelayedCursor(true);
	      }
	    });
	  },

	  /**
	   * @private
	   */
	  _isObjectMoved: function(e) {
	    var pointer = this.canvas.getPointer(e);

	    return this.__mousedownX !== pointer.x ||
	           this.__mousedownY !== pointer.y;
	  },

	  /**
	   * Initializes "mouseup" event handler
	   */
	  initMouseupHandler: function() {
	    this.on('mouseup', function(options) {
	      this.__isMousedown = false;
	      if (!this.editable || this._isObjectMoved(options.e)) {
	        return;
	      }

	      if (this.__lastSelected && !this.__corner) {
	        this.enterEditing(options.e);
	        this.initDelayedCursor(true);
	      }
	      this.selected = true;
	    });
	  },

	  /**
	   * Changes cursor location in a text depending on passed pointer (x/y) object
	   * @param {Event} e Event object
	   */
	  setCursorByClick: function(e) {
	    var newSelectionStart = this.getSelectionStartFromPointer(e);

	    if (e.shiftKey) {
	      if (newSelectionStart < this.selectionStart) {
	        this.setSelectionEnd(this.selectionStart);
	        this.setSelectionStart(newSelectionStart);
	      }
	      else {
	        this.setSelectionEnd(newSelectionStart);
	      }
	    }
	    else {
	      this.setSelectionStart(newSelectionStart);
	      this.setSelectionEnd(newSelectionStart);
	    }
	  },

	  /**
	   * Returns index of a character corresponding to where an object was clicked
	   * @param {Event} e Event object
	   * @return {Number} Index of a character
	   */
	  getSelectionStartFromPointer: function(e) {
	    var mouseOffset = this.getLocalPointer(e),
	        prevWidth = 0,
	        width = 0,
	        height = 0,
	        charIndex = 0,
	        newSelectionStart,
	        line;

	    for (var i = 0, len = this._textLines.length; i < len; i++) {
	      line = this._textLines[i];
	      height += this._getHeightOfLine(this.ctx, i) * this.scaleY;

	      var widthOfLine = this._getLineWidth(this.ctx, i),
	          lineLeftOffset = this._getLineLeftOffset(widthOfLine);

	      width = lineLeftOffset * this.scaleX;

	      for (var j = 0, jlen = line.length; j < jlen; j++) {

	        prevWidth = width;

	        width += this._getWidthOfChar(this.ctx, line[j], i, this.flipX ? jlen - j : j) *
	                 this.scaleX;

	        if (height <= mouseOffset.y || width <= mouseOffset.x) {
	          charIndex++;
	          continue;
	        }

	        return this._getNewSelectionStartFromOffset(
	          mouseOffset, prevWidth, width, charIndex + i, jlen);
	      }

	      if (mouseOffset.y < height) {
	        //this happens just on end of lines.
	        return this._getNewSelectionStartFromOffset(
	          mouseOffset, prevWidth, width, charIndex + i - 1, jlen);
	      }
	    }

	    // clicked somewhere after all chars, so set at the end
	    if (typeof newSelectionStart === 'undefined') {
	      return this.text.length;
	    }
	  },

	  /**
	   * @private
	   */
	  _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {

	    var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,
	        distanceBtwNextCharAndCursor = width - mouseOffset.x,
	        offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor ? 0 : 1,
	        newSelectionStart = index + offset;

	    // if object is horizontally flipped, mirror cursor location from the end
	    if (this.flipX) {
	      newSelectionStart = jlen - newSelectionStart;
	    }

	    if (newSelectionStart > this.text.length) {
	      newSelectionStart = this.text.length;
	    }

	    return newSelectionStart;
	  }
	});


	fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {

	  /**
	   * Initializes hidden textarea (needed to bring up keyboard in iOS)
	   */
	  initHiddenTextarea: function(e) {
	    var p;
	    if (e && this.canvas) {
	      p = this.canvas.getPointer(e);
	    }
	    else {
	      this.oCoords || this.setCoords();
	      p = this.oCoords.tl;
	    }
	    this.hiddenTextarea = fabric.document.createElement('textarea');

	    this.hiddenTextarea.setAttribute('autocapitalize', 'off');
	    this.hiddenTextarea.style.cssText = 'position: absolute; top: ' + p.y + 'px; left: ' + p.x + 'px; opacity: 0;'
	                                        + ' width: 0px; height: 0px; z-index: -999;';
	    if (this.canvas) {
	      this.canvas.lowerCanvasEl.parentNode.appendChild(this.hiddenTextarea);
	    }
	    else {
	      fabric.document.body.appendChild(this.hiddenTextarea);
	    }

	    fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'keyup', this.onKeyUp.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'cut', this.cut.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'compositionstart', this.onCompositionStart.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'compositionupdate', this.onCompositionUpdate.bind(this));
	    fabric.util.addListener(this.hiddenTextarea, 'compositionend', this.onCompositionEnd.bind(this));

	    if (!this._clickHandlerInitialized && this.canvas) {
	      fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));
	      this._clickHandlerInitialized = true;
	    }
	  },

	  /**
	   * @private
	   */
	  _keysMap: {
	    8:  'removeChars',
	    9:  'exitEditing',
	    27: 'exitEditing',
	    13: 'insertNewline',
	    33: 'moveCursorUp',
	    34: 'moveCursorDown',
	    35: 'moveCursorRight',
	    36: 'moveCursorLeft',
	    37: 'moveCursorLeft',
	    38: 'moveCursorUp',
	    39: 'moveCursorRight',
	    40: 'moveCursorDown',
	    46: 'forwardDelete'
	  },

	  /**
	   * @private
	   */
	  _ctrlKeysMap: {
	    65: 'selectAll',
	    67: 'copy',
	    88: 'cut'
	  },

	  onClick: function() {
	    // No need to trigger click event here, focus is enough to have the keyboard appear on Android
	    this.hiddenTextarea && this.hiddenTextarea.focus();
	  },

	  /**
	   * Handles keyup event
	   * @param {Event} e Event object
	   */
	  onKeyDown: function(e) {
	    if (!this.isEditing) {
	      return;
	    }
	    if (e.keyCode in this._keysMap) {
	      this[this._keysMap[e.keyCode]](e);
	    }
	    else {
	      return;
	    }
	    e.stopImmediatePropagation();
	    e.preventDefault();
	    this.canvas && this.canvas.renderAll();
	  },

	  /**
	   * Handles keyup event
	   * if a copy/cut event fired, keyup is dismissed
	   * @param {Event} e Event object
	   */
	  onKeyUp: function(e) {
	    if (!this.isEditing || this._copyDone) {
	      this._copyDone = false;
	      return;
	    }
	    if ((e.keyCode in this._ctrlKeysMap) && (e.ctrlKey || e.metaKey)) {
	      this[this._ctrlKeysMap[e.keyCode]](e);
	    }
	    else {
	      return;
	    }
	    e.stopImmediatePropagation();
	    e.preventDefault();
	    this.canvas && this.canvas.renderAll();
	  },

	  /**
	   * Handles onInput event
	   * @param {Event} e Event object
	   */
	  onInput: function(e) {
	    if (!this.isEditing || this.inCompositionMode) {
	      return;
	    }
	    var offset = this.selectionStart || 0,
	        offsetEnd = this.selectionEnd || 0,
	        textLength = this.text.length,
	        newTextLength = this.hiddenTextarea.value.length,
	        diff, charsToInsert, start;
	    if (newTextLength > textLength) {
	      //we added some character
	      start = this._selectionDirection === 'left' ? offsetEnd : offset;
	      diff = newTextLength - textLength;
	      charsToInsert = this.hiddenTextarea.value.slice(start, start + diff);
	    }
	    else {
	      //we selected a portion of text and then input something else.
	      //Internet explorer does not trigger this else
	      diff = newTextLength - textLength + offsetEnd - offset;
	      charsToInsert = this.hiddenTextarea.value.slice(offset, offset + diff);
	    }
	    this.insertChars(charsToInsert);
	    e.stopPropagation();
	  },

	  /**
	   * Composition start
	   */
	  onCompositionStart: function() {
	    this.inCompositionMode = true;
	    this.prevCompositionLength = 0;
	    this.compositionStart = this.selectionStart;
	  },

	  /**
	   * Composition end
	   */
	  onCompositionEnd: function() {
	    this.inCompositionMode = false;
	  },

	  /**
	   * Composition update
	   */
	  onCompositionUpdate: function(e) {
	    var data = e.data;
	    this.selectionStart = this.compositionStart;
	    this.selectionEnd = this.selectionEnd === this.selectionStart ?
	      this.compositionStart + this.prevCompositionLength : this.selectionEnd;
	    this.insertChars(data, false);
	    this.prevCompositionLength = data.length;
	  },

	  /**
	   * Forward delete
	   */
	  forwardDelete: function(e) {
	    if (this.selectionStart === this.selectionEnd) {
	      if (this.selectionStart === this.text.length) {
	        return;
	      }
	      this.moveCursorRight(e);
	    }
	    this.removeChars(e);
	  },

	  /**
	   * Copies selected text
	   * @param {Event} e Event object
	   */
	  copy: function(e) {
	    if (this.selectionStart === this.selectionEnd) {
	      //do not cut-copy if no selection
	      return;
	    }
	    var selectedText = this.getSelectedText(),
	        clipboardData = this._getClipboardData(e);

	    // Check for backward compatibility with old browsers
	    if (clipboardData) {
	      clipboardData.setData('text', selectedText);
	    }

	    fabric.copiedText = selectedText;
	    fabric.copiedTextStyle = this.getSelectionStyles(
	                          this.selectionStart,
	                          this.selectionEnd);
	    e.stopImmediatePropagation();
	    e.preventDefault();
	    this._copyDone = true;
	  },

	  /**
	   * Pastes text
	   * @param {Event} e Event object
	   */
	  paste: function(e) {
	    var copiedText = null,
	        clipboardData = this._getClipboardData(e),
	        useCopiedStyle = true;

	    // Check for backward compatibility with old browsers
	    if (clipboardData) {
	      copiedText = clipboardData.getData('text').replace(/\r/g, '');
	      if (!fabric.copiedTextStyle || fabric.copiedText !== copiedText) {
	        useCopiedStyle = false;
	      }
	    }
	    else {
	      copiedText = fabric.copiedText;
	    }

	    if (copiedText) {
	      this.insertChars(copiedText, useCopiedStyle);
	    }
	    e.stopImmediatePropagation();
	    e.preventDefault();
	  },

	  /**
	   * Cuts text
	   * @param {Event} e Event object
	   */
	  cut: function(e) {
	    if (this.selectionStart === this.selectionEnd) {
	      return;
	    }

	    this.copy(e);
	    this.removeChars(e);
	  },

	  /**
	   * @private
	   * @param {Event} e Event object
	   * @return {Object} Clipboard data object
	   */
	  _getClipboardData: function(e) {
	    return (e && e.clipboardData) || fabric.window.clipboardData;
	  },

	  /**
	   * Gets start offset of a selection
	   * @param {Event} e Event object
	   * @param {Boolean} isRight
	   * @return {Number}
	   */
	  getDownCursorOffset: function(e, isRight) {
	    var selectionProp = isRight ? this.selectionEnd : this.selectionStart,
	        cursorLocation = this.get2DCursorLocation(selectionProp),
	        _char, lineLeftOffset, lineIndex = cursorLocation.lineIndex,
	        textOnSameLineBeforeCursor = this._textLines[lineIndex].slice(0, cursorLocation.charIndex),
	        textOnSameLineAfterCursor = this._textLines[lineIndex].slice(cursorLocation.charIndex),
	        textOnNextLine = this._textLines[lineIndex + 1] || '';

	    // if on last line, down cursor goes to end of line
	    if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {

	      // move to the end of a text
	      return this.text.length - selectionProp;
	    }

	    var widthOfSameLineBeforeCursor = this._getLineWidth(this.ctx, lineIndex);
	    lineLeftOffset = this._getLineLeftOffset(widthOfSameLineBeforeCursor);

	    var widthOfCharsOnSameLineBeforeCursor = lineLeftOffset;

	    for (var i = 0, len = textOnSameLineBeforeCursor.length; i < len; i++) {
	      _char = textOnSameLineBeforeCursor[i];
	      widthOfCharsOnSameLineBeforeCursor += this._getWidthOfChar(this.ctx, _char, lineIndex, i);
	    }

	    var indexOnNextLine = this._getIndexOnNextLine(
	      cursorLocation, textOnNextLine, widthOfCharsOnSameLineBeforeCursor);

	    return textOnSameLineAfterCursor.length + 1 + indexOnNextLine;
	  },

	  /**
	   * @private
	   */
	  _getIndexOnNextLine: function(cursorLocation, textOnNextLine, widthOfCharsOnSameLineBeforeCursor) {
	    var lineIndex = cursorLocation.lineIndex + 1,
	        widthOfNextLine = this._getLineWidth(this.ctx, lineIndex),
	        lineLeftOffset = this._getLineLeftOffset(widthOfNextLine),
	        widthOfCharsOnNextLine = lineLeftOffset,
	        indexOnNextLine = 0,
	        foundMatch;

	    for (var j = 0, jlen = textOnNextLine.length; j < jlen; j++) {

	      var _char = textOnNextLine[j],
	          widthOfChar = this._getWidthOfChar(this.ctx, _char, lineIndex, j);

	      widthOfCharsOnNextLine += widthOfChar;

	      if (widthOfCharsOnNextLine > widthOfCharsOnSameLineBeforeCursor) {

	        foundMatch = true;

	        var leftEdge = widthOfCharsOnNextLine - widthOfChar,
	            rightEdge = widthOfCharsOnNextLine,
	            offsetFromLeftEdge = Math.abs(leftEdge - widthOfCharsOnSameLineBeforeCursor),
	            offsetFromRightEdge = Math.abs(rightEdge - widthOfCharsOnSameLineBeforeCursor);

	        indexOnNextLine = offsetFromRightEdge < offsetFromLeftEdge ? j + 1 : j;

	        break;
	      }
	    }

	    // reached end
	    if (!foundMatch) {
	      indexOnNextLine = textOnNextLine.length;
	    }

	    return indexOnNextLine;
	  },

	  /**
	   * Moves cursor down
	   * @param {Event} e Event object
	   */
	  moveCursorDown: function(e) {
	    this.abortCursorAnimation();
	    this._currentCursorOpacity = 1;

	    var offset = this.getDownCursorOffset(e, this._selectionDirection === 'right');

	    if (e.shiftKey) {
	      this.moveCursorDownWithShift(offset);
	    }
	    else {
	      this.moveCursorDownWithoutShift(offset);
	    }

	    this.initDelayedCursor();
	  },

	  /**
	   * Moves cursor down without keeping selection
	   * @param {Number} offset
	   */
	  moveCursorDownWithoutShift: function(offset) {
	    this._selectionDirection = 'right';
	    this.setSelectionStart(this.selectionStart + offset);
	    this.setSelectionEnd(this.selectionStart);
	  },

	  /**
	   * private
	   */
	  swapSelectionPoints: function() {
	    var swapSel = this.selectionEnd;
	    this.setSelectionEnd(this.selectionStart);
	    this.setSelectionStart(swapSel);
	  },

	  /**
	   * Moves cursor down while keeping selection
	   * @param {Number} offset
	   */
	  moveCursorDownWithShift: function(offset) {
	    if (this.selectionEnd === this.selectionStart) {
	      this._selectionDirection = 'right';
	    }
	    if (this._selectionDirection === 'right') {
	      this.setSelectionEnd(this.selectionEnd + offset);
	    }
	    else {
	      this.setSelectionStart(this.selectionStart + offset);
	    }
	    if (this.selectionEnd < this.selectionStart  && this._selectionDirection === 'left') {
	      this.swapSelectionPoints();
	      this._selectionDirection = 'right';
	    }
	    if (this.selectionEnd > this.text.length) {
	      this.setSelectionEnd(this.text.length);
	    }
	  },

	  /**
	   * @param {Event} e Event object
	   * @param {Boolean} isRight
	   * @return {Number}
	   */
	  getUpCursorOffset: function(e, isRight) {
	    var selectionProp = isRight ? this.selectionEnd : this.selectionStart,
	        cursorLocation = this.get2DCursorLocation(selectionProp),
	        lineIndex = cursorLocation.lineIndex;
	    // if on first line, up cursor goes to start of line
	    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {
	      return selectionProp;
	    }

	    var textOnSameLineBeforeCursor = this._textLines[lineIndex].slice(0, cursorLocation.charIndex),
	        textOnPreviousLine = this._textLines[lineIndex - 1] || '',
	        _char,
	        widthOfSameLineBeforeCursor = this._getLineWidth(this.ctx, cursorLocation.lineIndex),
	        lineLeftOffset = this._getLineLeftOffset(widthOfSameLineBeforeCursor),
	        widthOfCharsOnSameLineBeforeCursor = lineLeftOffset;

	    for (var i = 0, len = textOnSameLineBeforeCursor.length; i < len; i++) {
	      _char = textOnSameLineBeforeCursor[i];
	      widthOfCharsOnSameLineBeforeCursor += this._getWidthOfChar(this.ctx, _char, lineIndex, i);
	    }

	    var indexOnPrevLine = this._getIndexOnPrevLine(
	      cursorLocation, textOnPreviousLine, widthOfCharsOnSameLineBeforeCursor);

	    return textOnPreviousLine.length - indexOnPrevLine + textOnSameLineBeforeCursor.length;
	  },

	  /**
	   * @private
	   */
	  _getIndexOnPrevLine: function(cursorLocation, textOnPreviousLine, widthOfCharsOnSameLineBeforeCursor) {

	    var lineIndex = cursorLocation.lineIndex - 1,
	        widthOfPreviousLine = this._getLineWidth(this.ctx, lineIndex),
	        lineLeftOffset = this._getLineLeftOffset(widthOfPreviousLine),
	        widthOfCharsOnPreviousLine = lineLeftOffset,
	        indexOnPrevLine = 0,
	        foundMatch;

	    for (var j = 0, jlen = textOnPreviousLine.length; j < jlen; j++) {

	      var _char = textOnPreviousLine[j],
	          widthOfChar = this._getWidthOfChar(this.ctx, _char, lineIndex, j);

	      widthOfCharsOnPreviousLine += widthOfChar;

	      if (widthOfCharsOnPreviousLine > widthOfCharsOnSameLineBeforeCursor) {

	        foundMatch = true;

	        var leftEdge = widthOfCharsOnPreviousLine - widthOfChar,
	            rightEdge = widthOfCharsOnPreviousLine,
	            offsetFromLeftEdge = Math.abs(leftEdge - widthOfCharsOnSameLineBeforeCursor),
	            offsetFromRightEdge = Math.abs(rightEdge - widthOfCharsOnSameLineBeforeCursor);

	        indexOnPrevLine = offsetFromRightEdge < offsetFromLeftEdge ? j : (j - 1);

	        break;
	      }
	    }

	    // reached end
	    if (!foundMatch) {
	      indexOnPrevLine = textOnPreviousLine.length - 1;
	    }

	    return indexOnPrevLine;
	  },

	  /**
	   * Moves cursor up
	   * @param {Event} e Event object
	   */
	  moveCursorUp: function(e) {

	    this.abortCursorAnimation();
	    this._currentCursorOpacity = 1;

	    var offset = this.getUpCursorOffset(e, this._selectionDirection === 'right');
	    if (e.shiftKey) {
	      this.moveCursorUpWithShift(offset);
	    }
	    else {
	      this.moveCursorUpWithoutShift(offset);
	    }

	    this.initDelayedCursor();
	  },

	  /**
	   * Moves cursor up with shift
	   * @param {Number} offset
	   */
	  moveCursorUpWithShift: function(offset) {
	    if (this.selectionEnd === this.selectionStart) {
	      this._selectionDirection = 'left';
	    }
	    if (this._selectionDirection === 'right') {
	      this.setSelectionEnd(this.selectionEnd - offset);
	    }
	    else {
	      this.setSelectionStart(this.selectionStart - offset);
	    }
	    if (this.selectionEnd < this.selectionStart && this._selectionDirection === 'right') {
	      this.swapSelectionPoints();
	      this._selectionDirection = 'left';
	    }
	  },

	  /**
	   * Moves cursor up without shift
	   * @param {Number} offset
	   */
	  moveCursorUpWithoutShift: function(offset) {
	    if (this.selectionStart === this.selectionEnd) {
	      this.setSelectionStart(this.selectionStart - offset);
	    }
	    this.setSelectionEnd(this.selectionStart);

	    this._selectionDirection = 'left';
	  },

	  /**
	   * Moves cursor left
	   * @param {Event} e Event object
	   */
	  moveCursorLeft: function(e) {
	    if (this.selectionStart === 0 && this.selectionEnd === 0) {
	      return;
	    }

	    this.abortCursorAnimation();
	    this._currentCursorOpacity = 1;

	    if (e.shiftKey) {
	      this.moveCursorLeftWithShift(e);
	    }
	    else {
	      this.moveCursorLeftWithoutShift(e);
	    }

	    this.initDelayedCursor();
	  },

	  /**
	   * @private
	   */
	  _move: function(e, prop, direction) {
	    var propMethod = (prop === 'selectionStart' ? 'setSelectionStart' : 'setSelectionEnd');
	    if (e.altKey) {
	      this[propMethod](this['findWordBoundary' + direction](this[prop]));
	    }
	    else if (e.metaKey || e.keyCode === 35 ||  e.keyCode === 36 ) {
	      this[propMethod](this['findLineBoundary' + direction](this[prop]));
	    }
	    else {
	      this[propMethod](this[prop] + (direction === 'Left' ? -1 : 1));
	    }
	  },

	  /**
	   * @private
	   */
	  _moveLeft: function(e, prop) {
	    this._move(e, prop, 'Left');
	  },

	  /**
	   * @private
	   */
	  _moveRight: function(e, prop) {
	    this._move(e, prop, 'Right');
	  },

	  /**
	   * Moves cursor left without keeping selection
	   * @param {Event} e
	   */
	  moveCursorLeftWithoutShift: function(e) {
	    this._selectionDirection = 'left';

	    // only move cursor when there is no selection,
	    // otherwise we discard it, and leave cursor on same place
	    if (this.selectionEnd === this.selectionStart) {
	      this._moveLeft(e, 'selectionStart');
	    }
	    this.setSelectionEnd(this.selectionStart);
	  },

	  /**
	   * Moves cursor left while keeping selection
	   * @param {Event} e
	   */
	  moveCursorLeftWithShift: function(e) {
	    if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {
	      this._moveLeft(e, 'selectionEnd');
	    }
	    else {
	      this._selectionDirection = 'left';
	      this._moveLeft(e, 'selectionStart');
	    }
	  },

	  /**
	   * Moves cursor right
	   * @param {Event} e Event object
	   */
	  moveCursorRight: function(e) {
	    if (this.selectionStart >= this.text.length && this.selectionEnd >= this.text.length) {
	      return;
	    }

	    this.abortCursorAnimation();
	    this._currentCursorOpacity = 1;

	    if (e.shiftKey) {
	      this.moveCursorRightWithShift(e);
	    }
	    else {
	      this.moveCursorRightWithoutShift(e);
	    }

	    this.initDelayedCursor();
	  },

	  /**
	   * Moves cursor right while keeping selection
	   * @param {Event} e
	   */
	  moveCursorRightWithShift: function(e) {
	    if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {
	      this._moveRight(e, 'selectionStart');
	    }
	    else {
	      this._selectionDirection = 'right';
	      this._moveRight(e, 'selectionEnd');
	    }
	  },

	  /**
	   * Moves cursor right without keeping selection
	   * @param {Event} e Event object
	   */
	  moveCursorRightWithoutShift: function(e) {
	    this._selectionDirection = 'right';

	    if (this.selectionStart === this.selectionEnd) {
	      this._moveRight(e, 'selectionStart');
	      this.setSelectionEnd(this.selectionStart);
	    }
	    else {
	      this.setSelectionEnd(this.selectionEnd + this.getNumNewLinesInSelectedText());
	      this.setSelectionStart(this.selectionEnd);
	    }
	  },

	  /**
	   * Removes characters selected by selection
	   * @param {Event} e Event object
	   */
	  removeChars: function(e) {
	    if (this.selectionStart === this.selectionEnd) {
	      this._removeCharsNearCursor(e);
	    }
	    else {
	      this._removeCharsFromTo(this.selectionStart, this.selectionEnd);
	    }

	    this.setSelectionEnd(this.selectionStart);

	    this._removeExtraneousStyles();

	    this.canvas && this.canvas.renderAll();

	    this.setCoords();
	    this.fire('changed');
	    this.canvas && this.canvas.fire('text:changed', { target: this });
	  },

	  /**
	   * @private
	   * @param {Event} e Event object
	   */
	  _removeCharsNearCursor: function(e) {
	    if (this.selectionStart === 0) {
	      return;
	    }
	    if (e.metaKey) {
	      // remove all till the start of current line
	      var leftLineBoundary = this.findLineBoundaryLeft(this.selectionStart);

	      this._removeCharsFromTo(leftLineBoundary, this.selectionStart);
	      this.setSelectionStart(leftLineBoundary);
	    }
	    else if (e.altKey) {
	      // remove all till the start of current word
	      var leftWordBoundary = this.findWordBoundaryLeft(this.selectionStart);

	      this._removeCharsFromTo(leftWordBoundary, this.selectionStart);
	      this.setSelectionStart(leftWordBoundary);
	    }
	    else {
	      this._removeSingleCharAndStyle(this.selectionStart);
	      this.setSelectionStart(this.selectionStart - 1);
	    }
	  }
	});


	/* _TO_SVG_START_ */
	(function() {
	  var toFixed = fabric.util.toFixed,
	      NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;

	  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */ {

	    /**
	     * @private
	     */
	    _setSVGTextLineText: function(lineIndex, textSpans, height, textLeftOffset, textTopOffset, textBgRects) {
	      if (!this._getLineStyle(lineIndex)) {
	        fabric.Text.prototype._setSVGTextLineText.call(this,
	          lineIndex, textSpans, height, textLeftOffset, textTopOffset);
	      }
	      else {
	        this._setSVGTextLineChars(
	          lineIndex, textSpans, height, textLeftOffset, textBgRects);
	      }
	    },

	    /**
	     * @private
	     */
	    _setSVGTextLineChars: function(lineIndex, textSpans, height, textLeftOffset, textBgRects) {

	      var chars = this._textLines[lineIndex],
	          charOffset = 0,
	          lineLeftOffset = this._getLineLeftOffset(this._getLineWidth(this.ctx, lineIndex)) - this.width / 2,
	          lineOffset = this._getSVGLineTopOffset(lineIndex),
	          heightOfLine = this._getHeightOfLine(this.ctx, lineIndex);

	      for (var i = 0, len = chars.length; i < len; i++) {
	        var styleDecl = this._getStyleDeclaration(lineIndex, i) || { };

	        textSpans.push(
	          this._createTextCharSpan(
	            chars[i], styleDecl, lineLeftOffset, lineOffset.lineTop + lineOffset.offset, charOffset));

	        var charWidth = this._getWidthOfChar(this.ctx, chars[i], lineIndex, i);

	        if (styleDecl.textBackgroundColor) {
	          textBgRects.push(
	            this._createTextCharBg(
	              styleDecl, lineLeftOffset, lineOffset.lineTop, heightOfLine, charWidth, charOffset));
	        }

	        charOffset += charWidth;
	      }
	    },

	    /**
	     * @private
	     */
	    _getSVGLineTopOffset: function(lineIndex) {
	      var lineTopOffset = 0, lastHeight = 0;
	      for (var j = 0; j < lineIndex; j++) {
	        lineTopOffset += this._getHeightOfLine(this.ctx, j);
	      }
	      lastHeight = this._getHeightOfLine(this.ctx, j);
	      return {
	        lineTop: lineTopOffset,
	        offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)
	      };
	    },

	    /**
	     * @private
	     */
	    _createTextCharBg: function(styleDecl, lineLeftOffset, lineTopOffset, heightOfLine, charWidth, charOffset) {
	      return [
	        //jscs:disable validateIndentation
	        '\t\t<rect fill="', styleDecl.textBackgroundColor,
	        '" x="', toFixed(lineLeftOffset + charOffset, NUM_FRACTION_DIGITS),
	        '" y="', toFixed(lineTopOffset - this.height/2, NUM_FRACTION_DIGITS),
	        '" width="', toFixed(charWidth, NUM_FRACTION_DIGITS),
	        '" height="', toFixed(heightOfLine / this.lineHeight, NUM_FRACTION_DIGITS),
	        '"></rect>\n'
	        //jscs:enable validateIndentation
	      ].join('');
	    },

	    /**
	     * @private
	     */
	    _createTextCharSpan: function(_char, styleDecl, lineLeftOffset, lineTopOffset, charOffset) {

	      var fillStyles = this.getSvgStyles.call(fabric.util.object.extend({
	        visible: true,
	        fill: this.fill,
	        stroke: this.stroke,
	        type: 'text',
	        getSvgFilter: fabric.Object.prototype.getSvgFilter
	      }, styleDecl));

	      return [
	        //jscs:disable validateIndentation
	        '\t\t\t<tspan x="', toFixed(lineLeftOffset + charOffset, NUM_FRACTION_DIGITS), '" y="',
	          toFixed(lineTopOffset - this.height/2, NUM_FRACTION_DIGITS), '" ',
	          (styleDecl.fontFamily ? 'font-family="' + styleDecl.fontFamily.replace(/"/g, '\'') + '" ': ''),
	          (styleDecl.fontSize ? 'font-size="' + styleDecl.fontSize + '" ': ''),
	          (styleDecl.fontStyle ? 'font-style="' + styleDecl.fontStyle + '" ': ''),
	          (styleDecl.fontWeight ? 'font-weight="' + styleDecl.fontWeight + '" ': ''),
	          (styleDecl.textDecoration ? 'text-decoration="' + styleDecl.textDecoration + '" ': ''),
	          'style="', fillStyles, '">',
	          fabric.util.string.escapeXml(_char),
	        '</tspan>\n'
	        //jscs:enable validateIndentation
	      ].join('');
	    }
	  });
	})();
	/* _TO_SVG_END_ */


	(function(global) {

	  'use strict';

	  var fabric = global.fabric || (global.fabric = {}),
	      clone  = fabric.util.object.clone;

	  /**
	   * Textbox class, based on IText, allows the user to resize the text rectangle
	   * and wraps lines automatically. Textboxes have their Y scaling locked, the
	   * user can only change width. Height is adjusted automatically based on the
	   * wrapping of lines.
	   * @class fabric.Textbox
	   * @extends fabric.IText
	   * @mixes fabric.Observable
	   * @return {fabric.Textbox} thisArg
	   * @see {@link fabric.Textbox#initialize} for constructor definition
	   */
	  fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {
	    /**
	     * Type of an object
	     * @type String
	     * @default
	     */
	    type: 'textbox',
	    /**
	     * Minimum width of textbox, in pixels.
	     * @type Number
	     * @default
	     */
	    minWidth: 20,
	    /**
	     * Minimum calculated width of a textbox, in pixels.
	     * @type Number
	     * @default
	     */
	    dynamicMinWidth: 0,
	    /**
	     * Cached array of text wrapping.
	     * @type Array
	     */
	    __cachedLines: null,
	    /**
	     * Constructor. Some scaling related property values are forced. Visibility
	     * of controls is also fixed; only the rotation and width controls are
	     * made available.
	     * @param {String} text Text string
	     * @param {Object} [options] Options object
	     * @return {fabric.Textbox} thisArg
	     */
	    initialize: function(text, options) {
	      this.ctx = fabric.util.createCanvasElement().getContext('2d');

	      this.callSuper('initialize', text, options);
	      this.set({
	        lockUniScaling: false,
	        lockScalingY: true,
	        lockScalingFlip: true,
	        hasBorders: true
	      });
	      this.setControlsVisibility(fabric.Textbox.getTextboxControlVisibility());

	      // add width to this list of props that effect line wrapping.
	      this._dimensionAffectingProps.width = true;
	    },

	    /**
	     * Unlike superclass's version of this function, Textbox does not update
	     * its width.
	     * @param {CanvasRenderingContext2D} ctx Context to use for measurements
	     * @private
	     * @override
	     */
	    _initDimensions: function(ctx) {
	      if (this.__skipDimension) {
	        return;
	      }

	      if (!ctx) {
	        ctx = fabric.util.createCanvasElement().getContext('2d');
	        this._setTextStyles(ctx);
	      }

	      // clear dynamicMinWidth as it will be different after we re-wrap line
	      this.dynamicMinWidth = 0;

	      // wrap lines
	      this._textLines = this._splitTextIntoLines();

	      // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap
	      if (this.dynamicMinWidth > this.width) {
	        this._set('width', this.dynamicMinWidth);
	      }

	      // clear cache and re-calculate height
	      this._clearCache();
	      this.height = this._getTextHeight(ctx);
	    },

	    /**
	     * Generate an object that translates the style object so that it is
	     * broken up by visual lines (new lines and automatic wrapping).
	     * The original text styles object is broken up by actual lines (new lines only),
	     * which is only sufficient for Text / IText
	     * @private
	     */
	    _generateStyleMap: function() {
	      var realLineCount     = 0,
	          realLineCharCount = 0,
	          charCount         = 0,
	          map               = {};

	      for (var i = 0; i < this._textLines.length; i++) {
	        if (this.text[charCount] === '\n') {
	          realLineCharCount = 0;
	          charCount++;
	          realLineCount++;
	        }
	        else if (this.text[charCount] === ' ') {
	          // this case deals with space's that are removed from end of lines when wrapping
	          realLineCharCount++;
	          charCount++;
	        }

	        map[i] = { line: realLineCount, offset: realLineCharCount };

	        charCount += this._textLines[i].length;
	        realLineCharCount += this._textLines[i].length;
	      }

	      return map;
	    },

	    /**
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @param {Boolean} [returnCloneOrEmpty=false]
	     * @private
	     */
	    _getStyleDeclaration: function(lineIndex, charIndex, returnCloneOrEmpty) {
	      if (this._styleMap) {
	        var map = this._styleMap[lineIndex];
	        if (!map) {
	          return returnCloneOrEmpty ? { } : null;
	        }
	        lineIndex = map.line;
	        charIndex = map.offset + charIndex;
	      }
	      return this.callSuper('_getStyleDeclaration', lineIndex, charIndex, returnCloneOrEmpty);
	    },

	    /**
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @param {Object} style
	     * @private
	     */
	    _setStyleDeclaration: function(lineIndex, charIndex, style) {
	      var map = this._styleMap[lineIndex];
	      lineIndex = map.line;
	      charIndex = map.offset + charIndex;

	      this.styles[lineIndex][charIndex] = style;
	    },

	    /**
	     * @param {Number} lineIndex
	     * @param {Number} charIndex
	     * @private
	     */
	    _deleteStyleDeclaration: function(lineIndex, charIndex) {
	      var map = this._styleMap[lineIndex];
	      lineIndex = map.line;
	      charIndex = map.offset + charIndex;

	      delete this.styles[lineIndex][charIndex];
	    },

	    /**
	     * @param {Number} lineIndex
	     * @private
	     */
	    _getLineStyle: function(lineIndex) {
	      var map = this._styleMap[lineIndex];
	      return this.styles[map.line];
	    },

	    /**
	     * @param {Number} lineIndex
	     * @param {Object} style
	     * @private
	     */
	    _setLineStyle: function(lineIndex, style) {
	      var map = this._styleMap[lineIndex];
	      this.styles[map.line] = style;
	    },

	    /**
	     * @param {Number} lineIndex
	     * @private
	     */
	    _deleteLineStyle: function(lineIndex) {
	      var map = this._styleMap[lineIndex];
	      delete this.styles[map.line];
	    },

	    /**
	     * Wraps text using the 'width' property of Textbox. First this function
	     * splits text on newlines, so we preserve newlines entered by the user.
	     * Then it wraps each line using the width of the Textbox by calling
	     * _wrapLine().
	     * @param {CanvasRenderingContext2D} ctx Context to use for measurements
	     * @param {String} text The string of text that is split into lines
	     * @returns {Array} Array of lines
	     */
	    _wrapText: function(ctx, text) {
	      var lines = text.split(this._reNewline), wrapped = [], i;

	      for (i = 0; i < lines.length; i++) {
	        wrapped = wrapped.concat(this._wrapLine(ctx, lines[i], i));
	      }

	      return wrapped;
	    },

	    /**
	     * Helper function to measure a string of text, given its lineIndex and charIndex offset
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {String} text
	     * @param {number} lineIndex
	     * @param {number} charOffset
	     * @returns {number}
	     * @private
	     */
	    _measureText: function(ctx, text, lineIndex, charOffset) {
	      var width = 0;
	      charOffset = charOffset || 0;

	      for (var i = 0, len = text.length; i < len; i++) {
	        width += this._getWidthOfChar(ctx, text[i], lineIndex, i + charOffset);
	      }

	      return width;
	    },

	    /**
	     * Wraps a line of text using the width of the Textbox and a context.
	     * @param {CanvasRenderingContext2D} ctx Context to use for measurements
	     * @param {String} text The string of text to split into lines
	     * @param {Number} lineIndex
	     * @returns {Array} Array of line(s) into which the given text is wrapped
	     * to.
	     */
	    _wrapLine: function(ctx, text, lineIndex) {
	      var lineWidth        = 0,
	          lines            = [],
	          line             = '',
	          words            = text.split(' '),
	          word             = '',
	          offset           = 0,
	          infix            = ' ',
	          wordWidth        = 0,
	          infixWidth       = 0,
	          largestWordWidth = 0,
	          lineJustStarted = true;

	      for (var i = 0; i < words.length; i++) {
	        word = words[i];
	        wordWidth = this._measureText(ctx, word, lineIndex, offset);

	        offset += word.length;

	        lineWidth += infixWidth + wordWidth;

	        if (lineWidth >= this.width && !lineJustStarted) {
	          lines.push(line);
	          line = '';
	          lineWidth = wordWidth;
	          lineJustStarted = true;
	        }

	        if (!lineJustStarted) {
	          line += infix;
	        }
	        line += word;

	        infixWidth = this._measureText(ctx, infix, lineIndex, offset);
	        offset++;
	        lineJustStarted = false;
	        // keep track of largest word
	        if (wordWidth > largestWordWidth) {
	          largestWordWidth = wordWidth;
	        }
	      }

	      i && lines.push(line);

	      if (largestWordWidth > this.dynamicMinWidth) {
	        this.dynamicMinWidth = largestWordWidth;
	      }

	      return lines;
	    },
	    /**
	     * Gets lines of text to render in the Textbox. This function calculates
	     * text wrapping on the fly everytime it is called.
	     * @returns {Array} Array of lines in the Textbox.
	     * @override
	     */
	    _splitTextIntoLines: function() {
	      var originalAlign = this.textAlign;
	      this.ctx.save();
	      this._setTextStyles(this.ctx);
	      this.textAlign = 'left';
	      var lines = this._wrapText(this.ctx, this.text);
	      this.textAlign = originalAlign;
	      this.ctx.restore();
	      this._textLines = lines;
	      this._styleMap = this._generateStyleMap();
	      return lines;
	    },

	    /**
	     * When part of a group, we don't want the Textbox's scale to increase if
	     * the group's increases. That's why we reduce the scale of the Textbox by
	     * the amount that the group's increases. This is to maintain the effective
	     * scale of the Textbox at 1, so that font-size values make sense. Otherwise
	     * the same font-size value would result in different actual size depending
	     * on the value of the scale.
	     * @param {String} key
	     * @param {Any} value
	     */
	    setOnGroup: function(key, value) {
	      if (key === 'scaleX') {
	        this.set('scaleX', Math.abs(1 / value));
	        this.set('width', (this.get('width') * value) /
	          (typeof this.__oldScaleX === 'undefined' ? 1 : this.__oldScaleX));
	        this.__oldScaleX = value;
	      }
	    },

	    /**
	     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start).
	     * Overrides the superclass function to take into account text wrapping.
	     *
	     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.
	     */
	    get2DCursorLocation: function(selectionStart) {
	      if (typeof selectionStart === 'undefined') {
	        selectionStart = this.selectionStart;
	      }

	      var numLines = this._textLines.length,
	          removed  = 0;

	      for (var i = 0; i < numLines; i++) {
	        var line    = this._textLines[i],
	            lineLen = line.length;

	        if (selectionStart <= removed + lineLen) {
	          return {
	            lineIndex: i,
	            charIndex: selectionStart - removed
	          };
	        }

	        removed += lineLen;

	        if (this.text[removed] === '\n' || this.text[removed] === ' ') {
	          removed++;
	        }
	      }

	      return {
	        lineIndex: numLines - 1,
	        charIndex: this._textLines[numLines - 1].length
	      };
	    },

	    /**
	     * Overrides superclass function and uses text wrapping data to get cursor
	     * boundary offsets instead of the array of chars.
	     * @param {Array} chars Unused
	     * @param {String} typeOfBoundaries Can be 'cursor' or 'selection'
	     * @returns {Object} Object with 'top', 'left', and 'lineLeft' properties set.
	     */
	    _getCursorBoundariesOffsets: function(chars, typeOfBoundaries) {
	      var topOffset      = 0,
	          leftOffset     = 0,
	          cursorLocation = this.get2DCursorLocation(),
	          lineChars      = this._textLines[cursorLocation.lineIndex].split(''),
	          lineLeftOffset = this._getLineLeftOffset(this._getLineWidth(this.ctx, cursorLocation.lineIndex));

	      for (var i = 0; i < cursorLocation.charIndex; i++) {
	        leftOffset += this._getWidthOfChar(this.ctx, lineChars[i], cursorLocation.lineIndex, i);
	      }

	      for (i = 0; i < cursorLocation.lineIndex; i++) {
	        topOffset += this._getHeightOfLine(this.ctx, i);
	      }

	      if (typeOfBoundaries === 'cursor') {
	        topOffset += (1 - this._fontSizeFraction) * this._getHeightOfLine(this.ctx, cursorLocation.lineIndex)
	          / this.lineHeight - this.getCurrentCharFontSize(cursorLocation.lineIndex, cursorLocation.charIndex)
	          * (1 - this._fontSizeFraction);
	      }

	      return {
	        top: topOffset,
	        left: leftOffset,
	        lineLeft: lineLeftOffset
	      };
	    },

	    getMinWidth: function() {
	      return Math.max(this.minWidth, this.dynamicMinWidth);
	    },

	    /**
	     * Returns object representation of an instance
	     * @method toObject
	     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
	     * @return {Object} object representation of an instance
	     */
	    toObject: function(propertiesToInclude) {
	      return fabric.util.object.extend(this.callSuper('toObject', propertiesToInclude), {
	        minWidth: this.minWidth
	      });
	    }
	  });
	  /**
	   * Returns fabric.Textbox instance from an object representation
	   * @static
	   * @memberOf fabric.Textbox
	   * @param {Object} object Object to create an instance from
	   * @return {fabric.Textbox} instance of fabric.Textbox
	   */
	  fabric.Textbox.fromObject = function(object) {
	    return new fabric.Textbox(object.text, clone(object));
	  };
	  /**
	   * Returns the default controls visibility required for Textboxes.
	   * @returns {Object}
	   */
	  fabric.Textbox.getTextboxControlVisibility = function() {
	    return {
	      tl: false,
	      tr: false,
	      br: false,
	      bl: false,
	      ml: true,
	      mt: false,
	      mr: true,
	      mb: false,
	      mtr: true
	    };
	  };
	  /**
	   * Contains all fabric.Textbox objects that have been created
	   * @static
	   * @memberOf fabric.Textbox
	   * @type Array
	   */
	  fabric.Textbox.instances = [];
	})( true ? exports : this);


	(function() {

	  /**
	   * Override _setObjectScale and add Textbox specific resizing behavior. Resizing
	   * a Textbox doesn't scale text, it only changes width and makes text wrap automatically.
	   */
	  var setObjectScaleOverridden = fabric.Canvas.prototype._setObjectScale;

	  fabric.Canvas.prototype._setObjectScale = function(localMouse, transform,
	                                                     lockScalingX, lockScalingY, by, lockScalingFlip, _dim) {

	    var t = transform.target;
	    if (t instanceof fabric.Textbox) {
	      var w = t.width * ((localMouse.x / transform.scaleX) / (t.width + t.strokeWidth));
	      if (w >= t.getMinWidth()) {
	        t.set('width', w);
	        return true;
	      }
	    }
	    else {
	      return setObjectScaleOverridden.call(fabric.Canvas.prototype, localMouse, transform,
	        lockScalingX, lockScalingY, by, lockScalingFlip, _dim);
	    }
	  };

	  /**
	   * Sets controls of this group to the Textbox's special configuration if
	   * one is present in the group. Deletes _controlsVisibility otherwise, so that
	   * it gets initialized to default value at runtime.
	   */
	  fabric.Group.prototype._refreshControlsVisibility = function() {
	    if (typeof fabric.Textbox === 'undefined') {
	      return;
	    }
	    for (var i = this._objects.length; i--;) {
	      if (this._objects[i] instanceof fabric.Textbox) {
	        this.setControlsVisibility(fabric.Textbox.getTextboxControlVisibility());
	        return;
	      }
	    }
	  };

	  var clone = fabric.util.object.clone;

	  fabric.util.object.extend(fabric.Textbox.prototype, /** @lends fabric.IText.prototype */ {
	    /**
	     * @private
	     */
	    _removeExtraneousStyles: function() {
	      for (var prop in this._styleMap) {
	        if (!this._textLines[prop]) {
	          delete this.styles[this._styleMap[prop].line];
	        }
	      }
	    },

	    /**
	     * Inserts style object for a given line/char index
	     * @param {Number} lineIndex Index of a line
	     * @param {Number} charIndex Index of a char
	     * @param {Object} [style] Style object to insert, if given
	     */
	    insertCharStyleObject: function(lineIndex, charIndex, style) {
	      // adjust lineIndex and charIndex
	      var map = this._styleMap[lineIndex];
	      lineIndex = map.line;
	      charIndex = map.offset + charIndex;

	      fabric.IText.prototype.insertCharStyleObject.apply(this, [lineIndex, charIndex, style]);
	    },

	    /**
	     * Inserts new style object
	     * @param {Number} lineIndex Index of a line
	     * @param {Number} charIndex Index of a char
	     * @param {Boolean} isEndOfLine True if it's end of line
	     */
	    insertNewlineStyleObject: function(lineIndex, charIndex, isEndOfLine) {
	      // adjust lineIndex and charIndex
	      var map = this._styleMap[lineIndex];
	      lineIndex = map.line;
	      charIndex = map.offset + charIndex;

	      fabric.IText.prototype.insertNewlineStyleObject.apply(this, [lineIndex, charIndex, isEndOfLine]);
	    },

	    /**
	     * Shifts line styles up or down. This function is slightly different than the one in
	     * itext_behaviour as it takes into account the styleMap.
	     *
	     * @param {Number} lineIndex Index of a line
	     * @param {Number} offset Can be -1 or +1
	     */
	    shiftLineStyles: function(lineIndex, offset) {
	      // shift all line styles by 1 upward
	      var clonedStyles = clone(this.styles),
	          map          = this._styleMap[lineIndex];

	      // adjust line index
	      lineIndex = map.line;

	      for (var line in this.styles) {
	        var numericLine = parseInt(line, 10);

	        if (numericLine > lineIndex) {
	          this.styles[numericLine + offset] = clonedStyles[numericLine];

	          if (!clonedStyles[numericLine - offset]) {
	            delete this.styles[numericLine];
	          }
	        }
	      }
	      //TODO: evaluate if delete old style lines with offset -1
	    },

	    /**
	     * Figure out programatically the text on previous actual line (actual = separated by \n);
	     *
	     * @param {Number} lIndex
	     * @returns {String}
	     * @private
	     */
	    _getTextOnPreviousLine: function(lIndex) {
	      var textOnPreviousLine = this._textLines[lIndex - 1];

	      while (this._styleMap[lIndex - 2] && this._styleMap[lIndex - 2].line === this._styleMap[lIndex - 1].line) {
	        textOnPreviousLine = this._textLines[lIndex - 2] + textOnPreviousLine;

	        lIndex--;
	      }

	      return textOnPreviousLine;
	    },

	    /**
	     * Removes style object
	     * @param {Boolean} isBeginningOfLine True if cursor is at the beginning of line
	     * @param {Number} [index] Optional index. When not given, current selectionStart is used.
	     */
	    removeStyleObject: function(isBeginningOfLine, index) {

	      var cursorLocation = this.get2DCursorLocation(index),
	          map            = this._styleMap[cursorLocation.lineIndex],
	          lineIndex      = map.line,
	          charIndex      = map.offset + cursorLocation.charIndex;
	      this._removeStyleObject(isBeginningOfLine, cursorLocation, lineIndex, charIndex);
	    }
	  });
	})();


	(function() {
	  var override = fabric.IText.prototype._getNewSelectionStartFromOffset;
	  /**
	   * Overrides the IText implementation and adjusts character index as there is not always a linebreak
	   *
	   * @param {Number} mouseOffset
	   * @param {Number} prevWidth
	   * @param {Number} width
	   * @param {Number} index
	   * @param {Number} jlen
	   * @returns {Number}
	   */
	  fabric.IText.prototype._getNewSelectionStartFromOffset = function(mouseOffset, prevWidth, width, index, jlen) {
	    index = override.call(this, mouseOffset, prevWidth, width, index, jlen);

	    // the index passed into the function is padded by the amount of lines from _textLines (to account for \n)
	    // we need to remove this padding, and pad it by actual lines, and / or spaces that are meant to be there
	    var tmp     = 0,
	        removed = 0;

	    // account for removed characters
	    for (var i = 0; i < this._textLines.length; i++) {
	      tmp += this._textLines[i].length;

	      if (tmp + removed >= index) {
	        break;
	      }

	      if (this.text[tmp + removed] === '\n' || this.text[tmp + removed] === ' ') {
	        removed++;
	      }
	    }

	    return index - i + removed;
	  };
	})();


	(function() {

	  if (typeof document !== 'undefined' && typeof window !== 'undefined') {
	    return;
	  }

	  var DOMParser = __webpack_require__(10).DOMParser,
	      URL = __webpack_require__(11),
	      HTTP = __webpack_require__(17),
	      HTTPS = __webpack_require__(40),

	      Canvas = __webpack_require__(9),
	      Image = __webpack_require__(9).Image;

	  /** @private */
	  function request(url, encoding, callback) {
	    var oURL = URL.parse(url);

	    // detect if http or https is used
	    if ( !oURL.port ) {
	      oURL.port = ( oURL.protocol.indexOf('https:') === 0 ) ? 443 : 80;
	    }

	    // assign request handler based on protocol
	    var reqHandler = (oURL.protocol.indexOf('https:') === 0 ) ? HTTPS : HTTP,
	        req = reqHandler.request({
	          hostname: oURL.hostname,
	          port: oURL.port,
	          path: oURL.path,
	          method: 'GET'
	        }, function(response) {
	          var body = '';
	          if (encoding) {
	            response.setEncoding(encoding);
	          }
	          response.on('end', function () {
	            callback(body);
	          });
	          response.on('data', function (chunk) {
	            if (response.statusCode === 200) {
	              body += chunk;
	            }
	          });
	        });

	    req.on('error', function(err) {
	      if (err.errno === process.ECONNREFUSED) {
	        fabric.log('ECONNREFUSED: connection refused to ' + oURL.hostname + ':' + oURL.port);
	      }
	      else {
	        fabric.log(err.message);
	      }
	      callback(null);
	    });

	    req.end();
	  }

	  /** @private */
	  function requestFs(path, callback) {
	    var fs = __webpack_require__(41);
	    fs.readFile(path, function (err, data) {
	      if (err) {
	        fabric.log(err);
	        throw err;
	      }
	      else {
	        callback(data);
	      }
	    });
	  }

	  fabric.util.loadImage = function(url, callback, context) {
	    function createImageAndCallBack(data) {
	      if (data) {
	        img.src = new Buffer(data, 'binary');
	        // preserving original url, which seems to be lost in node-canvas
	        img._src = url;
	        callback && callback.call(context, img);
	      }
	      else {
	        img = null;
	        callback && callback.call(context, null, true);
	      }
	    }
	    var img = new Image();
	    if (url && (url instanceof Buffer || url.indexOf('data') === 0)) {
	      img.src = img._src = url;
	      callback && callback.call(context, img);
	    }
	    else if (url && url.indexOf('http') !== 0) {
	      requestFs(url, createImageAndCallBack);
	    }
	    else if (url) {
	      request(url, 'binary', createImageAndCallBack);
	    }
	    else {
	      callback && callback.call(context, url);
	    }
	  };

	  fabric.loadSVGFromURL = function(url, callback, reviver) {
	    url = url.replace(/^\n\s*/, '').replace(/\?.*$/, '').trim();
	    if (url.indexOf('http') !== 0) {
	      requestFs(url, function(body) {
	        fabric.loadSVGFromString(body.toString(), callback, reviver);
	      });
	    }
	    else {
	      request(url, '', function(body) {
	        fabric.loadSVGFromString(body, callback, reviver);
	      });
	    }
	  };

	  fabric.loadSVGFromString = function(string, callback, reviver) {
	    var doc = new DOMParser().parseFromString(string);
	    fabric.parseSVGDocument(doc.documentElement, function(results, options) {
	      callback && callback(results, options);
	    }, reviver);
	  };

	  fabric.util.getScript = function(url, callback) {
	    request(url, '', function(body) {
	      eval(body);
	      callback && callback();
	    });
	  };

	  fabric.Image.fromObject = function(object, callback) {
	    fabric.util.loadImage(object.src, function(img) {
	      var oImg = new fabric.Image(img);

	      oImg._initConfig(object);
	      oImg._initFilters(object.filters, function(filters) {
	        oImg.filters = filters || [ ];
	        oImg._initFilters(object.resizeFilters, function(resizeFilters) {
	          oImg.resizeFilters = resizeFilters || [ ];
	          callback && callback(oImg);
	        });
	      });
	    });
	  };
	  /**
	   * Only available when running fabric on node.js
	   * @param {Number} width Canvas width
	   * @param {Number} height Canvas height
	   * @param {Object} [options] Options to pass to FabricCanvas.
	   * @param {Object} [nodeCanvasOptions] Options to pass to NodeCanvas.
	   * @return {Object} wrapped canvas instance
	   */
	  fabric.createCanvasForNode = function(width, height, options, nodeCanvasOptions) {
	    nodeCanvasOptions = nodeCanvasOptions || options;

	    var canvasEl = fabric.document.createElement('canvas'),
	        nodeCanvas = new Canvas(width || 600, height || 600, nodeCanvasOptions);

	    // jsdom doesn't create style on canvas element, so here be temp. workaround
	    canvasEl.style = { };

	    canvasEl.width = nodeCanvas.width;
	    canvasEl.height = nodeCanvas.height;

	    var FabricCanvas = fabric.Canvas || fabric.StaticCanvas,
	        fabricCanvas = new FabricCanvas(canvasEl, options);

	    fabricCanvas.contextContainer = nodeCanvas.getContext('2d');
	    fabricCanvas.nodeCanvas = nodeCanvas;
	    fabricCanvas.Font = Canvas.Font;

	    return fabricCanvas;
	  };

	  /** @ignore */
	  fabric.StaticCanvas.prototype.createPNGStream = function() {
	    return this.nodeCanvas.createPNGStream();
	  };

	  fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {
	    return this.nodeCanvas.createJPEGStream(opts);
	  };

	  var origSetWidth = fabric.StaticCanvas.prototype.setWidth;
	  fabric.StaticCanvas.prototype.setWidth = function(width, options) {
	    origSetWidth.call(this, width, options);
	    this.nodeCanvas.width = width;
	    return this;
	  };
	  if (fabric.Canvas) {
	    fabric.Canvas.prototype.setWidth = fabric.StaticCanvas.prototype.setWidth;
	  }

	  var origSetHeight = fabric.StaticCanvas.prototype.setHeight;
	  fabric.StaticCanvas.prototype.setHeight = function(height, options) {
	    origSetHeight.call(this, height, options);
	    this.nodeCanvas.height = height;
	    return this;
	  };
	  if (fabric.Canvas) {
	    fabric.Canvas.prototype.setHeight = fabric.StaticCanvas.prototype.setHeight;
	  }

	})();


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer, __webpack_require__(7)))

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(4)
	var ieee754 = __webpack_require__(5)
	var isArray = __webpack_require__(6)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    this.length = 0
	    this.parent = undefined
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	} else {
	  // pre-set for values that may exist in the future
	  Buffer.prototype.length = undefined
	  Buffer.prototype.parent = undefined
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer, (function() { return this; }())))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 5 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 6 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 7 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 8 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 9 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 10 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(12);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(14);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)(module), (function() { return this; }())))

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(15);
	exports.encode = exports.stringify = __webpack_require__(16);


/***/ },
/* 15 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 16 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var http = module.exports;
	var EventEmitter = __webpack_require__(18).EventEmitter;
	var Request = __webpack_require__(19);
	var url = __webpack_require__(11)

	http.request = function (params, cb) {
	    if (typeof params === 'string') {
	        params = url.parse(params)
	    }
	    if (!params) params = {};
	    if (!params.host && !params.port) {
	        params.port = parseInt(window.location.port, 10);
	    }
	    if (!params.host && params.hostname) {
	        params.host = params.hostname;
	    }

	    if (!params.protocol) {
	        if (params.scheme) {
	            params.protocol = params.scheme + ':';
	        } else {
	            params.protocol = window.location.protocol;
	        }
	    }

	    if (!params.host) {
	        params.host = window.location.hostname || window.location.host;
	    }
	    if (/:/.test(params.host)) {
	        if (!params.port) {
	            params.port = params.host.split(':')[1];
	        }
	        params.host = params.host.split(':')[0];
	    }
	    if (!params.port) params.port = params.protocol == 'https:' ? 443 : 80;
	    
	    var req = new Request(new xhrHttp, params);
	    if (cb) req.on('response', cb);
	    return req;
	};

	http.get = function (params, cb) {
	    params.method = 'GET';
	    var req = http.request(params, cb);
	    req.end();
	    return req;
	};

	http.Agent = function () {};
	http.Agent.defaultMaxSockets = 4;

	var xhrHttp = (function () {
	    if (typeof window === 'undefined') {
	        throw new Error('no window object present');
	    }
	    else if (window.XMLHttpRequest) {
	        return window.XMLHttpRequest;
	    }
	    else if (window.ActiveXObject) {
	        var axs = [
	            'Msxml2.XMLHTTP.6.0',
	            'Msxml2.XMLHTTP.3.0',
	            'Microsoft.XMLHTTP'
	        ];
	        for (var i = 0; i < axs.length; i++) {
	            try {
	                var ax = new(window.ActiveXObject)(axs[i]);
	                return function () {
	                    if (ax) {
	                        var ax_ = ax;
	                        ax = null;
	                        return ax_;
	                    }
	                    else {
	                        return new(window.ActiveXObject)(axs[i]);
	                    }
	                };
	            }
	            catch (e) {}
	        }
	        throw new Error('ajax not supported in this browser')
	    }
	    else {
	        throw new Error('ajax not supported in this browser');
	    }
	})();

	http.STATUS_CODES = {
	    100 : 'Continue',
	    101 : 'Switching Protocols',
	    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918
	    200 : 'OK',
	    201 : 'Created',
	    202 : 'Accepted',
	    203 : 'Non-Authoritative Information',
	    204 : 'No Content',
	    205 : 'Reset Content',
	    206 : 'Partial Content',
	    207 : 'Multi-Status',               // RFC 4918
	    300 : 'Multiple Choices',
	    301 : 'Moved Permanently',
	    302 : 'Moved Temporarily',
	    303 : 'See Other',
	    304 : 'Not Modified',
	    305 : 'Use Proxy',
	    307 : 'Temporary Redirect',
	    400 : 'Bad Request',
	    401 : 'Unauthorized',
	    402 : 'Payment Required',
	    403 : 'Forbidden',
	    404 : 'Not Found',
	    405 : 'Method Not Allowed',
	    406 : 'Not Acceptable',
	    407 : 'Proxy Authentication Required',
	    408 : 'Request Time-out',
	    409 : 'Conflict',
	    410 : 'Gone',
	    411 : 'Length Required',
	    412 : 'Precondition Failed',
	    413 : 'Request Entity Too Large',
	    414 : 'Request-URI Too Large',
	    415 : 'Unsupported Media Type',
	    416 : 'Requested Range Not Satisfiable',
	    417 : 'Expectation Failed',
	    418 : 'I\'m a teapot',              // RFC 2324
	    422 : 'Unprocessable Entity',       // RFC 4918
	    423 : 'Locked',                     // RFC 4918
	    424 : 'Failed Dependency',          // RFC 4918
	    425 : 'Unordered Collection',       // RFC 4918
	    426 : 'Upgrade Required',           // RFC 2817
	    428 : 'Precondition Required',      // RFC 6585
	    429 : 'Too Many Requests',          // RFC 6585
	    431 : 'Request Header Fields Too Large',// RFC 6585
	    500 : 'Internal Server Error',
	    501 : 'Not Implemented',
	    502 : 'Bad Gateway',
	    503 : 'Service Unavailable',
	    504 : 'Gateway Time-out',
	    505 : 'HTTP Version Not Supported',
	    506 : 'Variant Also Negotiates',    // RFC 2295
	    507 : 'Insufficient Storage',       // RFC 4918
	    509 : 'Bandwidth Limit Exceeded',
	    510 : 'Not Extended',               // RFC 2774
	    511 : 'Network Authentication Required' // RFC 6585
	};

/***/ },
/* 18 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(20);
	var Response = __webpack_require__(36);
	var Base64 = __webpack_require__(39);
	var inherits = __webpack_require__(21);

	var Request = module.exports = function (xhr, params) {
	    var self = this;
	    self.writable = true;
	    self.xhr = xhr;
	    self.body = [];
	    
	    self.uri = (params.protocol || 'http:') + '//'
	        + params.host
	        + (params.port ? ':' + params.port : '')
	        + (params.path || '/')
	    ;
	    
	    if (typeof params.withCredentials === 'undefined') {
	        params.withCredentials = true;
	    }

	    try { xhr.withCredentials = params.withCredentials }
	    catch (e) {}
	    
	    if (params.responseType) try { xhr.responseType = params.responseType }
	    catch (e) {}
	    
	    xhr.open(
	        params.method || 'GET',
	        self.uri,
	        true
	    );

	    xhr.onerror = function(event) {
	        self.emit('error', new Error('Network error'));
	    };

	    self._headers = {};
	    
	    if (params.headers) {
	        var keys = objectKeys(params.headers);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            if (!self.isSafeRequestHeader(key)) continue;
	            var value = params.headers[key];
	            self.setHeader(key, value);
	        }
	    }
	    
	    if (params.auth) {
	        //basic auth
	        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));
	    }

	    var res = new Response;
	    res.on('close', function () {
	        self.emit('close');
	    });
	    
	    res.on('ready', function () {
	        self.emit('response', res);
	    });

	    res.on('error', function (err) {
	        self.emit('error', err);
	    });
	    
	    xhr.onreadystatechange = function () {
	        // Fix for IE9 bug
	        // SCRIPT575: Could not complete the operation due to error c00c023f
	        // It happens when a request is aborted, calling the success callback anyway with readyState === 4
	        if (xhr.__aborted) return;
	        res.handle(xhr);
	    };
	};

	inherits(Request, Stream);

	Request.prototype.setHeader = function (key, value) {
	    this._headers[key.toLowerCase()] = value
	};

	Request.prototype.getHeader = function (key) {
	    return this._headers[key.toLowerCase()]
	};

	Request.prototype.removeHeader = function (key) {
	    delete this._headers[key.toLowerCase()]
	};

	Request.prototype.write = function (s) {
	    this.body.push(s);
	};

	Request.prototype.destroy = function (s) {
	    this.xhr.__aborted = true;
	    this.xhr.abort();
	    this.emit('close');
	};

	Request.prototype.end = function (s) {
	    if (s !== undefined) this.body.push(s);

	    var keys = objectKeys(this._headers);
	    for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        var value = this._headers[key];
	        if (isArray(value)) {
	            for (var j = 0; j < value.length; j++) {
	                this.xhr.setRequestHeader(key, value[j]);
	            }
	        }
	        else this.xhr.setRequestHeader(key, value)
	    }

	    if (this.body.length === 0) {
	        this.xhr.send('');
	    }
	    else if (typeof this.body[0] === 'string') {
	        this.xhr.send(this.body.join(''));
	    }
	    else if (isArray(this.body[0])) {
	        var body = [];
	        for (var i = 0; i < this.body.length; i++) {
	            body.push.apply(body, this.body[i]);
	        }
	        this.xhr.send(body);
	    }
	    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
	        var len = 0;
	        for (var i = 0; i < this.body.length; i++) {
	            len += this.body[i].length;
	        }
	        var body = new(this.body[0].constructor)(len);
	        var k = 0;
	        
	        for (var i = 0; i < this.body.length; i++) {
	            var b = this.body[i];
	            for (var j = 0; j < b.length; j++) {
	                body[k++] = b[j];
	            }
	        }
	        this.xhr.send(body);
	    }
	    else if (isXHR2Compatible(this.body[0])) {
	        this.xhr.send(this.body[0]);
	    }
	    else {
	        var body = '';
	        for (var i = 0; i < this.body.length; i++) {
	            body += this.body[i].toString();
	        }
	        this.xhr.send(body);
	    }
	};

	// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
	Request.unsafeHeaders = [
	    "accept-charset",
	    "accept-encoding",
	    "access-control-request-headers",
	    "access-control-request-method",
	    "connection",
	    "content-length",
	    "cookie",
	    "cookie2",
	    "content-transfer-encoding",
	    "date",
	    "expect",
	    "host",
	    "keep-alive",
	    "origin",
	    "referer",
	    "te",
	    "trailer",
	    "transfer-encoding",
	    "upgrade",
	    "user-agent",
	    "via"
	];

	Request.prototype.isSafeRequestHeader = function (headerName) {
	    if (!headerName) return false;
	    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
	};

	var objectKeys = Object.keys || function (obj) {
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    return keys;
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};

	var indexOf = function (xs, x) {
	    if (xs.indexOf) return xs.indexOf(x);
	    for (var i = 0; i < xs.length; i++) {
	        if (xs[i] === x) return i;
	    }
	    return -1;
	};

	var isXHR2Compatible = function (obj) {
	    if (typeof Blob !== 'undefined' && obj instanceof Blob) return true;
	    if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer) return true;
	    if (typeof FormData !== 'undefined' && obj instanceof FormData) return true;
	};


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(18).EventEmitter;
	var inherits = __webpack_require__(21);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(22);
	Stream.Writable = __webpack_require__(32);
	Stream.Duplex = __webpack_require__(33);
	Stream.Transform = __webpack_require__(34);
	Stream.PassThrough = __webpack_require__(35);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 21 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = __webpack_require__(23);
	exports.Stream = __webpack_require__(20);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(28);
	exports.Duplex = __webpack_require__(27);
	exports.Transform = __webpack_require__(30);
	exports.PassThrough = __webpack_require__(31);
	if (!process.browser && process.env.READABLE_STREAM === 'disable') {
	  module.exports = __webpack_require__(20);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(24);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(3).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(18).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(20);

	/*<replacement>*/
	var util = __webpack_require__(25);
	util.inherits = __webpack_require__(21);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(26);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(27);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(29).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(27);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(29).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 24 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ },
/* 26 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(25);
	util.inherits = __webpack_require__(21);
	/*</replacement>*/

	var Readable = __webpack_require__(23);
	var Writable = __webpack_require__(28);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(3).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(25);
	util.inherits = __webpack_require__(21);
	/*</replacement>*/

	var Stream = __webpack_require__(20);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(27);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(27);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(3).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(27);

	/*<replacement>*/
	var util = __webpack_require__(25);
	util.inherits = __webpack_require__(21);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(30);

	/*<replacement>*/
	var util = __webpack_require__(25);
	util.inherits = __webpack_require__(21);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(28)


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(27)


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(30)


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(31)


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(20);
	var util = __webpack_require__(37);

	var Response = module.exports = function (res) {
	    this.offset = 0;
	    this.readable = true;
	};

	util.inherits(Response, Stream);

	var capable = {
	    streaming : true,
	    status2 : true
	};

	function parseHeaders (res) {
	    var lines = res.getAllResponseHeaders().split(/\r?\n/);
	    var headers = {};
	    for (var i = 0; i < lines.length; i++) {
	        var line = lines[i];
	        if (line === '') continue;
	        
	        var m = line.match(/^([^:]+):\s*(.*)/);
	        if (m) {
	            var key = m[1].toLowerCase(), value = m[2];
	            
	            if (headers[key] !== undefined) {
	            
	                if (isArray(headers[key])) {
	                    headers[key].push(value);
	                }
	                else {
	                    headers[key] = [ headers[key], value ];
	                }
	            }
	            else {
	                headers[key] = value;
	            }
	        }
	        else {
	            headers[line] = true;
	        }
	    }
	    return headers;
	}

	Response.prototype.getResponse = function (xhr) {
	    var respType = String(xhr.responseType).toLowerCase();
	    if (respType === 'blob') return xhr.responseBlob || xhr.response;
	    if (respType === 'arraybuffer') return xhr.response;
	    return xhr.responseText;
	}

	Response.prototype.getHeader = function (key) {
	    return this.headers[key.toLowerCase()];
	};

	Response.prototype.handle = function (res) {
	    if (res.readyState === 2 && capable.status2) {
	        try {
	            this.statusCode = res.status;
	            this.headers = parseHeaders(res);
	        }
	        catch (err) {
	            capable.status2 = false;
	        }
	        
	        if (capable.status2) {
	            this.emit('ready');
	        }
	    }
	    else if (capable.streaming && res.readyState === 3) {
	        try {
	            if (!this.statusCode) {
	                this.statusCode = res.status;
	                this.headers = parseHeaders(res);
	                this.emit('ready');
	            }
	        }
	        catch (err) {}
	        
	        try {
	            this._emitData(res);
	        }
	        catch (err) {
	            capable.streaming = false;
	        }
	    }
	    else if (res.readyState === 4) {
	        if (!this.statusCode) {
	            this.statusCode = res.status;
	            this.emit('ready');
	        }
	        this._emitData(res);
	        
	        if (res.error) {
	            this.emit('error', this.getResponse(res));
	        }
	        else this.emit('end');
	        
	        this.emit('close');
	    }
	};

	Response.prototype._emitData = function (res) {
	    var respBody = this.getResponse(res);
	    if (respBody.toString().match(/ArrayBuffer/)) {
	        this.emit('data', new Uint8Array(respBody, this.offset));
	        this.offset = respBody.byteLength;
	        return;
	    }
	    if (respBody.length > this.offset) {
	        this.emit('data', respBody.slice(this.offset));
	        this.offset = respBody.length;
	    }
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(38);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(21);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(7)))

/***/ },
/* 38 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {

	  var object =  true ? exports : this; // #8: web workers
	  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	  function InvalidCharacterError(message) {
	    this.message = message;
	  }
	  InvalidCharacterError.prototype = new Error;
	  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

	  // encoder
	  // [https://gist.github.com/999166] by [https://github.com/nignag]
	  object.btoa || (
	  object.btoa = function (input) {
	    for (
	      // initialize result and counter
	      var block, charCode, idx = 0, map = chars, output = '';
	      // if the next input index does not exist:
	      //   change the mapping table to "="
	      //   check if d has no fractional digits
	      input.charAt(idx | 0) || (map = '=', idx % 1);
	      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	    ) {
	      charCode = input.charCodeAt(idx += 3/4);
	      if (charCode > 0xFF) {
	        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
	      }
	      block = block << 8 | charCode;
	    }
	    return output;
	  });

	  // decoder
	  // [https://gist.github.com/1020396] by [https://github.com/atk]
	  object.atob || (
	  object.atob = function (input) {
	    input = input.replace(/=+$/, '');
	    if (input.length % 4 == 1) {
	      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
	    }
	    for (
	      // initialize result and counters
	      var bc = 0, bs, buffer, idx = 0, output = '';
	      // get next character
	      buffer = input.charAt(idx++);
	      // character found in table? initialize bit storage and add its ascii value;
	      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	        // and if not first of each 4 characters,
	        // convert the first 8 bits to one ascii character
	        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
	    ) {
	      // try to find character in table (0-63, not found => -1)
	      buffer = chars.indexOf(buffer);
	    }
	    return output;
	  });

	}());


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var http = __webpack_require__(17);

	var https = module.exports;

	for (var key in http) {
	    if (http.hasOwnProperty(key)) https[key] = http[key];
	};

	https.request = function (params, cb) {
	    if (!params) params = {};
	    params.scheme = 'https';
	    return http.request.call(this, params, cb);
	}


/***/ },
/* 41 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 42 */
/***/ function(module, exports) {

	module.exports = {
	  /**
	   * Return a random element from an array of choices.
	   */
	  getRandomChoice: function(choices) {
	    return choices[Math.floor(Math.random() * choices.length)];
	  },


	  /**
	   * Get a circle's radius from its area.
	   */
	  getRadiusFromArea: function(area) {
	    return Math.sqrt(area / Math.PI);
	  },


	  /**
	   * Get GET parameters as a dictionary.
	   */
	  getSearchParams: function() {
	    var paramString = window.location.search.substr(1);
	    if (paramString != null && paramString != "") {
	      return transformToDictionary(paramString);
	    } else {
	      return {};
	    }
	  }
	};


	/***********
	 * Helpers *
	 ***********/

	function transformToDictionary(paramString) {
	  var paramArray = paramString.split("&");
	  var params = {};
	  for (var i = 0; i < paramArray.length; i++) {
	    var tuple = paramArray[i].split("=");
	    params[tuple[0]] = tuple[1];
	  }
	  return params;
	}


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(1);


	module.exports = {
	  /**
	   * Initialize the simulation form.
	   */
	  init: function() {
	    var select = $("#simulation-select");
	    var simulationType = $("#simulation-type");
	    var seatInput = $("#seats-input-wrapper");

	    toggleFormType(select, simulationType, seatInput);

	    select.on("change", function() {
	      toggleFormType(select, simulationType, seatInput);
	    });
	  }
	};


	/***********
	 * Helpers *
	 ***********/

	/**
	 * Toggle the value of simulationType and the visibility of seatInput.
	 */
	function toggleFormType(select, simulationType, seatInput) {
	  var type = select.find("option:checked").attr("data-type");

	  if (type === "input") {
	    seatInput.addClass("hidden");
	    simulationType.attr("value", "input");
	  } else {
	    seatInput.removeClass("hidden");
	    simulationType.attr("value", "test");
	  }
	}


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var constants = __webpack_require__(45);
	var model = __webpack_require__(46);
	var view = __webpack_require__(48);


	module.exports = {
	  /**
	   * Create luncheon from an input file.
	   */
	  initializeInputLuncheon: function(params) {
	    // Create empty Luncheon object
	    var luncheon = new model.Luncheon({
	      name: params.data.name,
	      numTablesX: params.data.numTablesX,
	      numTablesY: params.data.numTablesY
	    });

	    populateInputLuncheon(luncheon, params.data.tables);
	    return luncheon;
	  },


	  /**
	   * Create single-table luncheon with seats that are assigned based on
	   * rules (e.g. random, alternating, halves).
	   */
	  initializeTestLuncheon: function(params) {
	    var luncheon = new model.Luncheon({
	      name: params.simulation,
	      numTablesX: 2.2,
	      numTablesY: 1.4
	    });

	    var table = createTestTable(params.simulation, params.numSeats);
	    luncheon.addTable(table);
	    return luncheon;
	  },


	  /**
	   * Draw the luncheon initially
	   */
	  drawLuncheon: function(params) {
	    // Draw initial state
	    var canvas = view.drawSeats({
	      seats: params.luncheon.getAllSeats(),
	      numTablesX: params.luncheon.numTablesX,
	      numTablesY: params.luncheon.numTablesY,
	      showSpecies: params.showSpecies,
	      noText: params.noText
	    });

	    if (params.showStage) {
	      view.drawStage({
	        stageWidth: params.stageWidth,
	        stageHeight: params.stageHeight,
	        stageY: params.stageY
	      });
	    }

	    if (params.showStats) {
	      view.displayStats({repeat: params.repeat});
	    }

	    return canvas;
	  },


	  runGeneration: runGeneration,


	  /**
	   * Draw the logo for this project.
	   */
	  drawLogo: function(params) {
	    view.drawLogo();
	  },
	};


	/***********
	 * Helpers *
	 ***********/

	/**
	 * Do a generation of the simulation.
	 */
	function runGeneration(params) {
	  var reset;

	  if (params.luncheon.generation < params.numGenerations) {
	    params.luncheon.allSeatsInteract();
	    reset = false;

	  } else if (params.repeat) {
	    params.luncheon.reset();
	    reset = true;

	  } else {
	    return;
	  }

	  view.updateSeatRadii({
	    seats: params.luncheon.getAllSeats(),
	    canvas: params.canvas,
	    showStats: params.showStats,
	    trial: params.luncheon.trial,
	    generation: params.luncheon.generation,
	    callback: runGeneration,
	    callbackParams: params,
	    reset: reset,
	  });
	}


	/**
	 * Populate luncheon from JSON-format table information.
	 */
	function populateInputLuncheon(luncheon, jsonTables) {
	  // Per-person primary key
	  var pk = 0;

	  for (var i = 0; i < jsonTables.length; i++) {
	    var table = new model.Table(jsonTables[i]);
	    var jsonPeople = jsonTables[i].people;

	    for (var j = 0; j < jsonPeople.length; j++) {
	      table.insert({
	        pk: pk,
	        index: j,
	        name: jsonPeople[j].name,
	        group: jsonPeople[j].group || constants.Group.getRandom()
	      });

	      pk += 1;
	    }

	    luncheon.addTable(table);
	  }
	}


	/**
	 * Create table for test simulation.
	 */
	function createTestTable(simulation, numSeats) {
	  var table = new model.Table({
	    x: 0.5,
	    y: 0.5
	  });

	  var group;
	  for (var i = 0; i < numSeats; i++) {
	    if (simulation === "alternating2") {
	      group = [constants.Group.PACK, constants.Group.HERD][i % 2];

	    } else if (simulation === "alternating3") {
	      group = [constants.Group.PACK, constants.Group.HERD,
	               constants.Group.COLONY][i % 3];

	    } else if (simulation === "halves") {
	      if (i < (numSeats / 2)) {
	        group = constants.Group.PACK;
	      } else {
	        group = constants.Group.HERD;
	      }

	    } else {
	      group = constants.Group.getRandom();
	    }

	    table.insert({
	      pk: i,
	      index: i,
	      group: group,
	      name: constants.TEST_PERSON_NAMES[i] || "Person" + i
	    });
	  }

	  return table;
	}


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var utils = __webpack_require__(42);


	const INITIAL_POPULATION_SIZE = 1000;
	const OVERPOPULATION_FACTOR = 10;
	const OVERPOPULATION_SIZE = INITIAL_POPULATION_SIZE * OVERPOPULATION_FACTOR;
	const OVERPOPULATION_RADIUS = utils.getRadiusFromArea(OVERPOPULATION_SIZE);


	module.exports = {
	  // Model-related
	  GROWTH_RATE: 0.05,
	  COMPETITIVE_COIN_WEIGHT: 0.667,
	  INITIAL_POPULATION_SIZE: INITIAL_POPULATION_SIZE,
	  OVERPOPULATION_SIZE: OVERPOPULATION_SIZE,


	  // View-related
	  EASING_FXN: "linear",
	  TRANSITION_DURATION: 500,
	  BETWEEN_TRIAL_DELAY: 3000,
	  TABLE_SPACE_TO_RADIUS_FACTOR: 1/3,
	  CIRCLE_RADIANS: 2 * Math.PI,
	  OVERPOPULATION_RADIUS: OVERPOPULATION_RADIUS,


	  // For test simulation
	  TEST_PERSON_NAMES: [
	    'Alice', 'Bob', 'Carol', 'Django', 'Erlich', 'Freddy',
	    'Georgia', 'Heidi', 'Indigo', 'Jack'
	  ],


	  // Enums
	  Group: {
	    HERD: "HERD",
	    PACK: "PACK",
	    COLONY: "COLONY",

	    getRandom: function() {
	      return utils.getRandomChoice([this.PACK, this.HERD, this.COLONY]);
	    },

	    getRandomPackOrHerd: function() {
	      return utils.getRandomChoice([this.PACK, this.HERD]);
	    }
	  },

	  Species: {
	    HERD: "Wild Turkeys",
	    PACK: "Eastern Coyotes",
	    COLONY: "Eurasian Boars"
	  },

	  Coin: {
	    HEADS: "HEADS",
	    TAILS: "TAILS",

	    /**
	    Flip a coin.

	    Optionally pass in weight, where weight is the probability of flipping
	    Heads. Defaults to a fair coin.
	    */
	    flip: function(weight) {
	      if (weight === undefined) {
	        weight = 0.5;
	      }

	      var r = Math.random();
	      if (r < weight) {
	        return this.HEADS;
	      } else {
	        return this.TAILS;
	      }
	    }
	  }
	};


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var utils = __webpack_require__(42);
	var constants = __webpack_require__(45);
	var interactions = __webpack_require__(47);


	/**
	 * A luncheon, made up of Tables, to take part in the simulation.
	 */
	function Luncheon(params) {
	  this.name = params.name;
	  this.numTablesX = params.numTablesX;
	  this.numTablesY = params.numTablesY;
	  this.tables = [];

	  // Current trial and generation
	  this.trial = 0;
	  this.generation = 0;

	  /**
	   * Add a table to this luncheon.
	   */
	  this.addTable = function(table) {
	    this.tables.push(table);
	  };

	  /**
	   * Run a generation of the simulation.
	   *
	   * Optionally pass in the number of generations that it should run;
	   * defaults to 1.
	   */
	  this.allSeatsInteract = function(numGenerations) {
	    if (numGenerations === undefined) {
	      numGenerations = 1;
	    }

	    var i, j;
	    for (i = 0; i < numGenerations; i++) {
	      for (j = 0; j < this.tables.length; j++) {
	        this.tables[j].allSeatsInteract();
	      }
	      this.generation += 1;
	    }
	  };

	  /** Set all seats at this luncheon to initial population size. */
	  this.reset = function() {
	    for (var i = 0; i < this.tables.length; i++) {
	      this.tables[i].reset();
	    }

	    this.generation = 0;
	    this.trial += 1;
	  };

	  /** Get all seats at this luncheon. */
	  this.getAllSeats = function() {
	    var seats = [];
	    for (var i = 0; i < this.tables.length; i++) {
	      seats = seats.concat(this.tables[i].getAllSeats());
	    }
	    return seats;
	  }
	}


	/**
	 * A table to take part in the simulation.
	 *
	 * A table is a circlular doubly linked list of Seats.
	 */
	function Table(params) {
	  this.number = params.number || 0;
	  this.name = params.name || "Test";

	  // Relative position in space
	  this.x = params.x;
	  this.y = params.y;

	  if (this.x === undefined) {
	    this.x = 0.5;
	  }

	  if (this.y === undefined) {
	    this.y = 0.5;
	  }

	  // Table is initially empty
	  this.head = null;
	  this.seatCount = 0;

	  /**
	   * Insert a new seat at the head of this table.
	   */
	  this.insert = function(params) {
	    params.table = this;
	    newSeat = new Seat(params);

	    if (!this.head) {
	      newSeat.setNext(newSeat);
	      newSeat.setPrevious(newSeat);
	    } else {
	      // Create new pointers
	      newSeat.setPrevious(this.head);
	      newSeat.setNext(this.head.getNext());

	      // Update old pointers
	      newSeat.getNext().setPrevious(newSeat);
	      newSeat.getPrevious().setNext(newSeat);
	    }

	    this.head = newSeat;
	    this.seatCount += 1;
	  };

	  /**
	   * Get all seats at this table.
	   */
	  this.getAllSeats = function() {
	    var seats = [];

	    if (!this.head) {
	      return seats;
	    }

	    seats.push(this.head);

	    var current = this.head.getNext()
	    while (current != this.head) {
	      seats.push(current);
	      current = current.getNext();
	    }

	    return seats;
	  };

	  // TODO: consider having the three functions below not call getAllSeats()

	  /**
	   * Have all seats at this table interact for numGenerations.
	   */
	  this.allSeatsInteract = function(numGenerations) {
	    if (numGenerations === undefined) {
	      numGenerations = 1;
	    }

	    var seats = this.getAllSeats();

	    var i, j;
	    for (i = 0; i < numGenerations; i++) {
	      for (j = 0; j < seats.length; j++) {
	        seats[j].interactWithNextInteractor();
	      }
	    }
	  };

	  /** Set all seats at this table to initial population size. */
	  this.reset = function() {
	    var seats = this.getAllSeats();

	    for (var i = 0; i < seats.length; i++) {
	      seats[i].reset();
	    }
	  };
	}


	/**
	 * A Seat at a Table.
	 *
	 * Each seat can be assigned a group (Pack, Herd, Colony) and a
	 * population size.
	 *
	 * A seat is connected to both adjacent seats, in circular doubly-linked
	 * list fashion.
	 */
	function Seat(params) {
	  // TODO: firstName and shortSpecies maybe can use "this"
	  this.pk = params.pk;  // Unique identifier across tables
	  this.index = params.index;  // Position within the table
	  this.name = params.name;
	  this.firstName = params.name ? params.name.split(/\s+/)[0] : "";
	  this.group = params.group;
	  this.species = constants.Species[params.group];
	  this.shortSpecies = constants.Species[params.group].split(/\s+/)[1];
	  this.populationSize = constants.INITIAL_POPULATION_SIZE;
	  this.table = params.table;
	  this.nextSeat = params.nextSeat;
	  this.previousSeat = params.previousSeat;

	  /** Get the next adjacent seat. */
	  this.getNext = function() {
	    return this.nextSeat;
	  };

	  /** Get the previous adjacent seat. */
	  this.getPrevious = function() {
	    return this.previousSeat;
	  };

	  /** Set the next adjacent seat. */
	  this.setNext = function(other) {
	    this.nextSeat = other;
	  };

	  /** Set the previous adjacent seat. */
	  this.setPrevious = function(other) {
	    this.previousSeat = other;
	  };

	  /** Determine if this seat is a herd. */
	  this.isHerd = function() {
	    return this.group === constants.Group.HERD;
	  };

	  /** Determine if this seat is a pack. */
	  this.isPack = function() {
	    return this.group === constants.Group.PACK;
	  };

	  /** Determine if this seat is a colony. */
	  this.isColony = function() {
	    return this.group === constants.Group.COLONY;
	  };

	  /**
	   * If this seat is a colony, change it randomly to a pack or herd.
	   *
	   * Returns true if this seat was initially a colony (now changed to
	   * pack or herd).
	   *
	   * Returns false if this seat was not initally a colony (unchanged).
	   */
	  this.changeGroupIfColony = function() {
	    if (!this.isColony()) {
	      return false;
	    }

	    this.group = utils.getRandomChoice([
	      constants.Group.PACK,
	      constants.Group.HERD
	    ]);

	    return true;
	  };

	  /**
	   * Set this seat's group to colony.
	   *
	   * Use this to restore a seat after calling changeGroupIfColony().
	   */
	  this.setToColony = function() {
	    this.group = constants.Group.COLONY;
	  };

	  /** Increase this seat's population size by growthRate. */
	  this.increasePopulation = function(growthRate) {
	    change = Math.round(this.populationSize * growthRate);
	    this.populationSize += change;

	    // Extinction from overpopulation
	    if (this.populationSize >= constants.OVERPOPULATION_SIZE) {
	      this.populationSize = 0;
	    }
	  };

	  /** Decrease this seat's population size by growthRate. */
	  this.decreasePopulation = function(growthRate) {
	    change = Math.round(this.populationSize * growthRate);
	    this.populationSize -= change;

	    // Extinction if no further decline is not possible
	    if (Math.round(this.populationSize * growthRate) === 0) {
	      this.populationSize = 0;
	    }
	  };

	  /** Determine if this seat has become extinct. */
	  this.isExtinct = function() {
	    return this.populationSize === 0;
	  };

	  /**
	   * Get the next interactor for this seat.
	   *
	   * Returns null if this seat is extinct, or if this seat is the only
	   * node left.
	   */
	  this.getNextInteractor = function() {
	    if (this.isExtinct()) {
	      return null;
	    }

	    interactor = this.getNext();
	    while (interactor.isExtinct()) {
	      interactor = interactor.getNext();
	    }

	    /*
	    // Enable this to freeze "last man standing"
	    if (this === interactor) {
	      return null;
	    }
	    */

	    return interactor;
	  };

	  /** Interact with the next defined interactor. */
	  this.interactWithNextInteractor = function() {
	    interactor = this.getNextInteractor();
	    if (interactor) {
	      interactions.interact(this, interactor);
	    }
	  };

	  /** Reset this seat to its initial population size. */
	  this.reset = function() {
	    this.populationSize = constants.INITIAL_POPULATION_SIZE;
	  };
	}


	module.exports = {
	  Luncheon: Luncheon,
	  Table: Table
	};


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var constants = __webpack_require__(45);


	module.exports = {
	  /**
	   * Have seat x and seat y interact.
	   *
	   * For each colony engaged in an interaction (x, y, or both),
	   * the colony is temporarily changed to a herd or pack,
	   * based on the outcome of a fair coin flip.
	   *
	   * From there, the type of interaction depends on the types of x and y
	   * (the cases include two herds, two packs, one of each).
	   */
	  interact: function(x, y) {
	    // If x or y is a colony, set temporarily to a pack or herd
	    xWasColony = x.changeGroupIfColony();
	    yWasColony = y.changeGroupIfColony();

	    // Now the interaction falls into 4 cases
	    if (x.isHerd() && y.isHerd()) {
	      x.increasePopulation(constants.GROWTH_RATE);
	      y.increasePopulation(constants.GROWTH_RATE);
	    } else if (x.isPack() && y.isPack()) {
	      x.decreasePopulation(constants.GROWTH_RATE);
	      y.decreasePopulation(constants.GROWTH_RATE);
	    } else if (x.isPack()) {
	      compete(pack=x, herd=y);
	    } else {
	      compete(pack=y, herd=x);
	    }

	    // Restore colonies
	    if (xWasColony) {
	      x.setToColony();
	    }

	    if (yWasColony) {
	      y.setToColony();
	    }
	  }
	};


	/***********
	 * Helpers *
	 ***********/

	/**
	 * Have a pack and a herd compete.
	 *
	 * A competition involves a coin flip weighted in favor of the predator,
	 * followed by population increase for the winner and population decline
	 * for the loser.
	 */
	function compete(pack, herd) {
	  f = constants.Coin.flip(constants.COMPETITIVE_COIN_WEIGHT);

	  if (f === constants.Coin.HEADS) {
	    pack.increasePopulation(constants.GROWTH_RATE * 2);
	    herd.decreasePopulation(constants.GROWTH_RATE * 2);
	  } else {
	    pack.decreasePopulation(constants.GROWTH_RATE);
	    herd.increasePopulation(constants.GROWTH_RATE);
	  }
	}


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(1);
	var fabric = __webpack_require__(2);
	var d3 = __webpack_require__(49);
	var utils = __webpack_require__(42);
	var constants = __webpack_require__(45);


	module.exports = {
	  /**
	   * Draw all seats.
	   *
	   * Call this to draw the initial state of the simulation.
	   */
	  drawSeats: function(params) {
	    // Make certain canvas-wide calculations
	    doCanvasWideCalculations(params.numTablesX, params.numTablesY,
	                          params.seats);

	    var canvas = new fabric.fabric.Canvas("simulation-canvas");

	    // Add the circle elements
	    addCircles(canvas, params.seats);

	    // Add the text elements
	    if (!params.noText) {
	      addText(canvas, params.seats, params.showSpecies);
	    }

	    return canvas;
	  },


	  /**
	   * Draw the stage.
	   */
	  drawStage: function(params) {
	    var canvas = $("#simulation-canvas");
	    var canvasWidth = canvas.width();
	    var canvasHeight = canvas.height();

	    var rect = new fabric.fabric.Rect({
	      top: canvasWidth * (0.5 - params.stageWidth / 2),
	      left: canvasHeight * params.stageY,
	      width: canvasWidth * params.stageWidth,
	      height: canvasHeight * params.stageHeight
	    });

	    canvas.add(rect);

	    var text = new fabric.fabric.Text("STAGE", {
	      top: canvasWidth * -.5,
	      left: canvasHeight * (params.stageY + params.stageHeight / 2),
	      originX: "center",
	      originY: "center",
	      fontSize: 10,
	      fontFamily: "Helvetica Neue"
	    });

	    canvas.add(text);
	  },


	  /**
	   * Make the "stats" visible.
	   *
	   * The stats are the generation/trial counters and the home nav.
	   * The reason we wanted to be able to control their visibility is
	   * to remove them when making screen capture videos.
	   */
	  displayStats: function(params) {
	    $("#stats").show();

	    if (params.repeat) {
	      $("#trial-counter").show();
	    }
	  },


	  /**
	   * Update seat radii.
	   */
	  updateSeatRadii: function(params) {
	    var duration, delay;

	    if (params.reset) {
	      duration = 0;
	      delay = constants.BETWEEN_TRIAL_DELAY;
	    } else {
	      duration = constants.TRANSITION_DURATION;
	      delay = 0;
	    }

	    var circle, seat, pk;
	    for (var i = 0; i < params.seats.length; i++) {
	      seat = params.seats[i];

	      if (seat.pk != 0) {
	        seat.circle.animate('radius', getRadius(seat), {
	          duration: 500
	        });
	      } else {
	        seat.circle.animate('radius', getRadius(seat), {
	          duration: 500,
	          // easing: fabric.fabric.util.ease.easeInCubic,
	          easing: function(t, b, c, d) {return c*t/d + b;},
	          onChange: params.canvas.renderAll.bind(params.canvas),
	          onComplete: function() {
	            if (params.showStats) {
	              updateCounters(params.generation, params.reset, params.trial);
	            }

	            params.callback(params.callbackParams);
	          }
	        });
	      }
	    }
	  },


	  /**
	   * Draw a large version of the logo for this project.
	   */
	  drawLogo: function() {
	    const OFFSET = 20;
	    const SCALE = 40;

	    function favAdjust(coord) {
	      return OFFSET + (coord * SCALE);
	    }

	    var svg = d3.select("#logo-svg");
	    svg.selectAll("circle")
	      .data([
	        {group: "HERD", x: favAdjust(1/2), y: favAdjust(0)},
	        {group: "PACK", x: favAdjust(0), y: favAdjust(Math.sqrt(3)/2)},
	        {group: "COLONY", x: favAdjust(1), y: favAdjust(Math.sqrt(3)/2)}
	      ])
	      .enter()
	      .append("circle")
	      .each(function(d, i) {
	        d3.select(this)
	          .attr("cx", d.x)
	          .attr("cy", d.y)
	          .attr("r", 20)
	          .classed(d.group, true);
	      });
	  }
	};


	/***********
	 * Helpers *
	 ***********/

	/**
	 * Process SVG-wide stuff, including setting the height, calculating
	 * the size of tables, and binding all this information to all seats.
	 */
	function doCanvasWideCalculations(numTablesX, numTablesY, seats) {
	  // Set svg height based on width
	  var canvas = $("#simulation-canvas");
	  var canvasWidth = canvas.width();
	  var hwRatio = numTablesY / numTablesX;
	  var canvasHeight = canvasWidth * hwRatio;
	  canvas.height(canvasHeight);

	  // Calculate the space each table can take up in both x and y dimensions
	  var tableSpace = canvasWidth / numTablesX;
	  var tableRadius = tableSpace * constants.TABLE_SPACE_TO_RADIUS_FACTOR;

	  // Add these extra attributes to the seats for convenience later on
	  for (var i = 0; i < seats.length; i++) {
	    seat = seats[i];
	    seat.canvasWidth = canvasWidth;
	    seat.canvasHeight = canvasHeight;
	    seat.tableSpace = tableSpace;
	    seat.tableRadius = tableRadius;
	  }
	}


	/**
	 * Add circles representing seats to svg.
	 */
	function addCircles(canvas, seats) {
	  var seat, coords, radius, circle;

	  for (var i = 0; i < seats.length; i++) {
	    seat = seats[i];
	    coords = getCoordinates(seat);

	    circle = new fabric.fabric.Circle({
	      top: coords[1],
	      left: coords[0],
	      originX: "center",
	      originY: "center",
	      radius: getRadius(seat),
	      fill: getColor(seat),
	      opacity: 0.5
	    });

	    canvas.add(circle);
	    seat.circle = circle;
	  }
	}


	/**
	 * Add text elements for seats to the svg.
	 *
	 * If showSpecies=true, show species name; otherwise, show first name.
	 */
	function addText(canvas, seats, showSpecies) {
	  var seat, coords, radius, text;
	  for (var i = 0; i < seats.length; i++) {
	    seat = seats[i];
	    coords = getCoordinates(seat);
	    text = showSpecies ? seat.shortSpecies : seat.firstName;

	    text = new fabric.fabric.Text(text, {
	      top: coords[1],
	      left: coords[0],
	      originX: "center",
	      originY: "center",
	      fontSize: 10,
	      fontFamily: "Helvetica Neue"
	    });
	    canvas.add(text);
	  }
	}


	/**
	 * Calculate the coordinates of a seat.
	 */
	function getCoordinates(seat) {
	  var step = constants.CIRCLE_RADIANS / seat.table.seatCount;
	  var angle = seat.index * step;

	  // Skew angle slightly so that tables with an even number of seats
	  // don't have horizontally-aligned seats at the top and bottom
	  // of the circle (better since text runs horizontally)
	  angle = (angle + (step / 2)) % constants.CIRCLE_RADIANS;

	  // Table coordinates, shifted such that relative table positions
	  // 0 and 1 are moved a half-table inward from the svg edges.
	  var tableX = (seat.table.x * (seat.canvasWidth - seat.tableSpace)) +
	               (seat.tableSpace / 2);
	  var tableY = (seat.table.y * (seat.canvasHeight - seat.tableSpace)) +
	               (seat.tableSpace / 2);

	  // Seat coordinates now just trigonometry
	  var seatX = tableX + (seat.tableRadius * Math.cos(angle));
	  var seatY = tableY + (seat.tableRadius * Math.sin(angle));

	  return [seatX, seatY];
	}


	/**
	 * Calculate the radius of a seat based on its current population size.
	 */
	function getRadius(seat) {
	  var current = utils.getRadiusFromArea(seat.populationSize);
	  var max = constants.OVERPOPULATION_RADIUS;
	  var relative = current / max;

	  // Allow seats to get as big as the table at their largest
	  return relative * seat.tableRadius;
	}


	/**
	 * Get the color for a seat based on its group.
	 */
	function getColor(seat) {
	  var group = seat.group;
	  if (group === "HERD") {
	    return "green";
	  } else if (group === "PACK") {
	    return "red";
	  } else if (group === "COLONY") {
	    return "blue";
	  } else {
	    return "black";
	  }
	}


	/**
	 * Update the trial and generation counters.
	 */
	function updateCounters(generation, reset, trial) {
	  $("#generation-counter").text("Generation " + generation);

	  if (reset) {
	    $("#trial-counter").text("Trial " + trial);
	  }
	}


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
	  var d3 = {
	    version: "3.5.17"
	  };
	  var d3_arraySlice = [].slice, d3_array = function(list) {
	    return d3_arraySlice.call(list);
	  };
	  var d3_document = this.document;
	  function d3_documentElement(node) {
	    return node && (node.ownerDocument || node.document || node).documentElement;
	  }
	  function d3_window(node) {
	    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
	  }
	  if (d3_document) {
	    try {
	      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
	    } catch (e) {
	      d3_array = function(list) {
	        var i = list.length, array = new Array(i);
	        while (i--) array[i] = list[i];
	        return array;
	      };
	    }
	  }
	  if (!Date.now) Date.now = function() {
	    return +new Date();
	  };
	  if (d3_document) {
	    try {
	      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
	    } catch (error) {
	      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
	      d3_element_prototype.setAttribute = function(name, value) {
	        d3_element_setAttribute.call(this, name, value + "");
	      };
	      d3_element_prototype.setAttributeNS = function(space, local, value) {
	        d3_element_setAttributeNS.call(this, space, local, value + "");
	      };
	      d3_style_prototype.setProperty = function(name, value, priority) {
	        d3_style_setProperty.call(this, name, value + "", priority);
	      };
	    }
	  }
	  d3.ascending = d3_ascending;
	  function d3_ascending(a, b) {
	    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	  }
	  d3.descending = function(a, b) {
	    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	  };
	  d3.min = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
	    }
	    return a;
	  };
	  d3.max = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
	    }
	    return a;
	  };
	  d3.extent = function(array, f) {
	    var i = -1, n = array.length, a, b, c;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    }
	    return [ a, c ];
	  };
	  function d3_number(x) {
	    return x === null ? NaN : +x;
	  }
	  function d3_numeric(x) {
	    return !isNaN(x);
	  }
	  d3.sum = function(array, f) {
	    var s = 0, n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
	    } else {
	      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
	    }
	    return s;
	  };
	  d3.mean = function(array, f) {
	    var s = 0, n = array.length, a, i = -1, j = n;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
	    }
	    if (j) return s / j;
	  };
	  d3.quantile = function(values, p) {
	    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
	    return e ? v + e * (values[h] - v) : v;
	  };
	  d3.median = function(array, f) {
	    var numbers = [], n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
	    }
	    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
	  };
	  d3.variance = function(array, f) {
	    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
	    if (arguments.length === 1) {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(array[i]))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    } else {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    }
	    if (j > 1) return s / (j - 1);
	  };
	  d3.deviation = function() {
	    var v = d3.variance.apply(this, arguments);
	    return v ? Math.sqrt(v) : v;
	  };
	  function d3_bisector(compare) {
	    return {
	      left: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
	        }
	        return lo;
	      },
	      right: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
	        }
	        return lo;
	      }
	    };
	  }
	  var d3_bisect = d3_bisector(d3_ascending);
	  d3.bisectLeft = d3_bisect.left;
	  d3.bisect = d3.bisectRight = d3_bisect.right;
	  d3.bisector = function(f) {
	    return d3_bisector(f.length === 1 ? function(d, x) {
	      return d3_ascending(f(d), x);
	    } : f);
	  };
	  d3.shuffle = function(array, i0, i1) {
	    if ((m = arguments.length) < 3) {
	      i1 = array.length;
	      if (m < 2) i0 = 0;
	    }
	    var m = i1 - i0, t, i;
	    while (m) {
	      i = Math.random() * m-- | 0;
	      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
	    }
	    return array;
	  };
	  d3.permute = function(array, indexes) {
	    var i = indexes.length, permutes = new Array(i);
	    while (i--) permutes[i] = array[indexes[i]];
	    return permutes;
	  };
	  d3.pairs = function(array) {
	    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
	    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
	    return pairs;
	  };
	  d3.transpose = function(matrix) {
	    if (!(n = matrix.length)) return [];
	    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
	      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
	        row[j] = matrix[j][i];
	      }
	    }
	    return transpose;
	  };
	  function d3_transposeLength(d) {
	    return d.length;
	  }
	  d3.zip = function() {
	    return d3.transpose(arguments);
	  };
	  d3.keys = function(map) {
	    var keys = [];
	    for (var key in map) keys.push(key);
	    return keys;
	  };
	  d3.values = function(map) {
	    var values = [];
	    for (var key in map) values.push(map[key]);
	    return values;
	  };
	  d3.entries = function(map) {
	    var entries = [];
	    for (var key in map) entries.push({
	      key: key,
	      value: map[key]
	    });
	    return entries;
	  };
	  d3.merge = function(arrays) {
	    var n = arrays.length, m, i = -1, j = 0, merged, array;
	    while (++i < n) j += arrays[i].length;
	    merged = new Array(j);
	    while (--n >= 0) {
	      array = arrays[n];
	      m = array.length;
	      while (--m >= 0) {
	        merged[--j] = array[m];
	      }
	    }
	    return merged;
	  };
	  var abs = Math.abs;
	  d3.range = function(start, stop, step) {
	    if (arguments.length < 3) {
	      step = 1;
	      if (arguments.length < 2) {
	        stop = start;
	        start = 0;
	      }
	    }
	    if ((stop - start) / step === Infinity) throw new Error("infinite range");
	    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
	    start *= k, stop *= k, step *= k;
	    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
	    return range;
	  };
	  function d3_range_integerScale(x) {
	    var k = 1;
	    while (x * k % 1) k *= 10;
	    return k;
	  }
	  function d3_class(ctor, properties) {
	    for (var key in properties) {
	      Object.defineProperty(ctor.prototype, key, {
	        value: properties[key],
	        enumerable: false
	      });
	    }
	  }
	  d3.map = function(object, f) {
	    var map = new d3_Map();
	    if (object instanceof d3_Map) {
	      object.forEach(function(key, value) {
	        map.set(key, value);
	      });
	    } else if (Array.isArray(object)) {
	      var i = -1, n = object.length, o;
	      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
	    } else {
	      for (var key in object) map.set(key, object[key]);
	    }
	    return map;
	  };
	  function d3_Map() {
	    this._ = Object.create(null);
	  }
	  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
	  d3_class(d3_Map, {
	    has: d3_map_has,
	    get: function(key) {
	      return this._[d3_map_escape(key)];
	    },
	    set: function(key, value) {
	      return this._[d3_map_escape(key)] = value;
	    },
	    remove: d3_map_remove,
	    keys: d3_map_keys,
	    values: function() {
	      var values = [];
	      for (var key in this._) values.push(this._[key]);
	      return values;
	    },
	    entries: function() {
	      var entries = [];
	      for (var key in this._) entries.push({
	        key: d3_map_unescape(key),
	        value: this._[key]
	      });
	      return entries;
	    },
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
	    }
	  });
	  function d3_map_escape(key) {
	    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
	  }
	  function d3_map_unescape(key) {
	    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
	  }
	  function d3_map_has(key) {
	    return d3_map_escape(key) in this._;
	  }
	  function d3_map_remove(key) {
	    return (key = d3_map_escape(key)) in this._ && delete this._[key];
	  }
	  function d3_map_keys() {
	    var keys = [];
	    for (var key in this._) keys.push(d3_map_unescape(key));
	    return keys;
	  }
	  function d3_map_size() {
	    var size = 0;
	    for (var key in this._) ++size;
	    return size;
	  }
	  function d3_map_empty() {
	    for (var key in this._) return false;
	    return true;
	  }
	  d3.nest = function() {
	    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
	    function map(mapType, array, depth) {
	      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
	      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
	      while (++i < n) {
	        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
	          values.push(object);
	        } else {
	          valuesByKey.set(keyValue, [ object ]);
	        }
	      }
	      if (mapType) {
	        object = mapType();
	        setter = function(keyValue, values) {
	          object.set(keyValue, map(mapType, values, depth));
	        };
	      } else {
	        object = {};
	        setter = function(keyValue, values) {
	          object[keyValue] = map(mapType, values, depth);
	        };
	      }
	      valuesByKey.forEach(setter);
	      return object;
	    }
	    function entries(map, depth) {
	      if (depth >= keys.length) return map;
	      var array = [], sortKey = sortKeys[depth++];
	      map.forEach(function(key, keyMap) {
	        array.push({
	          key: key,
	          values: entries(keyMap, depth)
	        });
	      });
	      return sortKey ? array.sort(function(a, b) {
	        return sortKey(a.key, b.key);
	      }) : array;
	    }
	    nest.map = function(array, mapType) {
	      return map(mapType, array, 0);
	    };
	    nest.entries = function(array) {
	      return entries(map(d3.map, array, 0), 0);
	    };
	    nest.key = function(d) {
	      keys.push(d);
	      return nest;
	    };
	    nest.sortKeys = function(order) {
	      sortKeys[keys.length - 1] = order;
	      return nest;
	    };
	    nest.sortValues = function(order) {
	      sortValues = order;
	      return nest;
	    };
	    nest.rollup = function(f) {
	      rollup = f;
	      return nest;
	    };
	    return nest;
	  };
	  d3.set = function(array) {
	    var set = new d3_Set();
	    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
	    return set;
	  };
	  function d3_Set() {
	    this._ = Object.create(null);
	  }
	  d3_class(d3_Set, {
	    has: d3_map_has,
	    add: function(key) {
	      this._[d3_map_escape(key += "")] = true;
	      return key;
	    },
	    remove: d3_map_remove,
	    values: d3_map_keys,
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key));
	    }
	  });
	  d3.behavior = {};
	  function d3_identity(d) {
	    return d;
	  }
	  d3.rebind = function(target, source) {
	    var i = 1, n = arguments.length, method;
	    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
	    return target;
	  };
	  function d3_rebind(target, source, method) {
	    return function() {
	      var value = method.apply(source, arguments);
	      return value === source ? target : value;
	    };
	  }
	  function d3_vendorSymbol(object, name) {
	    if (name in object) return name;
	    name = name.charAt(0).toUpperCase() + name.slice(1);
	    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
	      var prefixName = d3_vendorPrefixes[i] + name;
	      if (prefixName in object) return prefixName;
	    }
	  }
	  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
	  function d3_noop() {}
	  d3.dispatch = function() {
	    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    return dispatch;
	  };
	  function d3_dispatch() {}
	  d3_dispatch.prototype.on = function(type, listener) {
	    var i = type.indexOf("."), name = "";
	    if (i >= 0) {
	      name = type.slice(i + 1);
	      type = type.slice(0, i);
	    }
	    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
	    if (arguments.length === 2) {
	      if (listener == null) for (type in this) {
	        if (this.hasOwnProperty(type)) this[type].on(name, null);
	      }
	      return this;
	    }
	  };
	  function d3_dispatch_event(dispatch) {
	    var listeners = [], listenerByName = new d3_Map();
	    function event() {
	      var z = listeners, i = -1, n = z.length, l;
	      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
	      return dispatch;
	    }
	    event.on = function(name, listener) {
	      var l = listenerByName.get(name), i;
	      if (arguments.length < 2) return l && l.on;
	      if (l) {
	        l.on = null;
	        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
	        listenerByName.remove(name);
	      }
	      if (listener) listeners.push(listenerByName.set(name, {
	        on: listener
	      }));
	      return dispatch;
	    };
	    return event;
	  }
	  d3.event = null;
	  function d3_eventPreventDefault() {
	    d3.event.preventDefault();
	  }
	  function d3_eventSource() {
	    var e = d3.event, s;
	    while (s = e.sourceEvent) e = s;
	    return e;
	  }
	  function d3_eventDispatch(target) {
	    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    dispatch.of = function(thiz, argumentz) {
	      return function(e1) {
	        try {
	          var e0 = e1.sourceEvent = d3.event;
	          e1.target = target;
	          d3.event = e1;
	          dispatch[e1.type].apply(thiz, argumentz);
	        } finally {
	          d3.event = e0;
	        }
	      };
	    };
	    return dispatch;
	  }
	  d3.requote = function(s) {
	    return s.replace(d3_requote_re, "\\$&");
	  };
	  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	  var d3_subclass = {}.__proto__ ? function(object, prototype) {
	    object.__proto__ = prototype;
	  } : function(object, prototype) {
	    for (var property in prototype) object[property] = prototype[property];
	  };
	  function d3_selection(groups) {
	    d3_subclass(groups, d3_selectionPrototype);
	    return groups;
	  }
	  var d3_select = function(s, n) {
	    return n.querySelector(s);
	  }, d3_selectAll = function(s, n) {
	    return n.querySelectorAll(s);
	  }, d3_selectMatches = function(n, s) {
	    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
	    d3_selectMatches = function(n, s) {
	      return d3_selectMatcher.call(n, s);
	    };
	    return d3_selectMatches(n, s);
	  };
	  if (typeof Sizzle === "function") {
	    d3_select = function(s, n) {
	      return Sizzle(s, n)[0] || null;
	    };
	    d3_selectAll = Sizzle;
	    d3_selectMatches = Sizzle.matchesSelector;
	  }
	  d3.selection = function() {
	    return d3.select(d3_document.documentElement);
	  };
	  var d3_selectionPrototype = d3.selection.prototype = [];
	  d3_selectionPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, group, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
	          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selector(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_select(selector, this);
	    };
	  }
	  d3_selectionPrototype.selectAll = function(selector) {
	    var subgroups = [], subgroup, node;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
	          subgroup.parentNode = node;
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selectorAll(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_selectAll(selector, this);
	    };
	  }
	  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
	  var d3_nsPrefix = {
	    svg: "http://www.w3.org/2000/svg",
	    xhtml: d3_nsXhtml,
	    xlink: "http://www.w3.org/1999/xlink",
	    xml: "http://www.w3.org/XML/1998/namespace",
	    xmlns: "http://www.w3.org/2000/xmlns/"
	  };
	  d3.ns = {
	    prefix: d3_nsPrefix,
	    qualify: function(name) {
	      var i = name.indexOf(":"), prefix = name;
	      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	      return d3_nsPrefix.hasOwnProperty(prefix) ? {
	        space: d3_nsPrefix[prefix],
	        local: name
	      } : name;
	    }
	  };
	  d3_selectionPrototype.attr = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node();
	        name = d3.ns.qualify(name);
	        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
	      }
	      for (value in name) this.each(d3_selection_attr(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_attr(name, value));
	  };
	  function d3_selection_attr(name, value) {
	    name = d3.ns.qualify(name);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrConstant() {
	      this.setAttribute(name, value);
	    }
	    function attrConstantNS() {
	      this.setAttributeNS(name.space, name.local, value);
	    }
	    function attrFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
	    }
	    function attrFunctionNS() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
	    }
	    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
	  }
	  function d3_collapse(s) {
	    return s.trim().replace(/\s+/g, " ");
	  }
	  d3_selectionPrototype.classed = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
	        if (value = node.classList) {
	          while (++i < n) if (!value.contains(name[i])) return false;
	        } else {
	          value = node.getAttribute("class");
	          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
	        }
	        return true;
	      }
	      for (value in name) this.each(d3_selection_classed(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_classed(name, value));
	  };
	  function d3_selection_classedRe(name) {
	    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
	  }
	  function d3_selection_classes(name) {
	    return (name + "").trim().split(/^|\s+/);
	  }
	  function d3_selection_classed(name, value) {
	    name = d3_selection_classes(name).map(d3_selection_classedName);
	    var n = name.length;
	    function classedConstant() {
	      var i = -1;
	      while (++i < n) name[i](this, value);
	    }
	    function classedFunction() {
	      var i = -1, x = value.apply(this, arguments);
	      while (++i < n) name[i](this, x);
	    }
	    return typeof value === "function" ? classedFunction : classedConstant;
	  }
	  function d3_selection_classedName(name) {
	    var re = d3_selection_classedRe(name);
	    return function(node, value) {
	      if (c = node.classList) return value ? c.add(name) : c.remove(name);
	      var c = node.getAttribute("class") || "";
	      if (value) {
	        re.lastIndex = 0;
	        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
	      } else {
	        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
	      }
	    };
	  }
	  d3_selectionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
	        return this;
	      }
	      if (n < 2) {
	        var node = this.node();
	        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
	      }
	      priority = "";
	    }
	    return this.each(d3_selection_style(name, value, priority));
	  };
	  function d3_selection_style(name, value, priority) {
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleConstant() {
	      this.style.setProperty(name, value, priority);
	    }
	    function styleFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
	    }
	    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
	  }
	  d3_selectionPrototype.property = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") return this.node()[name];
	      for (value in name) this.each(d3_selection_property(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_property(name, value));
	  };
	  function d3_selection_property(name, value) {
	    function propertyNull() {
	      delete this[name];
	    }
	    function propertyConstant() {
	      this[name] = value;
	    }
	    function propertyFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) delete this[name]; else this[name] = x;
	    }
	    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
	  }
	  d3_selectionPrototype.text = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.textContent = v == null ? "" : v;
	    } : value == null ? function() {
	      this.textContent = "";
	    } : function() {
	      this.textContent = value;
	    }) : this.node().textContent;
	  };
	  d3_selectionPrototype.html = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.innerHTML = v == null ? "" : v;
	    } : value == null ? function() {
	      this.innerHTML = "";
	    } : function() {
	      this.innerHTML = value;
	    }) : this.node().innerHTML;
	  };
	  d3_selectionPrototype.append = function(name) {
	    name = d3_selection_creator(name);
	    return this.select(function() {
	      return this.appendChild(name.apply(this, arguments));
	    });
	  };
	  function d3_selection_creator(name) {
	    function create() {
	      var document = this.ownerDocument, namespace = this.namespaceURI;
	      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
	    }
	    function createNS() {
	      return this.ownerDocument.createElementNS(name.space, name.local);
	    }
	    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
	  }
	  d3_selectionPrototype.insert = function(name, before) {
	    name = d3_selection_creator(name);
	    before = d3_selection_selector(before);
	    return this.select(function() {
	      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
	    });
	  };
	  d3_selectionPrototype.remove = function() {
	    return this.each(d3_selectionRemove);
	  };
	  function d3_selectionRemove() {
	    var parent = this.parentNode;
	    if (parent) parent.removeChild(this);
	  }
	  d3_selectionPrototype.data = function(value, key) {
	    var i = -1, n = this.length, group, node;
	    if (!arguments.length) {
	      value = new Array(n = (group = this[0]).length);
	      while (++i < n) {
	        if (node = group[i]) {
	          value[i] = node.__data__;
	        }
	      }
	      return value;
	    }
	    function bind(group, groupData) {
	      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
	      if (key) {
	        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
	        for (i = -1; ++i < n; ) {
	          if (node = group[i]) {
	            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
	              exitNodes[i] = node;
	            } else {
	              nodeByKeyValue.set(keyValue, node);
	            }
	            keyValues[i] = keyValue;
	          }
	        }
	        for (i = -1; ++i < m; ) {
	          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          } else if (node !== true) {
	            updateNodes[i] = node;
	            node.__data__ = nodeData;
	          }
	          nodeByKeyValue.set(keyValue, true);
	        }
	        for (i = -1; ++i < n; ) {
	          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
	            exitNodes[i] = group[i];
	          }
	        }
	      } else {
	        for (i = -1; ++i < n0; ) {
	          node = group[i];
	          nodeData = groupData[i];
	          if (node) {
	            node.__data__ = nodeData;
	            updateNodes[i] = node;
	          } else {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          }
	        }
	        for (;i < m; ++i) {
	          enterNodes[i] = d3_selection_dataNode(groupData[i]);
	        }
	        for (;i < n; ++i) {
	          exitNodes[i] = group[i];
	        }
	      }
	      enterNodes.update = updateNodes;
	      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
	      enter.push(enterNodes);
	      update.push(updateNodes);
	      exit.push(exitNodes);
	    }
	    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
	    if (typeof value === "function") {
	      while (++i < n) {
	        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
	      }
	    } else {
	      while (++i < n) {
	        bind(group = this[i], value);
	      }
	    }
	    update.enter = function() {
	      return enter;
	    };
	    update.exit = function() {
	      return exit;
	    };
	    return update;
	  };
	  function d3_selection_dataNode(data) {
	    return {
	      __data__: data
	    };
	  }
	  d3_selectionPrototype.datum = function(value) {
	    return arguments.length ? this.property("__data__", value) : this.property("__data__");
	  };
	  d3_selectionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_filter(selector) {
	    return function() {
	      return d3_selectMatches(this, selector);
	    };
	  }
	  d3_selectionPrototype.order = function() {
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
	        if (node = group[i]) {
	          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	          next = node;
	        }
	      }
	    }
	    return this;
	  };
	  d3_selectionPrototype.sort = function(comparator) {
	    comparator = d3_selection_sortComparator.apply(this, arguments);
	    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
	    return this.order();
	  };
	  function d3_selection_sortComparator(comparator) {
	    if (!arguments.length) comparator = d3_ascending;
	    return function(a, b) {
	      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
	    };
	  }
	  d3_selectionPrototype.each = function(callback) {
	    return d3_selection_each(this, function(node, i, j) {
	      callback.call(node, node.__data__, i, j);
	    });
	  };
	  function d3_selection_each(groups, callback) {
	    for (var j = 0, m = groups.length; j < m; j++) {
	      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
	        if (node = group[i]) callback(node, i, j);
	      }
	    }
	    return groups;
	  }
	  d3_selectionPrototype.call = function(callback) {
	    var args = d3_array(arguments);
	    callback.apply(args[0] = this, args);
	    return this;
	  };
	  d3_selectionPrototype.empty = function() {
	    return !this.node();
	  };
	  d3_selectionPrototype.node = function() {
	    for (var j = 0, m = this.length; j < m; j++) {
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        var node = group[i];
	        if (node) return node;
	      }
	    }
	    return null;
	  };
	  d3_selectionPrototype.size = function() {
	    var n = 0;
	    d3_selection_each(this, function() {
	      ++n;
	    });
	    return n;
	  };
	  function d3_selection_enter(selection) {
	    d3_subclass(selection, d3_selection_enterPrototype);
	    return selection;
	  }
	  var d3_selection_enterPrototype = [];
	  d3.selection.enter = d3_selection_enter;
	  d3.selection.enter.prototype = d3_selection_enterPrototype;
	  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
	  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
	  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
	  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
	  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
	  d3_selection_enterPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, upgroup, group, node;
	    for (var j = -1, m = this.length; ++j < m; ) {
	      upgroup = (group = this[j]).update;
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = group.parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
	          subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  d3_selection_enterPrototype.insert = function(name, before) {
	    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
	    return d3_selectionPrototype.insert.call(this, name, before);
	  };
	  function d3_selection_enterInsertBefore(enter) {
	    var i0, j0;
	    return function(d, i, j) {
	      var group = enter[j].update, n = group.length, node;
	      if (j != j0) j0 = j, i0 = 0;
	      if (i >= i0) i0 = i + 1;
	      while (!(node = group[i0]) && ++i0 < n) ;
	      return node;
	    };
	  }
	  d3.select = function(node) {
	    var group;
	    if (typeof node === "string") {
	      group = [ d3_select(node, d3_document) ];
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = [ node ];
	      group.parentNode = d3_documentElement(node);
	    }
	    return d3_selection([ group ]);
	  };
	  d3.selectAll = function(nodes) {
	    var group;
	    if (typeof nodes === "string") {
	      group = d3_array(d3_selectAll(nodes, d3_document));
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = d3_array(nodes);
	      group.parentNode = null;
	    }
	    return d3_selection([ group ]);
	  };
	  d3_selectionPrototype.on = function(type, listener, capture) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof type !== "string") {
	        if (n < 2) listener = false;
	        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
	        return this;
	      }
	      if (n < 2) return (n = this.node()["__on" + type]) && n._;
	      capture = false;
	    }
	    return this.each(d3_selection_on(type, listener, capture));
	  };
	  function d3_selection_on(type, listener, capture) {
	    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
	    if (i > 0) type = type.slice(0, i);
	    var filter = d3_selection_onFilters.get(type);
	    if (filter) type = filter, wrap = d3_selection_onFilter;
	    function onRemove() {
	      var l = this[name];
	      if (l) {
	        this.removeEventListener(type, l, l.$);
	        delete this[name];
	      }
	    }
	    function onAdd() {
	      var l = wrap(listener, d3_array(arguments));
	      onRemove.call(this);
	      this.addEventListener(type, this[name] = l, l.$ = capture);
	      l._ = listener;
	    }
	    function removeAll() {
	      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
	      for (var name in this) {
	        if (match = name.match(re)) {
	          var l = this[name];
	          this.removeEventListener(match[1], l, l.$);
	          delete this[name];
	        }
	      }
	    }
	    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
	  }
	  var d3_selection_onFilters = d3.map({
	    mouseenter: "mouseover",
	    mouseleave: "mouseout"
	  });
	  if (d3_document) {
	    d3_selection_onFilters.forEach(function(k) {
	      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
	    });
	  }
	  function d3_selection_onListener(listener, argumentz) {
	    return function(e) {
	      var o = d3.event;
	      d3.event = e;
	      argumentz[0] = this.__data__;
	      try {
	        listener.apply(this, argumentz);
	      } finally {
	        d3.event = o;
	      }
	    };
	  }
	  function d3_selection_onFilter(listener, argumentz) {
	    var l = d3_selection_onListener(listener, argumentz);
	    return function(e) {
	      var target = this, related = e.relatedTarget;
	      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
	        l.call(target, e);
	      }
	    };
	  }
	  var d3_event_dragSelect, d3_event_dragId = 0;
	  function d3_event_dragSuppress(node) {
	    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
	    if (d3_event_dragSelect == null) {
	      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
	    }
	    if (d3_event_dragSelect) {
	      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
	      style[d3_event_dragSelect] = "none";
	    }
	    return function(suppressClick) {
	      w.on(name, null);
	      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
	      if (suppressClick) {
	        var off = function() {
	          w.on(click, null);
	        };
	        w.on(click, function() {
	          d3_eventPreventDefault();
	          off();
	        }, true);
	        setTimeout(off, 0);
	      }
	    };
	  }
	  d3.mouse = function(container) {
	    return d3_mousePoint(container, d3_eventSource());
	  };
	  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
	  function d3_mousePoint(container, e) {
	    if (e.changedTouches) e = e.changedTouches[0];
	    var svg = container.ownerSVGElement || container;
	    if (svg.createSVGPoint) {
	      var point = svg.createSVGPoint();
	      if (d3_mouse_bug44083 < 0) {
	        var window = d3_window(container);
	        if (window.scrollX || window.scrollY) {
	          svg = d3.select("body").append("svg").style({
	            position: "absolute",
	            top: 0,
	            left: 0,
	            margin: 0,
	            padding: 0,
	            border: "none"
	          }, "important");
	          var ctm = svg[0][0].getScreenCTM();
	          d3_mouse_bug44083 = !(ctm.f || ctm.e);
	          svg.remove();
	        }
	      }
	      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
	      point.y = e.clientY;
	      point = point.matrixTransform(container.getScreenCTM().inverse());
	      return [ point.x, point.y ];
	    }
	    var rect = container.getBoundingClientRect();
	    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
	  }
	  d3.touch = function(container, touches, identifier) {
	    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
	    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
	      if ((touch = touches[i]).identifier === identifier) {
	        return d3_mousePoint(container, touch);
	      }
	    }
	  };
	  d3.behavior.drag = function() {
	    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
	    function drag() {
	      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
	    }
	    function dragstart(id, position, subject, move, end) {
	      return function() {
	        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
	        if (origin) {
	          dragOffset = origin.apply(that, arguments);
	          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
	        } else {
	          dragOffset = [ 0, 0 ];
	        }
	        dispatch({
	          type: "dragstart"
	        });
	        function moved() {
	          var position1 = position(parent, dragId), dx, dy;
	          if (!position1) return;
	          dx = position1[0] - position0[0];
	          dy = position1[1] - position0[1];
	          dragged |= dx | dy;
	          position0 = position1;
	          dispatch({
	            type: "drag",
	            x: position1[0] + dragOffset[0],
	            y: position1[1] + dragOffset[1],
	            dx: dx,
	            dy: dy
	          });
	        }
	        function ended() {
	          if (!position(parent, dragId)) return;
	          dragSubject.on(move + dragName, null).on(end + dragName, null);
	          dragRestore(dragged);
	          dispatch({
	            type: "dragend"
	          });
	        }
	      };
	    }
	    drag.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return drag;
	    };
	    return d3.rebind(drag, event, "on");
	  };
	  function d3_behavior_dragTouchId() {
	    return d3.event.changedTouches[0].identifier;
	  }
	  d3.touches = function(container, touches) {
	    if (arguments.length < 2) touches = d3_eventSource().touches;
	    return touches ? d3_array(touches).map(function(touch) {
	      var point = d3_mousePoint(container, touch);
	      point.identifier = touch.identifier;
	      return point;
	    }) : [];
	  };
	  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
	  function d3_sgn(x) {
	    return x > 0 ? 1 : x < 0 ? -1 : 0;
	  }
	  function d3_cross2d(a, b, c) {
	    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	  }
	  function d3_acos(x) {
	    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
	  }
	  function d3_asin(x) {
	    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
	  }
	  function d3_sinh(x) {
	    return ((x = Math.exp(x)) - 1 / x) / 2;
	  }
	  function d3_cosh(x) {
	    return ((x = Math.exp(x)) + 1 / x) / 2;
	  }
	  function d3_tanh(x) {
	    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	  }
	  function d3_haversin(x) {
	    return (x = Math.sin(x / 2)) * x;
	  }
	  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
	  d3.interpolateZoom = function(p0, p1) {
	    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
	    if (d2 < ε2) {
	      S = Math.log(w1 / w0) / ρ;
	      i = function(t) {
	        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
	      };
	    } else {
	      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	      S = (r1 - r0) / ρ;
	      i = function(t) {
	        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
	        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
	      };
	    }
	    i.duration = S * 1e3;
	    return i;
	  };
	  d3.behavior.zoom = function() {
	    var view = {
	      x: 0,
	      y: 0,
	      k: 1
	    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
	    if (!d3_behavior_zoomWheel) {
	      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
	      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return d3.event.wheelDelta;
	      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
	        return -d3.event.detail;
	      }, "MozMousePixelScroll");
	    }
	    function zoom(g) {
	      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
	    }
	    zoom.event = function(g) {
	      g.each(function() {
	        var dispatch = event.of(this, arguments), view1 = view;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.zoom", function() {
	            view = this.__chart__ || {
	              x: 0,
	              y: 0,
	              k: 1
	            };
	            zoomstarted(dispatch);
	          }).tween("zoom:zoom", function() {
	            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
	            return function(t) {
	              var l = i(t), k = dx / l[2];
	              this.__chart__ = view = {
	                x: cx - l[0] * k,
	                y: cy - l[1] * k,
	                k: k
	              };
	              zoomed(dispatch);
	            };
	          }).each("interrupt.zoom", function() {
	            zoomended(dispatch);
	          }).each("end.zoom", function() {
	            zoomended(dispatch);
	          });
	        } else {
	          this.__chart__ = view;
	          zoomstarted(dispatch);
	          zoomed(dispatch);
	          zoomended(dispatch);
	        }
	      });
	    };
	    zoom.translate = function(_) {
	      if (!arguments.length) return [ view.x, view.y ];
	      view = {
	        x: +_[0],
	        y: +_[1],
	        k: view.k
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scale = function(_) {
	      if (!arguments.length) return view.k;
	      view = {
	        x: view.x,
	        y: view.y,
	        k: null
	      };
	      scaleTo(+_);
	      rescale();
	      return zoom;
	    };
	    zoom.scaleExtent = function(_) {
	      if (!arguments.length) return scaleExtent;
	      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.center = function(_) {
	      if (!arguments.length) return center;
	      center = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.size = function(_) {
	      if (!arguments.length) return size;
	      size = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.duration = function(_) {
	      if (!arguments.length) return duration;
	      duration = +_;
	      return zoom;
	    };
	    zoom.x = function(z) {
	      if (!arguments.length) return x1;
	      x1 = z;
	      x0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    zoom.y = function(z) {
	      if (!arguments.length) return y1;
	      y1 = z;
	      y0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    function location(p) {
	      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
	    }
	    function point(l) {
	      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
	    }
	    function scaleTo(s) {
	      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
	    }
	    function translateTo(p, l) {
	      l = point(l);
	      view.x += p[0] - l[0];
	      view.y += p[1] - l[1];
	    }
	    function zoomTo(that, p, l, k) {
	      that.__chart__ = {
	        x: view.x,
	        y: view.y,
	        k: view.k
	      };
	      scaleTo(Math.pow(2, k));
	      translateTo(center0 = p, l);
	      that = d3.select(that);
	      if (duration > 0) that = that.transition().duration(duration);
	      that.call(zoom.event);
	    }
	    function rescale() {
	      if (x1) x1.domain(x0.range().map(function(x) {
	        return (x - view.x) / view.k;
	      }).map(x0.invert));
	      if (y1) y1.domain(y0.range().map(function(y) {
	        return (y - view.y) / view.k;
	      }).map(y0.invert));
	    }
	    function zoomstarted(dispatch) {
	      if (!zooming++) dispatch({
	        type: "zoomstart"
	      });
	    }
	    function zoomed(dispatch) {
	      rescale();
	      dispatch({
	        type: "zoom",
	        scale: view.k,
	        translate: [ view.x, view.y ]
	      });
	    }
	    function zoomended(dispatch) {
	      if (!--zooming) dispatch({
	        type: "zoomend"
	      }), center0 = null;
	    }
	    function mousedowned() {
	      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
	      d3_selection_interrupt.call(that);
	      zoomstarted(dispatch);
	      function moved() {
	        dragged = 1;
	        translateTo(d3.mouse(that), location0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        subject.on(mousemove, null).on(mouseup, null);
	        dragRestore(dragged);
	        zoomended(dispatch);
	      }
	    }
	    function touchstarted() {
	      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
	      started();
	      zoomstarted(dispatch);
	      subject.on(mousedown, null).on(touchstart, started);
	      function relocate() {
	        var touches = d3.touches(that);
	        scale0 = view.k;
	        touches.forEach(function(t) {
	          if (t.identifier in locations0) locations0[t.identifier] = location(t);
	        });
	        return touches;
	      }
	      function started() {
	        var target = d3.event.target;
	        d3.select(target).on(touchmove, moved).on(touchend, ended);
	        targets.push(target);
	        var changed = d3.event.changedTouches;
	        for (var i = 0, n = changed.length; i < n; ++i) {
	          locations0[changed[i].identifier] = null;
	        }
	        var touches = relocate(), now = Date.now();
	        if (touches.length === 1) {
	          if (now - touchtime < 500) {
	            var p = touches[0];
	            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
	            d3_eventPreventDefault();
	          }
	          touchtime = now;
	        } else if (touches.length > 1) {
	          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
	          distance0 = dx * dx + dy * dy;
	        }
	      }
	      function moved() {
	        var touches = d3.touches(that), p0, l0, p1, l1;
	        d3_selection_interrupt.call(that);
	        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
	          p1 = touches[i];
	          if (l1 = locations0[p1.identifier]) {
	            if (l0) break;
	            p0 = p1, l0 = l1;
	          }
	        }
	        if (l1) {
	          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
	          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
	          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
	          scaleTo(scale1 * scale0);
	        }
	        touchtime = null;
	        translateTo(p0, l0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        if (d3.event.touches.length) {
	          var changed = d3.event.changedTouches;
	          for (var i = 0, n = changed.length; i < n; ++i) {
	            delete locations0[changed[i].identifier];
	          }
	          for (var identifier in locations0) {
	            return void relocate();
	          }
	        }
	        d3.selectAll(targets).on(zoomName, null);
	        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
	        dragRestore();
	        zoomended(dispatch);
	      }
	    }
	    function mousewheeled() {
	      var dispatch = event.of(this, arguments);
	      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
	      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
	      mousewheelTimer = setTimeout(function() {
	        mousewheelTimer = null;
	        zoomended(dispatch);
	      }, 50);
	      d3_eventPreventDefault();
	      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
	      translateTo(center0, translate0);
	      zoomed(dispatch);
	    }
	    function dblclicked() {
	      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
	      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
	    }
	    return d3.rebind(zoom, event, "on");
	  };
	  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
	  d3.color = d3_color;
	  function d3_color() {}
	  d3_color.prototype.toString = function() {
	    return this.rgb() + "";
	  };
	  d3.hsl = d3_hsl;
	  function d3_hsl(h, s, l) {
	    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
	  }
	  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
	  d3_hslPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, this.l / k);
	  };
	  d3_hslPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, k * this.l);
	  };
	  d3_hslPrototype.rgb = function() {
	    return d3_hsl_rgb(this.h, this.s, this.l);
	  };
	  function d3_hsl_rgb(h, s, l) {
	    var m1, m2;
	    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
	    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
	    l = l < 0 ? 0 : l > 1 ? 1 : l;
	    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
	    m1 = 2 * l - m2;
	    function v(h) {
	      if (h > 360) h -= 360; else if (h < 0) h += 360;
	      if (h < 60) return m1 + (m2 - m1) * h / 60;
	      if (h < 180) return m2;
	      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
	      return m1;
	    }
	    function vv(h) {
	      return Math.round(v(h) * 255);
	    }
	    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
	  }
	  d3.hcl = d3_hcl;
	  function d3_hcl(h, c, l) {
	    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
	  }
	  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
	  d3_hclPrototype.brighter = function(k) {
	    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.darker = function(k) {
	    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.rgb = function() {
	    return d3_hcl_lab(this.h, this.c, this.l).rgb();
	  };
	  function d3_hcl_lab(h, c, l) {
	    if (isNaN(h)) h = 0;
	    if (isNaN(c)) c = 0;
	    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
	  }
	  d3.lab = d3_lab;
	  function d3_lab(l, a, b) {
	    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
	  }
	  var d3_lab_K = 18;
	  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
	  var d3_labPrototype = d3_lab.prototype = new d3_color();
	  d3_labPrototype.brighter = function(k) {
	    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.darker = function(k) {
	    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.rgb = function() {
	    return d3_lab_rgb(this.l, this.a, this.b);
	  };
	  function d3_lab_rgb(l, a, b) {
	    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
	    x = d3_lab_xyz(x) * d3_lab_X;
	    y = d3_lab_xyz(y) * d3_lab_Y;
	    z = d3_lab_xyz(z) * d3_lab_Z;
	    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
	  }
	  function d3_lab_hcl(l, a, b) {
	    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
	  }
	  function d3_lab_xyz(x) {
	    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
	  }
	  function d3_xyz_lab(x) {
	    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
	  }
	  function d3_xyz_rgb(r) {
	    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
	  }
	  d3.rgb = d3_rgb;
	  function d3_rgb(r, g, b) {
	    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
	  }
	  function d3_rgbNumber(value) {
	    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
	  }
	  function d3_rgbString(value) {
	    return d3_rgbNumber(value) + "";
	  }
	  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
	  d3_rgbPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    var r = this.r, g = this.g, b = this.b, i = 30;
	    if (!r && !g && !b) return new d3_rgb(i, i, i);
	    if (r && r < i) r = i;
	    if (g && g < i) g = i;
	    if (b && b < i) b = i;
	    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
	  };
	  d3_rgbPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_rgb(k * this.r, k * this.g, k * this.b);
	  };
	  d3_rgbPrototype.hsl = function() {
	    return d3_rgb_hsl(this.r, this.g, this.b);
	  };
	  d3_rgbPrototype.toString = function() {
	    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
	  };
	  function d3_rgb_hex(v) {
	    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
	  }
	  function d3_rgb_parse(format, rgb, hsl) {
	    var r = 0, g = 0, b = 0, m1, m2, color;
	    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
	    if (m1) {
	      m2 = m1[2].split(",");
	      switch (m1[1]) {
	       case "hsl":
	        {
	          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
	        }

	       case "rgb":
	        {
	          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
	        }
	      }
	    }
	    if (color = d3_rgb_names.get(format)) {
	      return rgb(color.r, color.g, color.b);
	    }
	    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
	      if (format.length === 4) {
	        r = (color & 3840) >> 4;
	        r = r >> 4 | r;
	        g = color & 240;
	        g = g >> 4 | g;
	        b = color & 15;
	        b = b << 4 | b;
	      } else if (format.length === 7) {
	        r = (color & 16711680) >> 16;
	        g = (color & 65280) >> 8;
	        b = color & 255;
	      }
	    }
	    return rgb(r, g, b);
	  }
	  function d3_rgb_hsl(r, g, b) {
	    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
	    if (d) {
	      s = l < .5 ? d / (max + min) : d / (2 - max - min);
	      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
	      h *= 60;
	    } else {
	      h = NaN;
	      s = l > 0 && l < 1 ? 0 : h;
	    }
	    return new d3_hsl(h, s, l);
	  }
	  function d3_rgb_lab(r, g, b) {
	    r = d3_rgb_xyz(r);
	    g = d3_rgb_xyz(g);
	    b = d3_rgb_xyz(b);
	    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
	    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
	  }
	  function d3_rgb_xyz(r) {
	    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
	  }
	  function d3_rgb_parseNumber(c) {
	    var f = parseFloat(c);
	    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
	  }
	  var d3_rgb_names = d3.map({
	    aliceblue: 15792383,
	    antiquewhite: 16444375,
	    aqua: 65535,
	    aquamarine: 8388564,
	    azure: 15794175,
	    beige: 16119260,
	    bisque: 16770244,
	    black: 0,
	    blanchedalmond: 16772045,
	    blue: 255,
	    blueviolet: 9055202,
	    brown: 10824234,
	    burlywood: 14596231,
	    cadetblue: 6266528,
	    chartreuse: 8388352,
	    chocolate: 13789470,
	    coral: 16744272,
	    cornflowerblue: 6591981,
	    cornsilk: 16775388,
	    crimson: 14423100,
	    cyan: 65535,
	    darkblue: 139,
	    darkcyan: 35723,
	    darkgoldenrod: 12092939,
	    darkgray: 11119017,
	    darkgreen: 25600,
	    darkgrey: 11119017,
	    darkkhaki: 12433259,
	    darkmagenta: 9109643,
	    darkolivegreen: 5597999,
	    darkorange: 16747520,
	    darkorchid: 10040012,
	    darkred: 9109504,
	    darksalmon: 15308410,
	    darkseagreen: 9419919,
	    darkslateblue: 4734347,
	    darkslategray: 3100495,
	    darkslategrey: 3100495,
	    darkturquoise: 52945,
	    darkviolet: 9699539,
	    deeppink: 16716947,
	    deepskyblue: 49151,
	    dimgray: 6908265,
	    dimgrey: 6908265,
	    dodgerblue: 2003199,
	    firebrick: 11674146,
	    floralwhite: 16775920,
	    forestgreen: 2263842,
	    fuchsia: 16711935,
	    gainsboro: 14474460,
	    ghostwhite: 16316671,
	    gold: 16766720,
	    goldenrod: 14329120,
	    gray: 8421504,
	    green: 32768,
	    greenyellow: 11403055,
	    grey: 8421504,
	    honeydew: 15794160,
	    hotpink: 16738740,
	    indianred: 13458524,
	    indigo: 4915330,
	    ivory: 16777200,
	    khaki: 15787660,
	    lavender: 15132410,
	    lavenderblush: 16773365,
	    lawngreen: 8190976,
	    lemonchiffon: 16775885,
	    lightblue: 11393254,
	    lightcoral: 15761536,
	    lightcyan: 14745599,
	    lightgoldenrodyellow: 16448210,
	    lightgray: 13882323,
	    lightgreen: 9498256,
	    lightgrey: 13882323,
	    lightpink: 16758465,
	    lightsalmon: 16752762,
	    lightseagreen: 2142890,
	    lightskyblue: 8900346,
	    lightslategray: 7833753,
	    lightslategrey: 7833753,
	    lightsteelblue: 11584734,
	    lightyellow: 16777184,
	    lime: 65280,
	    limegreen: 3329330,
	    linen: 16445670,
	    magenta: 16711935,
	    maroon: 8388608,
	    mediumaquamarine: 6737322,
	    mediumblue: 205,
	    mediumorchid: 12211667,
	    mediumpurple: 9662683,
	    mediumseagreen: 3978097,
	    mediumslateblue: 8087790,
	    mediumspringgreen: 64154,
	    mediumturquoise: 4772300,
	    mediumvioletred: 13047173,
	    midnightblue: 1644912,
	    mintcream: 16121850,
	    mistyrose: 16770273,
	    moccasin: 16770229,
	    navajowhite: 16768685,
	    navy: 128,
	    oldlace: 16643558,
	    olive: 8421376,
	    olivedrab: 7048739,
	    orange: 16753920,
	    orangered: 16729344,
	    orchid: 14315734,
	    palegoldenrod: 15657130,
	    palegreen: 10025880,
	    paleturquoise: 11529966,
	    palevioletred: 14381203,
	    papayawhip: 16773077,
	    peachpuff: 16767673,
	    peru: 13468991,
	    pink: 16761035,
	    plum: 14524637,
	    powderblue: 11591910,
	    purple: 8388736,
	    rebeccapurple: 6697881,
	    red: 16711680,
	    rosybrown: 12357519,
	    royalblue: 4286945,
	    saddlebrown: 9127187,
	    salmon: 16416882,
	    sandybrown: 16032864,
	    seagreen: 3050327,
	    seashell: 16774638,
	    sienna: 10506797,
	    silver: 12632256,
	    skyblue: 8900331,
	    slateblue: 6970061,
	    slategray: 7372944,
	    slategrey: 7372944,
	    snow: 16775930,
	    springgreen: 65407,
	    steelblue: 4620980,
	    tan: 13808780,
	    teal: 32896,
	    thistle: 14204888,
	    tomato: 16737095,
	    turquoise: 4251856,
	    violet: 15631086,
	    wheat: 16113331,
	    white: 16777215,
	    whitesmoke: 16119285,
	    yellow: 16776960,
	    yellowgreen: 10145074
	  });
	  d3_rgb_names.forEach(function(key, value) {
	    d3_rgb_names.set(key, d3_rgbNumber(value));
	  });
	  function d3_functor(v) {
	    return typeof v === "function" ? v : function() {
	      return v;
	    };
	  }
	  d3.functor = d3_functor;
	  d3.xhr = d3_xhrType(d3_identity);
	  function d3_xhrType(response) {
	    return function(url, mimeType, callback) {
	      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
	      mimeType = null;
	      return d3_xhr(url, mimeType, response, callback);
	    };
	  }
	  function d3_xhr(url, mimeType, response, callback) {
	    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
	    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
	    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
	      request.readyState > 3 && respond();
	    };
	    function respond() {
	      var status = request.status, result;
	      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
	        try {
	          result = response.call(xhr, request);
	        } catch (e) {
	          dispatch.error.call(xhr, e);
	          return;
	        }
	        dispatch.load.call(xhr, result);
	      } else {
	        dispatch.error.call(xhr, request);
	      }
	    }
	    request.onprogress = function(event) {
	      var o = d3.event;
	      d3.event = event;
	      try {
	        dispatch.progress.call(xhr, request);
	      } finally {
	        d3.event = o;
	      }
	    };
	    xhr.header = function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers[name];
	      if (value == null) delete headers[name]; else headers[name] = value + "";
	      return xhr;
	    };
	    xhr.mimeType = function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return xhr;
	    };
	    xhr.responseType = function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return xhr;
	    };
	    xhr.response = function(value) {
	      response = value;
	      return xhr;
	    };
	    [ "get", "post" ].forEach(function(method) {
	      xhr[method] = function() {
	        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
	      };
	    });
	    xhr.send = function(method, data, callback) {
	      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
	      request.open(method, url, true);
	      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
	      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
	      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
	      if (responseType != null) request.responseType = responseType;
	      if (callback != null) xhr.on("error", callback).on("load", function(request) {
	        callback(null, request);
	      });
	      dispatch.beforesend.call(xhr, request);
	      request.send(data == null ? null : data);
	      return xhr;
	    };
	    xhr.abort = function() {
	      request.abort();
	      return xhr;
	    };
	    d3.rebind(xhr, dispatch, "on");
	    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
	  }
	  function d3_xhr_fixCallback(callback) {
	    return callback.length === 1 ? function(error, request) {
	      callback(error == null ? request : null);
	    } : callback;
	  }
	  function d3_xhrHasResponse(request) {
	    var type = request.responseType;
	    return type && type !== "text" ? request.response : request.responseText;
	  }
	  d3.dsv = function(delimiter, mimeType) {
	    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
	    function dsv(url, row, callback) {
	      if (arguments.length < 3) callback = row, row = null;
	      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
	      xhr.row = function(_) {
	        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
	      };
	      return xhr;
	    }
	    function response(request) {
	      return dsv.parse(request.responseText);
	    }
	    function typedResponse(f) {
	      return function(request) {
	        return dsv.parse(request.responseText, f);
	      };
	    }
	    dsv.parse = function(text, f) {
	      var o;
	      return dsv.parseRows(text, function(row, i) {
	        if (o) return o(row, i - 1);
	        var a = new Function("d", "return {" + row.map(function(name, i) {
	          return JSON.stringify(name) + ": d[" + i + "]";
	        }).join(",") + "}");
	        o = f ? function(row, i) {
	          return f(a(row), i);
	        } : a;
	      });
	    };
	    dsv.parseRows = function(text, f) {
	      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
	      function token() {
	        if (I >= N) return EOF;
	        if (eol) return eol = false, EOL;
	        var j = I;
	        if (text.charCodeAt(j) === 34) {
	          var i = j;
	          while (i++ < N) {
	            if (text.charCodeAt(i) === 34) {
	              if (text.charCodeAt(i + 1) !== 34) break;
	              ++i;
	            }
	          }
	          I = i + 2;
	          var c = text.charCodeAt(i + 1);
	          if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(i + 2) === 10) ++I;
	          } else if (c === 10) {
	            eol = true;
	          }
	          return text.slice(j + 1, i).replace(/""/g, '"');
	        }
	        while (I < N) {
	          var c = text.charCodeAt(I++), k = 1;
	          if (c === 10) eol = true; else if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(I) === 10) ++I, ++k;
	          } else if (c !== delimiterCode) continue;
	          return text.slice(j, I - k);
	        }
	        return text.slice(j);
	      }
	      while ((t = token()) !== EOF) {
	        var a = [];
	        while (t !== EOL && t !== EOF) {
	          a.push(t);
	          t = token();
	        }
	        if (f && (a = f(a, n++)) == null) continue;
	        rows.push(a);
	      }
	      return rows;
	    };
	    dsv.format = function(rows) {
	      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
	      var fieldSet = new d3_Set(), fields = [];
	      rows.forEach(function(row) {
	        for (var field in row) {
	          if (!fieldSet.has(field)) {
	            fields.push(fieldSet.add(field));
	          }
	        }
	      });
	      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
	        return fields.map(function(field) {
	          return formatValue(row[field]);
	        }).join(delimiter);
	      })).join("\n");
	    };
	    dsv.formatRows = function(rows) {
	      return rows.map(formatRow).join("\n");
	    };
	    function formatRow(row) {
	      return row.map(formatValue).join(delimiter);
	    }
	    function formatValue(text) {
	      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
	    }
	    return dsv;
	  };
	  d3.csv = d3.dsv(",", "text/csv");
	  d3.tsv = d3.dsv("	", "text/tab-separated-values");
	  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
	    setTimeout(callback, 17);
	  };
	  d3.timer = function() {
	    d3_timer.apply(this, arguments);
	  };
	  function d3_timer(callback, delay, then) {
	    var n = arguments.length;
	    if (n < 2) delay = 0;
	    if (n < 3) then = Date.now();
	    var time = then + delay, timer = {
	      c: callback,
	      t: time,
	      n: null
	    };
	    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
	    d3_timer_queueTail = timer;
	    if (!d3_timer_interval) {
	      d3_timer_timeout = clearTimeout(d3_timer_timeout);
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	    return timer;
	  }
	  function d3_timer_step() {
	    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
	    if (delay > 24) {
	      if (isFinite(delay)) {
	        clearTimeout(d3_timer_timeout);
	        d3_timer_timeout = setTimeout(d3_timer_step, delay);
	      }
	      d3_timer_interval = 0;
	    } else {
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  }
	  d3.timer.flush = function() {
	    d3_timer_mark();
	    d3_timer_sweep();
	  };
	  function d3_timer_mark() {
	    var now = Date.now(), timer = d3_timer_queueHead;
	    while (timer) {
	      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
	      timer = timer.n;
	    }
	    return now;
	  }
	  function d3_timer_sweep() {
	    var t0, t1 = d3_timer_queueHead, time = Infinity;
	    while (t1) {
	      if (t1.c) {
	        if (t1.t < time) time = t1.t;
	        t1 = (t0 = t1).n;
	      } else {
	        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
	      }
	    }
	    d3_timer_queueTail = t0;
	    return time;
	  }
	  function d3_format_precision(x, p) {
	    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
	  }
	  d3.round = function(x, n) {
	    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
	  };
	  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
	  d3.formatPrefix = function(value, precision) {
	    var i = 0;
	    if (value = +value) {
	      if (value < 0) value *= -1;
	      if (precision) value = d3.round(value, d3_format_precision(value, precision));
	      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
	      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
	    }
	    return d3_formatPrefixes[8 + i / 3];
	  };
	  function d3_formatPrefix(d, i) {
	    var k = Math.pow(10, abs(8 - i) * 3);
	    return {
	      scale: i > 8 ? function(d) {
	        return d / k;
	      } : function(d) {
	        return d * k;
	      },
	      symbol: d
	    };
	  }
	  function d3_locale_numberFormat(locale) {
	    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
	      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
	      while (i > 0 && g > 0) {
	        if (length + g + 1 > width) g = Math.max(1, width - length);
	        t.push(value.substring(i -= g, i + g));
	        if ((length += g + 1) > width) break;
	        g = locale_grouping[j = (j + 1) % locale_grouping.length];
	      }
	      return t.reverse().join(locale_thousands);
	    } : d3_identity;
	    return function(specifier) {
	      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
	      if (precision) precision = +precision.substring(1);
	      if (zfill || fill === "0" && align === "=") {
	        zfill = fill = "0";
	        align = "=";
	      }
	      switch (type) {
	       case "n":
	        comma = true;
	        type = "g";
	        break;

	       case "%":
	        scale = 100;
	        suffix = "%";
	        type = "f";
	        break;

	       case "p":
	        scale = 100;
	        suffix = "%";
	        type = "r";
	        break;

	       case "b":
	       case "o":
	       case "x":
	       case "X":
	        if (symbol === "#") prefix = "0" + type.toLowerCase();

	       case "c":
	        exponent = false;

	       case "d":
	        integer = true;
	        precision = 0;
	        break;

	       case "s":
	        scale = -1;
	        type = "r";
	        break;
	      }
	      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
	      if (type == "r" && !precision) type = "g";
	      if (precision != null) {
	        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
	      }
	      type = d3_format_types.get(type) || d3_format_typeDefault;
	      var zcomma = zfill && comma;
	      return function(value) {
	        var fullSuffix = suffix;
	        if (integer && value % 1) return "";
	        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
	        if (scale < 0) {
	          var unit = d3.formatPrefix(value, precision);
	          value = unit.scale(value);
	          fullSuffix = unit.symbol + suffix;
	        } else {
	          value *= scale;
	        }
	        value = type(value, precision);
	        var i = value.lastIndexOf("."), before, after;
	        if (i < 0) {
	          var j = exponent ? value.lastIndexOf("e") : -1;
	          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
	        } else {
	          before = value.substring(0, i);
	          after = locale_decimal + value.substring(i + 1);
	        }
	        if (!zfill && comma) before = formatGroup(before, Infinity);
	        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
	        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
	        negative += prefix;
	        value = before + after;
	        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
	      };
	    };
	  }
	  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
	  var d3_format_types = d3.map({
	    b: function(x) {
	      return x.toString(2);
	    },
	    c: function(x) {
	      return String.fromCharCode(x);
	    },
	    o: function(x) {
	      return x.toString(8);
	    },
	    x: function(x) {
	      return x.toString(16);
	    },
	    X: function(x) {
	      return x.toString(16).toUpperCase();
	    },
	    g: function(x, p) {
	      return x.toPrecision(p);
	    },
	    e: function(x, p) {
	      return x.toExponential(p);
	    },
	    f: function(x, p) {
	      return x.toFixed(p);
	    },
	    r: function(x, p) {
	      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
	    }
	  });
	  function d3_format_typeDefault(x) {
	    return x + "";
	  }
	  var d3_time = d3.time = {}, d3_date = Date;
	  function d3_date_utc() {
	    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
	  }
	  d3_date_utc.prototype = {
	    getDate: function() {
	      return this._.getUTCDate();
	    },
	    getDay: function() {
	      return this._.getUTCDay();
	    },
	    getFullYear: function() {
	      return this._.getUTCFullYear();
	    },
	    getHours: function() {
	      return this._.getUTCHours();
	    },
	    getMilliseconds: function() {
	      return this._.getUTCMilliseconds();
	    },
	    getMinutes: function() {
	      return this._.getUTCMinutes();
	    },
	    getMonth: function() {
	      return this._.getUTCMonth();
	    },
	    getSeconds: function() {
	      return this._.getUTCSeconds();
	    },
	    getTime: function() {
	      return this._.getTime();
	    },
	    getTimezoneOffset: function() {
	      return 0;
	    },
	    valueOf: function() {
	      return this._.valueOf();
	    },
	    setDate: function() {
	      d3_time_prototype.setUTCDate.apply(this._, arguments);
	    },
	    setDay: function() {
	      d3_time_prototype.setUTCDay.apply(this._, arguments);
	    },
	    setFullYear: function() {
	      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
	    },
	    setHours: function() {
	      d3_time_prototype.setUTCHours.apply(this._, arguments);
	    },
	    setMilliseconds: function() {
	      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
	    },
	    setMinutes: function() {
	      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
	    },
	    setMonth: function() {
	      d3_time_prototype.setUTCMonth.apply(this._, arguments);
	    },
	    setSeconds: function() {
	      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
	    },
	    setTime: function() {
	      d3_time_prototype.setTime.apply(this._, arguments);
	    }
	  };
	  var d3_time_prototype = Date.prototype;
	  function d3_time_interval(local, step, number) {
	    function round(date) {
	      var d0 = local(date), d1 = offset(d0, 1);
	      return date - d0 < d1 - date ? d0 : d1;
	    }
	    function ceil(date) {
	      step(date = local(new d3_date(date - 1)), 1);
	      return date;
	    }
	    function offset(date, k) {
	      step(date = new d3_date(+date), k);
	      return date;
	    }
	    function range(t0, t1, dt) {
	      var time = ceil(t0), times = [];
	      if (dt > 1) {
	        while (time < t1) {
	          if (!(number(time) % dt)) times.push(new Date(+time));
	          step(time, 1);
	        }
	      } else {
	        while (time < t1) times.push(new Date(+time)), step(time, 1);
	      }
	      return times;
	    }
	    function range_utc(t0, t1, dt) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = t0;
	        return range(utc, t1, dt);
	      } finally {
	        d3_date = Date;
	      }
	    }
	    local.floor = local;
	    local.round = round;
	    local.ceil = ceil;
	    local.offset = offset;
	    local.range = range;
	    var utc = local.utc = d3_time_interval_utc(local);
	    utc.floor = utc;
	    utc.round = d3_time_interval_utc(round);
	    utc.ceil = d3_time_interval_utc(ceil);
	    utc.offset = d3_time_interval_utc(offset);
	    utc.range = range_utc;
	    return local;
	  }
	  function d3_time_interval_utc(method) {
	    return function(date, k) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = date;
	        return method(utc, k)._;
	      } finally {
	        d3_date = Date;
	      }
	    };
	  }
	  d3_time.year = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setMonth(0, 1);
	    return date;
	  }, function(date, offset) {
	    date.setFullYear(date.getFullYear() + offset);
	  }, function(date) {
	    return date.getFullYear();
	  });
	  d3_time.years = d3_time.year.range;
	  d3_time.years.utc = d3_time.year.utc.range;
	  d3_time.day = d3_time_interval(function(date) {
	    var day = new d3_date(2e3, 0);
	    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	    return day;
	  }, function(date, offset) {
	    date.setDate(date.getDate() + offset);
	  }, function(date) {
	    return date.getDate() - 1;
	  });
	  d3_time.days = d3_time.day.range;
	  d3_time.days.utc = d3_time.day.utc.range;
	  d3_time.dayOfYear = function(date) {
	    var year = d3_time.year(date);
	    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
	  };
	  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
	    i = 7 - i;
	    var interval = d3_time[day] = d3_time_interval(function(date) {
	      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
	      return date;
	    }, function(date, offset) {
	      date.setDate(date.getDate() + Math.floor(offset) * 7);
	    }, function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
	    });
	    d3_time[day + "s"] = interval.range;
	    d3_time[day + "s"].utc = interval.utc.range;
	    d3_time[day + "OfYear"] = function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
	    };
	  });
	  d3_time.week = d3_time.sunday;
	  d3_time.weeks = d3_time.sunday.range;
	  d3_time.weeks.utc = d3_time.sunday.utc.range;
	  d3_time.weekOfYear = d3_time.sundayOfYear;
	  function d3_locale_timeFormat(locale) {
	    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
	    function d3_time_format(template) {
	      var n = template.length;
	      function format(date) {
	        var string = [], i = -1, j = 0, c, p, f;
	        while (++i < n) {
	          if (template.charCodeAt(i) === 37) {
	            string.push(template.slice(j, i));
	            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
	            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
	            string.push(c);
	            j = i + 1;
	          }
	        }
	        string.push(template.slice(j, i));
	        return string.join("");
	      }
	      format.parse = function(string) {
	        var d = {
	          y: 1900,
	          m: 0,
	          d: 1,
	          H: 0,
	          M: 0,
	          S: 0,
	          L: 0,
	          Z: null
	        }, i = d3_time_parse(d, template, string, 0);
	        if (i != string.length) return null;
	        if ("p" in d) d.H = d.H % 12 + d.p * 12;
	        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
	        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
	          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
	          date.setFullYear(d.y, 0, 1);
	          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
	        } else date.setFullYear(d.y, d.m, d.d);
	        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
	        return localZ ? date._ : date;
	      };
	      format.toString = function() {
	        return template;
	      };
	      return format;
	    }
	    function d3_time_parse(date, template, string, j) {
	      var c, p, t, i = 0, n = template.length, m = string.length;
	      while (i < n) {
	        if (j >= m) return -1;
	        c = template.charCodeAt(i++);
	        if (c === 37) {
	          t = template.charAt(i++);
	          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
	          if (!p || (j = p(date, string, j)) < 0) return -1;
	        } else if (c != string.charCodeAt(j++)) {
	          return -1;
	        }
	      }
	      return j;
	    }
	    d3_time_format.utc = function(template) {
	      var local = d3_time_format(template);
	      function format(date) {
	        try {
	          d3_date = d3_date_utc;
	          var utc = new d3_date();
	          utc._ = date;
	          return local(utc);
	        } finally {
	          d3_date = Date;
	        }
	      }
	      format.parse = function(string) {
	        try {
	          d3_date = d3_date_utc;
	          var date = local.parse(string);
	          return date && date._;
	        } finally {
	          d3_date = Date;
	        }
	      };
	      format.toString = local.toString;
	      return format;
	    };
	    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
	    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
	    locale_periods.forEach(function(p, i) {
	      d3_time_periodLookup.set(p.toLowerCase(), i);
	    });
	    var d3_time_formats = {
	      a: function(d) {
	        return locale_shortDays[d.getDay()];
	      },
	      A: function(d) {
	        return locale_days[d.getDay()];
	      },
	      b: function(d) {
	        return locale_shortMonths[d.getMonth()];
	      },
	      B: function(d) {
	        return locale_months[d.getMonth()];
	      },
	      c: d3_time_format(locale_dateTime),
	      d: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      e: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      H: function(d, p) {
	        return d3_time_formatPad(d.getHours(), p, 2);
	      },
	      I: function(d, p) {
	        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
	      },
	      j: function(d, p) {
	        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
	      },
	      L: function(d, p) {
	        return d3_time_formatPad(d.getMilliseconds(), p, 3);
	      },
	      m: function(d, p) {
	        return d3_time_formatPad(d.getMonth() + 1, p, 2);
	      },
	      M: function(d, p) {
	        return d3_time_formatPad(d.getMinutes(), p, 2);
	      },
	      p: function(d) {
	        return locale_periods[+(d.getHours() >= 12)];
	      },
	      S: function(d, p) {
	        return d3_time_formatPad(d.getSeconds(), p, 2);
	      },
	      U: function(d, p) {
	        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
	      },
	      w: function(d) {
	        return d.getDay();
	      },
	      W: function(d, p) {
	        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
	      },
	      x: d3_time_format(locale_date),
	      X: d3_time_format(locale_time),
	      y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
	      },
	      Y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
	      },
	      Z: d3_time_zone,
	      "%": function() {
	        return "%";
	      }
	    };
	    var d3_time_parsers = {
	      a: d3_time_parseWeekdayAbbrev,
	      A: d3_time_parseWeekday,
	      b: d3_time_parseMonthAbbrev,
	      B: d3_time_parseMonth,
	      c: d3_time_parseLocaleFull,
	      d: d3_time_parseDay,
	      e: d3_time_parseDay,
	      H: d3_time_parseHour24,
	      I: d3_time_parseHour24,
	      j: d3_time_parseDayOfYear,
	      L: d3_time_parseMilliseconds,
	      m: d3_time_parseMonthNumber,
	      M: d3_time_parseMinutes,
	      p: d3_time_parseAmPm,
	      S: d3_time_parseSeconds,
	      U: d3_time_parseWeekNumberSunday,
	      w: d3_time_parseWeekdayNumber,
	      W: d3_time_parseWeekNumberMonday,
	      x: d3_time_parseLocaleDate,
	      X: d3_time_parseLocaleTime,
	      y: d3_time_parseYear,
	      Y: d3_time_parseFullYear,
	      Z: d3_time_parseZone,
	      "%": d3_time_parseLiteralPercent
	    };
	    function d3_time_parseWeekdayAbbrev(date, string, i) {
	      d3_time_dayAbbrevRe.lastIndex = 0;
	      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseWeekday(date, string, i) {
	      d3_time_dayRe.lastIndex = 0;
	      var n = d3_time_dayRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonthAbbrev(date, string, i) {
	      d3_time_monthAbbrevRe.lastIndex = 0;
	      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonth(date, string, i) {
	      d3_time_monthRe.lastIndex = 0;
	      var n = d3_time_monthRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseLocaleFull(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
	    }
	    function d3_time_parseLocaleDate(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
	    }
	    function d3_time_parseLocaleTime(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
	    }
	    function d3_time_parseAmPm(date, string, i) {
	      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
	      return n == null ? -1 : (date.p = n, i);
	    }
	    return d3_time_format;
	  }
	  var d3_time_formatPads = {
	    "-": "",
	    _: " ",
	    "0": "0"
	  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
	  function d3_time_formatPad(value, fill, width) {
	    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
	    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	  }
	  function d3_time_formatRe(names) {
	    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
	  }
	  function d3_time_formatLookup(names) {
	    var map = new d3_Map(), i = -1, n = names.length;
	    while (++i < n) map.set(names[i].toLowerCase(), i);
	    return map;
	  }
	  function d3_time_parseWeekdayNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
	    return n ? (date.w = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberSunday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.U = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberMonday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.W = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseFullYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
	    return n ? (date.y = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
	  }
	  function d3_time_parseZone(date, string, i) {
	    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
	    i + 5) : -1;
	  }
	  function d3_time_expandYear(d) {
	    return d + (d > 68 ? 1900 : 2e3);
	  }
	  function d3_time_parseMonthNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
	  }
	  function d3_time_parseDay(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.d = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseDayOfYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.j = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseHour24(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.H = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMinutes(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.M = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseSeconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.S = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMilliseconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.L = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_zone(d) {
	    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
	    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
	  }
	  function d3_time_parseLiteralPercent(date, string, i) {
	    d3_time_percentRe.lastIndex = 0;
	    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
	    return n ? i + n[0].length : -1;
	  }
	  function d3_time_formatMulti(formats) {
	    var n = formats.length, i = -1;
	    while (++i < n) formats[i][0] = this(formats[i][0]);
	    return function(date) {
	      var i = 0, f = formats[i];
	      while (!f[1](date)) f = formats[++i];
	      return f[0](date);
	    };
	  }
	  d3.locale = function(locale) {
	    return {
	      numberFormat: d3_locale_numberFormat(locale),
	      timeFormat: d3_locale_timeFormat(locale)
	    };
	  };
	  var d3_locale_enUS = d3.locale({
	    decimal: ".",
	    thousands: ",",
	    grouping: [ 3 ],
	    currency: [ "$", "" ],
	    dateTime: "%a %b %e %X %Y",
	    date: "%m/%d/%Y",
	    time: "%H:%M:%S",
	    periods: [ "AM", "PM" ],
	    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
	    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
	    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
	    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
	  });
	  d3.format = d3_locale_enUS.numberFormat;
	  d3.geo = {};
	  function d3_adder() {}
	  d3_adder.prototype = {
	    s: 0,
	    t: 0,
	    add: function(y) {
	      d3_adderSum(y, this.t, d3_adderTemp);
	      d3_adderSum(d3_adderTemp.s, this.s, this);
	      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
	    },
	    reset: function() {
	      this.s = this.t = 0;
	    },
	    valueOf: function() {
	      return this.s;
	    }
	  };
	  var d3_adderTemp = new d3_adder();
	  function d3_adderSum(a, b, o) {
	    var x = o.s = a + b, bv = x - a, av = x - bv;
	    o.t = a - av + (b - bv);
	  }
	  d3.geo.stream = function(object, listener) {
	    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
	      d3_geo_streamObjectType[object.type](object, listener);
	    } else {
	      d3_geo_streamGeometry(object, listener);
	    }
	  };
	  function d3_geo_streamGeometry(geometry, listener) {
	    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
	      d3_geo_streamGeometryType[geometry.type](geometry, listener);
	    }
	  }
	  var d3_geo_streamObjectType = {
	    Feature: function(feature, listener) {
	      d3_geo_streamGeometry(feature.geometry, listener);
	    },
	    FeatureCollection: function(object, listener) {
	      var features = object.features, i = -1, n = features.length;
	      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
	    }
	  };
	  var d3_geo_streamGeometryType = {
	    Sphere: function(object, listener) {
	      listener.sphere();
	    },
	    Point: function(object, listener) {
	      object = object.coordinates;
	      listener.point(object[0], object[1], object[2]);
	    },
	    MultiPoint: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
	    },
	    LineString: function(object, listener) {
	      d3_geo_streamLine(object.coordinates, listener, 0);
	    },
	    MultiLineString: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
	    },
	    Polygon: function(object, listener) {
	      d3_geo_streamPolygon(object.coordinates, listener);
	    },
	    MultiPolygon: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
	    },
	    GeometryCollection: function(object, listener) {
	      var geometries = object.geometries, i = -1, n = geometries.length;
	      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
	    }
	  };
	  function d3_geo_streamLine(coordinates, listener, closed) {
	    var i = -1, n = coordinates.length - closed, coordinate;
	    listener.lineStart();
	    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
	    listener.lineEnd();
	  }
	  function d3_geo_streamPolygon(coordinates, listener) {
	    var i = -1, n = coordinates.length;
	    listener.polygonStart();
	    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
	    listener.polygonEnd();
	  }
	  d3.geo.area = function(object) {
	    d3_geo_areaSum = 0;
	    d3.geo.stream(object, d3_geo_area);
	    return d3_geo_areaSum;
	  };
	  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
	  var d3_geo_area = {
	    sphere: function() {
	      d3_geo_areaSum += 4 * π;
	    },
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_areaRingSum.reset();
	      d3_geo_area.lineStart = d3_geo_areaRingStart;
	    },
	    polygonEnd: function() {
	      var area = 2 * d3_geo_areaRingSum;
	      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
	      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
	    }
	  };
	  function d3_geo_areaRingStart() {
	    var λ00, φ00, λ0, cosφ0, sinφ0;
	    d3_geo_area.point = function(λ, φ) {
	      d3_geo_area.point = nextPoint;
	      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
	      sinφ0 = Math.sin(φ);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      φ = φ * d3_radians / 2 + π / 4;
	      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
	      d3_geo_areaRingSum.add(Math.atan2(v, u));
	      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
	    }
	    d3_geo_area.lineEnd = function() {
	      nextPoint(λ00, φ00);
	    };
	  }
	  function d3_geo_cartesian(spherical) {
	    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
	    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
	  }
	  function d3_geo_cartesianDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	  }
	  function d3_geo_cartesianCross(a, b) {
	    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
	  }
	  function d3_geo_cartesianAdd(a, b) {
	    a[0] += b[0];
	    a[1] += b[1];
	    a[2] += b[2];
	  }
	  function d3_geo_cartesianScale(vector, k) {
	    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
	  }
	  function d3_geo_cartesianNormalize(d) {
	    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	    d[0] /= l;
	    d[1] /= l;
	    d[2] /= l;
	  }
	  function d3_geo_spherical(cartesian) {
	    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
	  }
	  function d3_geo_sphericalEqual(a, b) {
	    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
	  }
	  d3.geo.bounds = function() {
	    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
	    var bound = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        bound.point = ringPoint;
	        bound.lineStart = ringStart;
	        bound.lineEnd = ringEnd;
	        dλSum = 0;
	        d3_geo_area.polygonStart();
	      },
	      polygonEnd: function() {
	        d3_geo_area.polygonEnd();
	        bound.point = point;
	        bound.lineStart = lineStart;
	        bound.lineEnd = lineEnd;
	        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
	        range[0] = λ0, range[1] = λ1;
	      }
	    };
	    function point(λ, φ) {
	      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
	      if (φ < φ0) φ0 = φ;
	      if (φ > φ1) φ1 = φ;
	    }
	    function linePoint(λ, φ) {
	      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
	      if (p0) {
	        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
	        d3_geo_cartesianNormalize(inflection);
	        inflection = d3_geo_spherical(inflection);
	        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
	        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = inflection[1] * d3_degrees;
	          if (φi > φ1) φ1 = φi;
	        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = -inflection[1] * d3_degrees;
	          if (φi < φ0) φ0 = φi;
	        } else {
	          if (φ < φ0) φ0 = φ;
	          if (φ > φ1) φ1 = φ;
	        }
	        if (antimeridian) {
	          if (λ < λ_) {
	            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	          } else {
	            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	          }
	        } else {
	          if (λ1 >= λ0) {
	            if (λ < λ0) λ0 = λ;
	            if (λ > λ1) λ1 = λ;
	          } else {
	            if (λ > λ_) {
	              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	            } else {
	              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	            }
	          }
	        }
	      } else {
	        point(λ, φ);
	      }
	      p0 = p, λ_ = λ;
	    }
	    function lineStart() {
	      bound.point = linePoint;
	    }
	    function lineEnd() {
	      range[0] = λ0, range[1] = λ1;
	      bound.point = point;
	      p0 = null;
	    }
	    function ringPoint(λ, φ) {
	      if (p0) {
	        var dλ = λ - λ_;
	        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
	      } else λ__ = λ, φ__ = φ;
	      d3_geo_area.point(λ, φ);
	      linePoint(λ, φ);
	    }
	    function ringStart() {
	      d3_geo_area.lineStart();
	    }
	    function ringEnd() {
	      ringPoint(λ__, φ__);
	      d3_geo_area.lineEnd();
	      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
	      range[0] = λ0, range[1] = λ1;
	      p0 = null;
	    }
	    function angle(λ0, λ1) {
	      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
	    }
	    function compareRanges(a, b) {
	      return a[0] - b[0];
	    }
	    function withinRange(x, range) {
	      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	    }
	    return function(feature) {
	      φ1 = λ1 = -(λ0 = φ0 = Infinity);
	      ranges = [];
	      d3.geo.stream(feature, bound);
	      var n = ranges.length;
	      if (n) {
	        ranges.sort(compareRanges);
	        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
	          b = ranges[i];
	          if (withinRange(b[0], a) || withinRange(b[1], a)) {
	            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	          } else {
	            merged.push(a = b);
	          }
	        }
	        var best = -Infinity, dλ;
	        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
	          b = merged[i];
	          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
	        }
	      }
	      ranges = range = null;
	      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
	    };
	  }();
	  d3.geo.centroid = function(object) {
	    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	    d3.geo.stream(object, d3_geo_centroid);
	    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
	    if (m < ε2) {
	      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
	      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
	      m = x * x + y * y + z * z;
	      if (m < ε2) return [ NaN, NaN ];
	    }
	    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
	  };
	  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
	  var d3_geo_centroid = {
	    sphere: d3_noop,
	    point: d3_geo_centroidPoint,
	    lineStart: d3_geo_centroidLineStart,
	    lineEnd: d3_geo_centroidLineEnd,
	    polygonStart: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
	    }
	  };
	  function d3_geo_centroidPoint(λ, φ) {
	    λ *= d3_radians;
	    var cosφ = Math.cos(φ *= d3_radians);
	    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
	  }
	  function d3_geo_centroidPointXYZ(x, y, z) {
	    ++d3_geo_centroidW0;
	    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
	    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
	    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
	  }
	  function d3_geo_centroidLineStart() {
	    var x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroid.point = nextPoint;
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_centroidLineEnd() {
	    d3_geo_centroid.point = d3_geo_centroidPoint;
	  }
	  function d3_geo_centroidRingStart() {
	    var λ00, φ00, x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ00 = λ, φ00 = φ;
	      d3_geo_centroid.point = nextPoint;
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    d3_geo_centroid.lineEnd = function() {
	      nextPoint(λ00, φ00);
	      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
	      d3_geo_centroid.point = d3_geo_centroidPoint;
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
	      d3_geo_centroidX2 += v * cx;
	      d3_geo_centroidY2 += v * cy;
	      d3_geo_centroidZ2 += v * cz;
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_compose(a, b) {
	    function compose(x, y) {
	      return x = a(x, y), b(x[0], x[1]);
	    }
	    if (a.invert && b.invert) compose.invert = function(x, y) {
	      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	    };
	    return compose;
	  }
	  function d3_true() {
	    return true;
	  }
	  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
	    var subject = [], clip = [];
	    segments.forEach(function(segment) {
	      if ((n = segment.length - 1) <= 0) return;
	      var n, p0 = segment[0], p1 = segment[n];
	      if (d3_geo_sphericalEqual(p0, p1)) {
	        listener.lineStart();
	        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
	        listener.lineEnd();
	        return;
	      }
	      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
	      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	    });
	    clip.sort(compare);
	    d3_geo_clipPolygonLinkCircular(subject);
	    d3_geo_clipPolygonLinkCircular(clip);
	    if (!subject.length) return;
	    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
	      clip[i].e = entry = !entry;
	    }
	    var start = subject[0], points, point;
	    while (1) {
	      var current = start, isSubject = true;
	      while (current.v) if ((current = current.n) === start) return;
	      points = current.z;
	      listener.lineStart();
	      do {
	        current.v = current.o.v = true;
	        if (current.e) {
	          if (isSubject) {
	            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.n.x, 1, listener);
	          }
	          current = current.n;
	        } else {
	          if (isSubject) {
	            points = current.p.z;
	            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.p.x, -1, listener);
	          }
	          current = current.p;
	        }
	        current = current.o;
	        points = current.z;
	        isSubject = !isSubject;
	      } while (!current.v);
	      listener.lineEnd();
	    }
	  }
	  function d3_geo_clipPolygonLinkCircular(array) {
	    if (!(n = array.length)) return;
	    var n, i = 0, a = array[0], b;
	    while (++i < n) {
	      a.n = b = array[i];
	      b.p = a;
	      a = b;
	    }
	    a.n = b = array[0];
	    b.p = a;
	  }
	  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
	    this.x = point;
	    this.z = points;
	    this.o = other;
	    this.e = entry;
	    this.v = false;
	    this.n = this.p = null;
	  }
	  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
	    return function(rotate, listener) {
	      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          clip.point = pointRing;
	          clip.lineStart = ringStart;
	          clip.lineEnd = ringEnd;
	          segments = [];
	          polygon = [];
	        },
	        polygonEnd: function() {
	          clip.point = point;
	          clip.lineStart = lineStart;
	          clip.lineEnd = lineEnd;
	          segments = d3.merge(segments);
	          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
	          if (segments.length) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
	          } else if (clipStartInside) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            interpolate(null, null, 1, listener);
	            listener.lineEnd();
	          }
	          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
	          segments = polygon = null;
	        },
	        sphere: function() {
	          listener.polygonStart();
	          listener.lineStart();
	          interpolate(null, null, 1, listener);
	          listener.lineEnd();
	          listener.polygonEnd();
	        }
	      };
	      function point(λ, φ) {
	        var point = rotate(λ, φ);
	        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
	      }
	      function pointLine(λ, φ) {
	        var point = rotate(λ, φ);
	        line.point(point[0], point[1]);
	      }
	      function lineStart() {
	        clip.point = pointLine;
	        line.lineStart();
	      }
	      function lineEnd() {
	        clip.point = point;
	        line.lineEnd();
	      }
	      var segments;
	      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
	      function pointRing(λ, φ) {
	        ring.push([ λ, φ ]);
	        var point = rotate(λ, φ);
	        ringListener.point(point[0], point[1]);
	      }
	      function ringStart() {
	        ringListener.lineStart();
	        ring = [];
	      }
	      function ringEnd() {
	        pointRing(ring[0][0], ring[0][1]);
	        ringListener.lineEnd();
	        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
	        ring.pop();
	        polygon.push(ring);
	        ring = null;
	        if (!n) return;
	        if (clean & 1) {
	          segment = ringSegments[0];
	          var n = segment.length - 1, i = -1, point;
	          if (n > 0) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            while (++i < n) listener.point((point = segment[i])[0], point[1]);
	            listener.lineEnd();
	          }
	          return;
	        }
	        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
	      }
	      return clip;
	    };
	  }
	  function d3_geo_clipSegmentLength1(segment) {
	    return segment.length > 1;
	  }
	  function d3_geo_clipBufferListener() {
	    var lines = [], line;
	    return {
	      lineStart: function() {
	        lines.push(line = []);
	      },
	      point: function(λ, φ) {
	        line.push([ λ, φ ]);
	      },
	      lineEnd: d3_noop,
	      buffer: function() {
	        var buffer = lines;
	        lines = [];
	        line = null;
	        return buffer;
	      },
	      rejoin: function() {
	        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	      }
	    };
	  }
	  function d3_geo_clipSort(a, b) {
	    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
	  }
	  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
	  function d3_geo_clipAntimeridianLine(listener) {
	    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
	    return {
	      lineStart: function() {
	        listener.lineStart();
	        clean = 1;
	      },
	      point: function(λ1, φ1) {
	        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
	        if (abs(dλ - π) < ε) {
	          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          listener.point(λ1, φ0);
	          clean = 0;
	        } else if (sλ0 !== sλ1 && dλ >= π) {
	          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
	          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
	          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          clean = 0;
	        }
	        listener.point(λ0 = λ1, φ0 = φ1);
	        sλ0 = sλ1;
	      },
	      lineEnd: function() {
	        listener.lineEnd();
	        λ0 = φ0 = NaN;
	      },
	      clean: function() {
	        return 2 - clean;
	      }
	    };
	  }
	  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
	    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
	    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
	  }
	  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
	    var φ;
	    if (from == null) {
	      φ = direction * halfπ;
	      listener.point(-π, φ);
	      listener.point(0, φ);
	      listener.point(π, φ);
	      listener.point(π, 0);
	      listener.point(π, -φ);
	      listener.point(0, -φ);
	      listener.point(-π, -φ);
	      listener.point(-π, 0);
	      listener.point(-π, φ);
	    } else if (abs(from[0] - to[0]) > ε) {
	      var s = from[0] < to[0] ? π : -π;
	      φ = direction * s / 2;
	      listener.point(-s, φ);
	      listener.point(0, φ);
	      listener.point(s, φ);
	    } else {
	      listener.point(to[0], to[1]);
	    }
	  }
	  function d3_geo_pointInPolygon(point, polygon) {
	    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
	    d3_geo_areaRingSum.reset();
	    for (var i = 0, n = polygon.length; i < n; ++i) {
	      var ring = polygon[i], m = ring.length;
	      if (!m) continue;
	      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
	      while (true) {
	        if (j === m) j = 0;
	        point = ring[j];
	        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
	        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
	        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
	        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
	          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
	          d3_geo_cartesianNormalize(arc);
	          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
	          d3_geo_cartesianNormalize(intersection);
	          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
	          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
	            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
	          }
	        }
	        if (!j++) break;
	        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
	      }
	    }
	    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
	  }
	  function d3_geo_clipCircle(radius) {
	    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
	    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
	    function visible(λ, φ) {
	      return Math.cos(λ) * Math.cos(φ) > cr;
	    }
	    function clipLine(listener) {
	      var point0, c0, v0, v00, clean;
	      return {
	        lineStart: function() {
	          v00 = v0 = false;
	          clean = 1;
	        },
	        point: function(λ, φ) {
	          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
	          if (!point0 && (v00 = v0 = v)) listener.lineStart();
	          if (v !== v0) {
	            point2 = intersect(point0, point1);
	            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
	              point1[0] += ε;
	              point1[1] += ε;
	              v = visible(point1[0], point1[1]);
	            }
	          }
	          if (v !== v0) {
	            clean = 0;
	            if (v) {
	              listener.lineStart();
	              point2 = intersect(point1, point0);
	              listener.point(point2[0], point2[1]);
	            } else {
	              point2 = intersect(point0, point1);
	              listener.point(point2[0], point2[1]);
	              listener.lineEnd();
	            }
	            point0 = point2;
	          } else if (notHemisphere && point0 && smallRadius ^ v) {
	            var t;
	            if (!(c & c0) && (t = intersect(point1, point0, true))) {
	              clean = 0;
	              if (smallRadius) {
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	              } else {
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	              }
	            }
	          }
	          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
	            listener.point(point1[0], point1[1]);
	          }
	          point0 = point1, v0 = v, c0 = c;
	        },
	        lineEnd: function() {
	          if (v0) listener.lineEnd();
	          point0 = null;
	        },
	        clean: function() {
	          return clean | (v00 && v0) << 1;
	        }
	      };
	    }
	    function intersect(a, b, two) {
	      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
	      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
	      if (!determinant) return !two && a;
	      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
	      d3_geo_cartesianAdd(A, B);
	      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
	      if (t2 < 0) return;
	      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
	      d3_geo_cartesianAdd(q, A);
	      q = d3_geo_spherical(q);
	      if (!two) return q;
	      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
	      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
	      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
	      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
	      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
	        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
	        d3_geo_cartesianAdd(q1, A);
	        return [ q, d3_geo_spherical(q1) ];
	      }
	    }
	    function code(λ, φ) {
	      var r = smallRadius ? radius : π - radius, code = 0;
	      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
	      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
	      return code;
	    }
	  }
	  function d3_geom_clipLine(x0, y0, x1, y1) {
	    return function(line) {
	      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
	      r = x0 - ax;
	      if (!dx && r > 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dx > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = x1 - ax;
	      if (!dx && r < 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dx > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      r = y0 - ay;
	      if (!dy && r > 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dy > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = y1 - ay;
	      if (!dy && r < 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dy > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      if (t0 > 0) line.a = {
	        x: ax + t0 * dx,
	        y: ay + t0 * dy
	      };
	      if (t1 < 1) line.b = {
	        x: ax + t1 * dx,
	        y: ay + t1 * dy
	      };
	      return line;
	    };
	  }
	  var d3_geo_clipExtentMAX = 1e9;
	  d3.geo.clipExtent = function() {
	    var x0, y0, x1, y1, stream, clip, clipExtent = {
	      stream: function(output) {
	        if (stream) stream.valid = false;
	        stream = clip(output);
	        stream.valid = true;
	        return stream;
	      },
	      extent: function(_) {
	        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
	        if (stream) stream.valid = false, stream = null;
	        return clipExtent;
	      }
	    };
	    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
	  };
	  function d3_geo_clipExtent(x0, y0, x1, y1) {
	    return function(listener) {
	      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          listener = bufferListener;
	          segments = [];
	          polygon = [];
	          clean = true;
	        },
	        polygonEnd: function() {
	          listener = listener_;
	          segments = d3.merge(segments);
	          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
	          if (inside || visible) {
	            listener.polygonStart();
	            if (inside) {
	              listener.lineStart();
	              interpolate(null, null, 1, listener);
	              listener.lineEnd();
	            }
	            if (visible) {
	              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
	            }
	            listener.polygonEnd();
	          }
	          segments = polygon = ring = null;
	        }
	      };
	      function insidePolygon(p) {
	        var wn = 0, n = polygon.length, y = p[1];
	        for (var i = 0; i < n; ++i) {
	          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
	            b = v[j];
	            if (a[1] <= y) {
	              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
	            } else {
	              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
	            }
	            a = b;
	          }
	        }
	        return wn !== 0;
	      }
	      function interpolate(from, to, direction, listener) {
	        var a = 0, a1 = 0;
	        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
	          do {
	            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	          } while ((a = (a + direction + 4) % 4) !== a1);
	        } else {
	          listener.point(to[0], to[1]);
	        }
	      }
	      function pointVisible(x, y) {
	        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	      }
	      function point(x, y) {
	        if (pointVisible(x, y)) listener.point(x, y);
	      }
	      var x__, y__, v__, x_, y_, v_, first, clean;
	      function lineStart() {
	        clip.point = linePoint;
	        if (polygon) polygon.push(ring = []);
	        first = true;
	        v_ = false;
	        x_ = y_ = NaN;
	      }
	      function lineEnd() {
	        if (segments) {
	          linePoint(x__, y__);
	          if (v__ && v_) bufferListener.rejoin();
	          segments.push(bufferListener.buffer());
	        }
	        clip.point = point;
	        if (v_) listener.lineEnd();
	      }
	      function linePoint(x, y) {
	        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
	        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
	        var v = pointVisible(x, y);
	        if (polygon) ring.push([ x, y ]);
	        if (first) {
	          x__ = x, y__ = y, v__ = v;
	          first = false;
	          if (v) {
	            listener.lineStart();
	            listener.point(x, y);
	          }
	        } else {
	          if (v && v_) listener.point(x, y); else {
	            var l = {
	              a: {
	                x: x_,
	                y: y_
	              },
	              b: {
	                x: x,
	                y: y
	              }
	            };
	            if (clipLine(l)) {
	              if (!v_) {
	                listener.lineStart();
	                listener.point(l.a.x, l.a.y);
	              }
	              listener.point(l.b.x, l.b.y);
	              if (!v) listener.lineEnd();
	              clean = false;
	            } else if (v) {
	              listener.lineStart();
	              listener.point(x, y);
	              clean = false;
	            }
	          }
	        }
	        x_ = x, y_ = y, v_ = v;
	      }
	      return clip;
	    };
	    function corner(p, direction) {
	      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
	    }
	    function compare(a, b) {
	      return comparePoints(a.x, b.x);
	    }
	    function comparePoints(a, b) {
	      var ca = corner(a, 1), cb = corner(b, 1);
	      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
	    }
	  }
	  function d3_geo_conic(projectAt) {
	    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
	    p.parallels = function(_) {
	      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
	      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
	    };
	    return p;
	  }
	  function d3_geo_conicEqualArea(φ0, φ1) {
	    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
	    function forward(λ, φ) {
	      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
	      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = ρ0 - y;
	      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEqualArea = function() {
	    return d3_geo_conic(d3_geo_conicEqualArea);
	  }).raw = d3_geo_conicEqualArea;
	  d3.geo.albers = function() {
	    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
	  };
	  d3.geo.albersUsa = function() {
	    var lower48 = d3.geo.albers();
	    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
	    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
	    var point, pointStream = {
	      point: function(x, y) {
	        point = [ x, y ];
	      }
	    }, lower48Point, alaskaPoint, hawaiiPoint;
	    function albersUsa(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      point = null;
	      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
	      return point;
	    }
	    albersUsa.invert = function(coordinates) {
	      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
	      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
	    };
	    albersUsa.stream = function(stream) {
	      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
	      return {
	        point: function(x, y) {
	          lower48Stream.point(x, y);
	          alaskaStream.point(x, y);
	          hawaiiStream.point(x, y);
	        },
	        sphere: function() {
	          lower48Stream.sphere();
	          alaskaStream.sphere();
	          hawaiiStream.sphere();
	        },
	        lineStart: function() {
	          lower48Stream.lineStart();
	          alaskaStream.lineStart();
	          hawaiiStream.lineStart();
	        },
	        lineEnd: function() {
	          lower48Stream.lineEnd();
	          alaskaStream.lineEnd();
	          hawaiiStream.lineEnd();
	        },
	        polygonStart: function() {
	          lower48Stream.polygonStart();
	          alaskaStream.polygonStart();
	          hawaiiStream.polygonStart();
	        },
	        polygonEnd: function() {
	          lower48Stream.polygonEnd();
	          alaskaStream.polygonEnd();
	          hawaiiStream.polygonEnd();
	        }
	      };
	    };
	    albersUsa.precision = function(_) {
	      if (!arguments.length) return lower48.precision();
	      lower48.precision(_);
	      alaska.precision(_);
	      hawaii.precision(_);
	      return albersUsa;
	    };
	    albersUsa.scale = function(_) {
	      if (!arguments.length) return lower48.scale();
	      lower48.scale(_);
	      alaska.scale(_ * .35);
	      hawaii.scale(_);
	      return albersUsa.translate(lower48.translate());
	    };
	    albersUsa.translate = function(_) {
	      if (!arguments.length) return lower48.translate();
	      var k = lower48.scale(), x = +_[0], y = +_[1];
	      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
	      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      return albersUsa;
	    };
	    return albersUsa.scale(1070);
	  };
	  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_pathAreaPolygon = 0;
	      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
	      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
	    }
	  };
	  function d3_geo_pathAreaRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathArea.point = function(x, y) {
	      d3_geo_pathArea.point = nextPoint;
	      x00 = x0 = x, y00 = y0 = y;
	    };
	    function nextPoint(x, y) {
	      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
	      x0 = x, y0 = y;
	    }
	    d3_geo_pathArea.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
	  var d3_geo_pathBounds = {
	    point: d3_geo_pathBoundsPoint,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_pathBoundsPoint(x, y) {
	    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
	    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
	    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
	    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
	  }
	  function d3_geo_pathBuffer() {
	    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointCircle = d3_geo_pathBufferCircle(_);
	        return stream;
	      },
	      result: function() {
	        if (buffer.length) {
	          var result = buffer.join("");
	          buffer = [];
	          return result;
	        }
	      }
	    };
	    function point(x, y) {
	      buffer.push("M", x, ",", y, pointCircle);
	    }
	    function pointLineStart(x, y) {
	      buffer.push("M", x, ",", y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      buffer.push("L", x, ",", y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      buffer.push("Z");
	    }
	    return stream;
	  }
	  function d3_geo_pathBufferCircle(radius) {
	    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
	  }
	  var d3_geo_pathCentroid = {
	    point: d3_geo_pathCentroidPoint,
	    lineStart: d3_geo_pathCentroidLineStart,
	    lineEnd: d3_geo_pathCentroidLineEnd,
	    polygonStart: function() {
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
	      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
	    }
	  };
	  function d3_geo_pathCentroidPoint(x, y) {
	    d3_geo_centroidX0 += x;
	    d3_geo_centroidY0 += y;
	    ++d3_geo_centroidZ0;
	  }
	  function d3_geo_pathCentroidLineStart() {
	    var x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	  }
	  function d3_geo_pathCentroidLineEnd() {
	    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	  }
	  function d3_geo_pathCentroidRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      z = y0 * x - x0 * y;
	      d3_geo_centroidX2 += z * (x0 + x);
	      d3_geo_centroidY2 += z * (y0 + y);
	      d3_geo_centroidZ2 += z * 3;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	    d3_geo_pathCentroid.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  function d3_geo_pathContext(context) {
	    var pointRadius = 4.5;
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointRadius = _;
	        return stream;
	      },
	      result: d3_noop
	    };
	    function point(x, y) {
	      context.moveTo(x + pointRadius, y);
	      context.arc(x, y, pointRadius, 0, τ);
	    }
	    function pointLineStart(x, y) {
	      context.moveTo(x, y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      context.lineTo(x, y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      context.closePath();
	    }
	    return stream;
	  }
	  function d3_geo_resample(project) {
	    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
	    function resample(stream) {
	      return (maxDepth ? resampleRecursive : resampleNone)(stream);
	    }
	    function resampleNone(stream) {
	      return d3_geo_transformPoint(stream, function(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      });
	    }
	    function resampleRecursive(stream) {
	      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
	      var resample = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          stream.polygonStart();
	          resample.lineStart = ringStart;
	        },
	        polygonEnd: function() {
	          stream.polygonEnd();
	          resample.lineStart = lineStart;
	        }
	      };
	      function point(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      }
	      function lineStart() {
	        x0 = NaN;
	        resample.point = linePoint;
	        stream.lineStart();
	      }
	      function linePoint(λ, φ) {
	        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	        stream.point(x0, y0);
	      }
	      function lineEnd() {
	        resample.point = point;
	        stream.lineEnd();
	      }
	      function ringStart() {
	        lineStart();
	        resample.point = ringPoint;
	        resample.lineEnd = ringEnd;
	      }
	      function ringPoint(λ, φ) {
	        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	        resample.point = linePoint;
	      }
	      function ringEnd() {
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
	        resample.lineEnd = lineEnd;
	        lineEnd();
	      }
	      return resample;
	    }
	    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
	      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
	      if (d2 > 4 * δ2 && depth--) {
	        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
	        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
	          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
	          stream.point(x2, y2);
	          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
	        }
	      }
	    }
	    resample.precision = function(_) {
	      if (!arguments.length) return Math.sqrt(δ2);
	      maxDepth = (δ2 = _ * _) > 0 && 16;
	      return resample;
	    };
	    return resample;
	  }
	  d3.geo.path = function() {
	    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
	    function path(object) {
	      if (object) {
	        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
	        d3.geo.stream(object, cacheStream);
	      }
	      return contextStream.result();
	    }
	    path.area = function(object) {
	      d3_geo_pathAreaSum = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathArea));
	      return d3_geo_pathAreaSum;
	    };
	    path.centroid = function(object) {
	      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
	      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
	    };
	    path.bounds = function(object) {
	      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
	      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
	      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
	    };
	    path.projection = function(_) {
	      if (!arguments.length) return projection;
	      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
	      return reset();
	    };
	    path.context = function(_) {
	      if (!arguments.length) return context;
	      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
	      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	      return reset();
	    };
	    path.pointRadius = function(_) {
	      if (!arguments.length) return pointRadius;
	      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	      return path;
	    };
	    function reset() {
	      cacheStream = null;
	      return path;
	    }
	    return path.projection(d3.geo.albersUsa()).context(null);
	  };
	  function d3_geo_pathProjectStream(project) {
	    var resample = d3_geo_resample(function(x, y) {
	      return project([ x * d3_degrees, y * d3_degrees ]);
	    });
	    return function(stream) {
	      return d3_geo_projectionRadians(resample(stream));
	    };
	  }
	  d3.geo.transform = function(methods) {
	    return {
	      stream: function(stream) {
	        var transform = new d3_geo_transform(stream);
	        for (var k in methods) transform[k] = methods[k];
	        return transform;
	      }
	    };
	  };
	  function d3_geo_transform(stream) {
	    this.stream = stream;
	  }
	  d3_geo_transform.prototype = {
	    point: function(x, y) {
	      this.stream.point(x, y);
	    },
	    sphere: function() {
	      this.stream.sphere();
	    },
	    lineStart: function() {
	      this.stream.lineStart();
	    },
	    lineEnd: function() {
	      this.stream.lineEnd();
	    },
	    polygonStart: function() {
	      this.stream.polygonStart();
	    },
	    polygonEnd: function() {
	      this.stream.polygonEnd();
	    }
	  };
	  function d3_geo_transformPoint(stream, point) {
	    return {
	      point: point,
	      sphere: function() {
	        stream.sphere();
	      },
	      lineStart: function() {
	        stream.lineStart();
	      },
	      lineEnd: function() {
	        stream.lineEnd();
	      },
	      polygonStart: function() {
	        stream.polygonStart();
	      },
	      polygonEnd: function() {
	        stream.polygonEnd();
	      }
	    };
	  }
	  d3.geo.projection = d3_geo_projection;
	  d3.geo.projectionMutator = d3_geo_projectionMutator;
	  function d3_geo_projection(project) {
	    return d3_geo_projectionMutator(function() {
	      return project;
	    })();
	  }
	  function d3_geo_projectionMutator(projectAt) {
	    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
	      x = project(x, y);
	      return [ x[0] * k + δx, δy - x[1] * k ];
	    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
	    function projection(point) {
	      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
	      return [ point[0] * k + δx, δy - point[1] * k ];
	    }
	    function invert(point) {
	      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
	      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
	    }
	    projection.stream = function(output) {
	      if (stream) stream.valid = false;
	      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
	      stream.valid = true;
	      return stream;
	    };
	    projection.clipAngle = function(_) {
	      if (!arguments.length) return clipAngle;
	      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
	      return invalidate();
	    };
	    projection.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent;
	      clipExtent = _;
	      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
	      return invalidate();
	    };
	    projection.scale = function(_) {
	      if (!arguments.length) return k;
	      k = +_;
	      return reset();
	    };
	    projection.translate = function(_) {
	      if (!arguments.length) return [ x, y ];
	      x = +_[0];
	      y = +_[1];
	      return reset();
	    };
	    projection.center = function(_) {
	      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
	      λ = _[0] % 360 * d3_radians;
	      φ = _[1] % 360 * d3_radians;
	      return reset();
	    };
	    projection.rotate = function(_) {
	      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
	      δλ = _[0] % 360 * d3_radians;
	      δφ = _[1] % 360 * d3_radians;
	      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
	      return reset();
	    };
	    d3.rebind(projection, projectResample, "precision");
	    function reset() {
	      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
	      var center = project(λ, φ);
	      δx = x - center[0] * k;
	      δy = y + center[1] * k;
	      return invalidate();
	    }
	    function invalidate() {
	      if (stream) stream.valid = false, stream = null;
	      return projection;
	    }
	    return function() {
	      project = projectAt.apply(this, arguments);
	      projection.invert = project.invert && invert;
	      return reset();
	    };
	  }
	  function d3_geo_projectionRadians(stream) {
	    return d3_geo_transformPoint(stream, function(x, y) {
	      stream.point(x * d3_radians, y * d3_radians);
	    });
	  }
	  function d3_geo_equirectangular(λ, φ) {
	    return [ λ, φ ];
	  }
	  (d3.geo.equirectangular = function() {
	    return d3_geo_projection(d3_geo_equirectangular);
	  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
	  d3.geo.rotation = function(rotate) {
	    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
	    function forward(coordinates) {
	      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    }
	    forward.invert = function(coordinates) {
	      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    };
	    return forward;
	  };
	  function d3_geo_identityRotation(λ, φ) {
	    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	  }
	  d3_geo_identityRotation.invert = d3_geo_equirectangular;
	  function d3_geo_rotation(δλ, δφ, δγ) {
	    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
	  }
	  function d3_geo_forwardRotationλ(δλ) {
	    return function(λ, φ) {
	      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	    };
	  }
	  function d3_geo_rotationλ(δλ) {
	    var rotation = d3_geo_forwardRotationλ(δλ);
	    rotation.invert = d3_geo_forwardRotationλ(-δλ);
	    return rotation;
	  }
	  function d3_geo_rotationφγ(δφ, δγ) {
	    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
	    function rotation(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
	      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
	    }
	    rotation.invert = function(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
	      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
	    };
	    return rotation;
	  }
	  d3.geo.circle = function() {
	    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
	    function circle() {
	      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
	      interpolate(null, null, 1, {
	        point: function(x, y) {
	          ring.push(x = rotate(x, y));
	          x[0] *= d3_degrees, x[1] *= d3_degrees;
	        }
	      });
	      return {
	        type: "Polygon",
	        coordinates: [ ring ]
	      };
	    }
	    circle.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return circle;
	    };
	    circle.angle = function(x) {
	      if (!arguments.length) return angle;
	      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
	      return circle;
	    };
	    circle.precision = function(_) {
	      if (!arguments.length) return precision;
	      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
	      return circle;
	    };
	    return circle.angle(90);
	  };
	  function d3_geo_circleInterpolate(radius, precision) {
	    var cr = Math.cos(radius), sr = Math.sin(radius);
	    return function(from, to, direction, listener) {
	      var step = direction * precision;
	      if (from != null) {
	        from = d3_geo_circleAngle(cr, from);
	        to = d3_geo_circleAngle(cr, to);
	        if (direction > 0 ? from < to : from > to) from += direction * τ;
	      } else {
	        from = radius + direction * τ;
	        to = radius - .5 * step;
	      }
	      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
	        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
	      }
	    };
	  }
	  function d3_geo_circleAngle(cr, point) {
	    var a = d3_geo_cartesian(point);
	    a[0] -= cr;
	    d3_geo_cartesianNormalize(a);
	    var angle = d3_acos(-a[1]);
	    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
	  }
	  d3.geo.distance = function(a, b) {
	    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
	    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
	  };
	  d3.geo.graticule = function() {
	    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
	    function graticule() {
	      return {
	        type: "MultiLineString",
	        coordinates: lines()
	      };
	    }
	    function lines() {
	      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
	        return abs(x % DX) > ε;
	      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
	        return abs(y % DY) > ε;
	      }).map(y));
	    }
	    graticule.lines = function() {
	      return lines().map(function(coordinates) {
	        return {
	          type: "LineString",
	          coordinates: coordinates
	        };
	      });
	    };
	    graticule.outline = function() {
	      return {
	        type: "Polygon",
	        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
	      };
	    };
	    graticule.extent = function(_) {
	      if (!arguments.length) return graticule.minorExtent();
	      return graticule.majorExtent(_).minorExtent(_);
	    };
	    graticule.majorExtent = function(_) {
	      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
	      X0 = +_[0][0], X1 = +_[1][0];
	      Y0 = +_[0][1], Y1 = +_[1][1];
	      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.minorExtent = function(_) {
	      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	      x0 = +_[0][0], x1 = +_[1][0];
	      y0 = +_[0][1], y1 = +_[1][1];
	      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.step = function(_) {
	      if (!arguments.length) return graticule.minorStep();
	      return graticule.majorStep(_).minorStep(_);
	    };
	    graticule.majorStep = function(_) {
	      if (!arguments.length) return [ DX, DY ];
	      DX = +_[0], DY = +_[1];
	      return graticule;
	    };
	    graticule.minorStep = function(_) {
	      if (!arguments.length) return [ dx, dy ];
	      dx = +_[0], dy = +_[1];
	      return graticule;
	    };
	    graticule.precision = function(_) {
	      if (!arguments.length) return precision;
	      precision = +_;
	      x = d3_geo_graticuleX(y0, y1, 90);
	      y = d3_geo_graticuleY(x0, x1, precision);
	      X = d3_geo_graticuleX(Y0, Y1, 90);
	      Y = d3_geo_graticuleY(X0, X1, precision);
	      return graticule;
	    };
	    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
	  };
	  function d3_geo_graticuleX(y0, y1, dy) {
	    var y = d3.range(y0, y1 - ε, dy).concat(y1);
	    return function(x) {
	      return y.map(function(y) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_geo_graticuleY(x0, x1, dx) {
	    var x = d3.range(x0, x1 - ε, dx).concat(x1);
	    return function(y) {
	      return x.map(function(x) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_source(d) {
	    return d.source;
	  }
	  function d3_target(d) {
	    return d.target;
	  }
	  d3.geo.greatArc = function() {
	    var source = d3_source, source_, target = d3_target, target_;
	    function greatArc() {
	      return {
	        type: "LineString",
	        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
	      };
	    }
	    greatArc.distance = function() {
	      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
	    };
	    greatArc.source = function(_) {
	      if (!arguments.length) return source;
	      source = _, source_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.target = function(_) {
	      if (!arguments.length) return target;
	      target = _, target_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.precision = function() {
	      return arguments.length ? greatArc : 0;
	    };
	    return greatArc;
	  };
	  d3.geo.interpolate = function(source, target) {
	    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
	  };
	  function d3_geo_interpolate(x0, y0, x1, y1) {
	    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
	    var interpolate = d ? function(t) {
	      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
	      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
	    } : function() {
	      return [ x0 * d3_degrees, y0 * d3_degrees ];
	    };
	    interpolate.distance = d;
	    return interpolate;
	  }
	  d3.geo.length = function(object) {
	    d3_geo_lengthSum = 0;
	    d3.geo.stream(object, d3_geo_length);
	    return d3_geo_lengthSum;
	  };
	  var d3_geo_lengthSum;
	  var d3_geo_length = {
	    sphere: d3_noop,
	    point: d3_noop,
	    lineStart: d3_geo_lengthLineStart,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_lengthLineStart() {
	    var λ0, sinφ0, cosφ0;
	    d3_geo_length.point = function(λ, φ) {
	      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
	      d3_geo_length.point = nextPoint;
	    };
	    d3_geo_length.lineEnd = function() {
	      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
	    };
	    function nextPoint(λ, φ) {
	      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
	      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
	      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
	    }
	  }
	  function d3_geo_azimuthal(scale, angle) {
	    function azimuthal(λ, φ) {
	      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
	      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
	    }
	    azimuthal.invert = function(x, y) {
	      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
	      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
	    };
	    return azimuthal;
	  }
	  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
	    return Math.sqrt(2 / (1 + cosλcosφ));
	  }, function(ρ) {
	    return 2 * Math.asin(ρ / 2);
	  });
	  (d3.geo.azimuthalEqualArea = function() {
	    return d3_geo_projection(d3_geo_azimuthalEqualArea);
	  }).raw = d3_geo_azimuthalEqualArea;
	  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
	    var c = Math.acos(cosλcosφ);
	    return c && c / Math.sin(c);
	  }, d3_identity);
	  (d3.geo.azimuthalEquidistant = function() {
	    return d3_geo_projection(d3_geo_azimuthalEquidistant);
	  }).raw = d3_geo_azimuthalEquidistant;
	  function d3_geo_conicConformal(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), t = function(φ) {
	      return Math.tan(π / 4 + φ / 2);
	    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
	    if (!n) return d3_geo_mercator;
	    function forward(λ, φ) {
	      if (F > 0) {
	        if (φ < -halfπ + ε) φ = -halfπ + ε;
	      } else {
	        if (φ > halfπ - ε) φ = halfπ - ε;
	      }
	      var ρ = F / Math.pow(t(φ), n);
	      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
	      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
	    };
	    return forward;
	  }
	  (d3.geo.conicConformal = function() {
	    return d3_geo_conic(d3_geo_conicConformal);
	  }).raw = d3_geo_conicConformal;
	  function d3_geo_conicEquidistant(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
	    if (abs(n) < ε) return d3_geo_equirectangular;
	    function forward(λ, φ) {
	      var ρ = G - φ;
	      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = G - y;
	      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEquidistant = function() {
	    return d3_geo_conic(d3_geo_conicEquidistant);
	  }).raw = d3_geo_conicEquidistant;
	  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / cosλcosφ;
	  }, Math.atan);
	  (d3.geo.gnomonic = function() {
	    return d3_geo_projection(d3_geo_gnomonic);
	  }).raw = d3_geo_gnomonic;
	  function d3_geo_mercator(λ, φ) {
	    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
	  }
	  d3_geo_mercator.invert = function(x, y) {
	    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
	  };
	  function d3_geo_mercatorProjection(project) {
	    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
	    m.scale = function() {
	      var v = scale.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.translate = function() {
	      var v = translate.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.clipExtent = function(_) {
	      var v = clipExtent.apply(m, arguments);
	      if (v === m) {
	        if (clipAuto = _ == null) {
	          var k = π * scale(), t = translate();
	          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
	        }
	      } else if (clipAuto) {
	        v = null;
	      }
	      return v;
	    };
	    return m.clipExtent(null);
	  }
	  (d3.geo.mercator = function() {
	    return d3_geo_mercatorProjection(d3_geo_mercator);
	  }).raw = d3_geo_mercator;
	  var d3_geo_orthographic = d3_geo_azimuthal(function() {
	    return 1;
	  }, Math.asin);
	  (d3.geo.orthographic = function() {
	    return d3_geo_projection(d3_geo_orthographic);
	  }).raw = d3_geo_orthographic;
	  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / (1 + cosλcosφ);
	  }, function(ρ) {
	    return 2 * Math.atan(ρ);
	  });
	  (d3.geo.stereographic = function() {
	    return d3_geo_projection(d3_geo_stereographic);
	  }).raw = d3_geo_stereographic;
	  function d3_geo_transverseMercator(λ, φ) {
	    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
	  }
	  d3_geo_transverseMercator.invert = function(x, y) {
	    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
	  };
	  (d3.geo.transverseMercator = function() {
	    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
	    projection.center = function(_) {
	      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
	    };
	    projection.rotate = function(_) {
	      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
	      [ _[0], _[1], _[2] - 90 ]);
	    };
	    return rotate([ 0, 0, 90 ]);
	  }).raw = d3_geo_transverseMercator;
	  d3.geom = {};
	  function d3_geom_pointX(d) {
	    return d[0];
	  }
	  function d3_geom_pointY(d) {
	    return d[1];
	  }
	  d3.geom.hull = function(vertices) {
	    var x = d3_geom_pointX, y = d3_geom_pointY;
	    if (arguments.length) return hull(vertices);
	    function hull(data) {
	      if (data.length < 3) return [];
	      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
	      for (i = 0; i < n; i++) {
	        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
	      }
	      points.sort(d3_geom_hullOrder);
	      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
	      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
	      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
	      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
	      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
	      return polygon;
	    }
	    hull.x = function(_) {
	      return arguments.length ? (x = _, hull) : x;
	    };
	    hull.y = function(_) {
	      return arguments.length ? (y = _, hull) : y;
	    };
	    return hull;
	  };
	  function d3_geom_hullUpper(points) {
	    var n = points.length, hull = [ 0, 1 ], hs = 2;
	    for (var i = 2; i < n; i++) {
	      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
	      hull[hs++] = i;
	    }
	    return hull.slice(0, hs);
	  }
	  function d3_geom_hullOrder(a, b) {
	    return a[0] - b[0] || a[1] - b[1];
	  }
	  d3.geom.polygon = function(coordinates) {
	    d3_subclass(coordinates, d3_geom_polygonPrototype);
	    return coordinates;
	  };
	  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
	  d3_geom_polygonPrototype.area = function() {
	    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      area += a[1] * b[0] - a[0] * b[1];
	    }
	    return area * .5;
	  };
	  d3_geom_polygonPrototype.centroid = function(k) {
	    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
	    if (!arguments.length) k = -1 / (6 * this.area());
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      c = a[0] * b[1] - b[0] * a[1];
	      x += (a[0] + b[0]) * c;
	      y += (a[1] + b[1]) * c;
	    }
	    return [ x * k, y * k ];
	  };
	  d3_geom_polygonPrototype.clip = function(subject) {
	    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
	    while (++i < n) {
	      input = subject.slice();
	      subject.length = 0;
	      b = this[i];
	      c = input[(m = input.length - closed) - 1];
	      j = -1;
	      while (++j < m) {
	        d = input[j];
	        if (d3_geom_polygonInside(d, a, b)) {
	          if (!d3_geom_polygonInside(c, a, b)) {
	            subject.push(d3_geom_polygonIntersect(c, d, a, b));
	          }
	          subject.push(d);
	        } else if (d3_geom_polygonInside(c, a, b)) {
	          subject.push(d3_geom_polygonIntersect(c, d, a, b));
	        }
	        c = d;
	      }
	      if (closed) subject.push(subject[0]);
	      a = b;
	    }
	    return subject;
	  };
	  function d3_geom_polygonInside(p, a, b) {
	    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
	  }
	  function d3_geom_polygonIntersect(c, d, a, b) {
	    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
	    return [ x1 + ua * x21, y1 + ua * y21 ];
	  }
	  function d3_geom_polygonClosed(coordinates) {
	    var a = coordinates[0], b = coordinates[coordinates.length - 1];
	    return !(a[0] - b[0] || a[1] - b[1]);
	  }
	  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
	  function d3_geom_voronoiBeach() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.edge = this.site = this.circle = null;
	  }
	  function d3_geom_voronoiCreateBeach(site) {
	    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
	    beach.site = site;
	    return beach;
	  }
	  function d3_geom_voronoiDetachBeach(beach) {
	    d3_geom_voronoiDetachCircle(beach);
	    d3_geom_voronoiBeaches.remove(beach);
	    d3_geom_voronoiBeachPool.push(beach);
	    d3_geom_voronoiRedBlackNode(beach);
	  }
	  function d3_geom_voronoiRemoveBeach(beach) {
	    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
	      x: x,
	      y: y
	    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
	    d3_geom_voronoiDetachBeach(beach);
	    var lArc = previous;
	    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
	      previous = lArc.P;
	      disappearing.unshift(lArc);
	      d3_geom_voronoiDetachBeach(lArc);
	      lArc = previous;
	    }
	    disappearing.unshift(lArc);
	    d3_geom_voronoiDetachCircle(lArc);
	    var rArc = next;
	    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
	      next = rArc.N;
	      disappearing.push(rArc);
	      d3_geom_voronoiDetachBeach(rArc);
	      rArc = next;
	    }
	    disappearing.push(rArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var nArcs = disappearing.length, iArc;
	    for (iArc = 1; iArc < nArcs; ++iArc) {
	      rArc = disappearing[iArc];
	      lArc = disappearing[iArc - 1];
	      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	    }
	    lArc = disappearing[0];
	    rArc = disappearing[nArcs - 1];
	    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiAddBeach(site) {
	    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
	    while (node) {
	      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
	      if (dxl > ε) node = node.L; else {
	        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
	        if (dxr > ε) {
	          if (!node.R) {
	            lArc = node;
	            break;
	          }
	          node = node.R;
	        } else {
	          if (dxl > -ε) {
	            lArc = node.P;
	            rArc = node;
	          } else if (dxr > -ε) {
	            lArc = node;
	            rArc = node.N;
	          } else {
	            lArc = rArc = node;
	          }
	          break;
	        }
	      }
	    }
	    var newArc = d3_geom_voronoiCreateBeach(site);
	    d3_geom_voronoiBeaches.insert(lArc, newArc);
	    if (!lArc && !rArc) return;
	    if (lArc === rArc) {
	      d3_geom_voronoiDetachCircle(lArc);
	      rArc = d3_geom_voronoiCreateBeach(lArc.site);
	      d3_geom_voronoiBeaches.insert(newArc, rArc);
	      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      d3_geom_voronoiAttachCircle(lArc);
	      d3_geom_voronoiAttachCircle(rArc);
	      return;
	    }
	    if (!rArc) {
	      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      return;
	    }
	    d3_geom_voronoiDetachCircle(lArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
	      x: (cy * hb - by * hc) / d + ax,
	      y: (bx * hc - cx * hb) / d + ay
	    };
	    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
	    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
	    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
	    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
	    if (!pby2) return rfocx;
	    var lArc = arc.P;
	    if (!lArc) return -Infinity;
	    site = lArc.site;
	    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
	    if (!plby2) return lfocx;
	    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
	    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	    return (rfocx + lfocx) / 2;
	  }
	  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
	    var rArc = arc.N;
	    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
	    var site = arc.site;
	    return site.y === directrix ? site.x : Infinity;
	  }
	  function d3_geom_voronoiCell(site) {
	    this.site = site;
	    this.edges = [];
	  }
	  d3_geom_voronoiCell.prototype.prepare = function() {
	    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
	    while (iHalfEdge--) {
	      edge = halfEdges[iHalfEdge].edge;
	      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
	    }
	    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
	    return halfEdges.length;
	  };
	  function d3_geom_voronoiCloseCells(extent) {
	    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
	    while (iCell--) {
	      cell = cells[iCell];
	      if (!cell || !cell.prepare()) continue;
	      halfEdges = cell.edges;
	      nHalfEdges = halfEdges.length;
	      iHalfEdge = 0;
	      while (iHalfEdge < nHalfEdges) {
	        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
	        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
	        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
	          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
	            x: x0,
	            y: abs(x2 - x0) < ε ? y2 : y1
	          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
	            x: abs(y2 - y1) < ε ? x2 : x1,
	            y: y1
	          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
	            x: x1,
	            y: abs(x2 - x1) < ε ? y2 : y0
	          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
	            x: abs(y2 - y0) < ε ? x2 : x0,
	            y: y0
	          } : null), cell.site, null));
	          ++nHalfEdges;
	        }
	      }
	    }
	  }
	  function d3_geom_voronoiHalfEdgeOrder(a, b) {
	    return b.angle - a.angle;
	  }
	  function d3_geom_voronoiCircle() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.x = this.y = this.arc = this.site = this.cy = null;
	  }
	  function d3_geom_voronoiAttachCircle(arc) {
	    var lArc = arc.P, rArc = arc.N;
	    if (!lArc || !rArc) return;
	    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
	    if (lSite === rSite) return;
	    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
	    var d = 2 * (ax * cy - ay * cx);
	    if (d >= -ε2) return;
	    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
	    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
	    circle.arc = arc;
	    circle.site = cSite;
	    circle.x = x + bx;
	    circle.y = cy + Math.sqrt(x * x + y * y);
	    circle.cy = cy;
	    arc.circle = circle;
	    var before = null, node = d3_geom_voronoiCircles._;
	    while (node) {
	      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
	        if (node.L) node = node.L; else {
	          before = node.P;
	          break;
	        }
	      } else {
	        if (node.R) node = node.R; else {
	          before = node;
	          break;
	        }
	      }
	    }
	    d3_geom_voronoiCircles.insert(before, circle);
	    if (!before) d3_geom_voronoiFirstCircle = circle;
	  }
	  function d3_geom_voronoiDetachCircle(arc) {
	    var circle = arc.circle;
	    if (circle) {
	      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
	      d3_geom_voronoiCircles.remove(circle);
	      d3_geom_voronoiCirclePool.push(circle);
	      d3_geom_voronoiRedBlackNode(circle);
	      arc.circle = null;
	    }
	  }
	  function d3_geom_voronoiClipEdges(extent) {
	    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
	    while (i--) {
	      e = edges[i];
	      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
	        e.a = e.b = null;
	        edges.splice(i, 1);
	      }
	    }
	  }
	  function d3_geom_voronoiConnectEdge(edge, extent) {
	    var vb = edge.b;
	    if (vb) return true;
	    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
	    if (ry === ly) {
	      if (fx < x0 || fx >= x1) return;
	      if (lx > rx) {
	        if (!va) va = {
	          x: fx,
	          y: y0
	        }; else if (va.y >= y1) return;
	        vb = {
	          x: fx,
	          y: y1
	        };
	      } else {
	        if (!va) va = {
	          x: fx,
	          y: y1
	        }; else if (va.y < y0) return;
	        vb = {
	          x: fx,
	          y: y0
	        };
	      }
	    } else {
	      fm = (lx - rx) / (ry - ly);
	      fb = fy - fm * fx;
	      if (fm < -1 || fm > 1) {
	        if (lx > rx) {
	          if (!va) va = {
	            x: (y0 - fb) / fm,
	            y: y0
	          }; else if (va.y >= y1) return;
	          vb = {
	            x: (y1 - fb) / fm,
	            y: y1
	          };
	        } else {
	          if (!va) va = {
	            x: (y1 - fb) / fm,
	            y: y1
	          }; else if (va.y < y0) return;
	          vb = {
	            x: (y0 - fb) / fm,
	            y: y0
	          };
	        }
	      } else {
	        if (ly < ry) {
	          if (!va) va = {
	            x: x0,
	            y: fm * x0 + fb
	          }; else if (va.x >= x1) return;
	          vb = {
	            x: x1,
	            y: fm * x1 + fb
	          };
	        } else {
	          if (!va) va = {
	            x: x1,
	            y: fm * x1 + fb
	          }; else if (va.x < x0) return;
	          vb = {
	            x: x0,
	            y: fm * x0 + fb
	          };
	        }
	      }
	    }
	    edge.a = va;
	    edge.b = vb;
	    return true;
	  }
	  function d3_geom_voronoiEdge(lSite, rSite) {
	    this.l = lSite;
	    this.r = rSite;
	    this.a = this.b = null;
	  }
	  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, rSite);
	    d3_geom_voronoiEdges.push(edge);
	    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
	    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
	    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
	    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
	    return edge;
	  }
	  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, null);
	    edge.a = va;
	    edge.b = vb;
	    d3_geom_voronoiEdges.push(edge);
	    return edge;
	  }
	  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
	    if (!edge.a && !edge.b) {
	      edge.a = vertex;
	      edge.l = lSite;
	      edge.r = rSite;
	    } else if (edge.l === rSite) {
	      edge.b = vertex;
	    } else {
	      edge.a = vertex;
	    }
	  }
	  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
	    var va = edge.a, vb = edge.b;
	    this.edge = edge;
	    this.site = lSite;
	    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
	  }
	  d3_geom_voronoiHalfEdge.prototype = {
	    start: function() {
	      return this.edge.l === this.site ? this.edge.a : this.edge.b;
	    },
	    end: function() {
	      return this.edge.l === this.site ? this.edge.b : this.edge.a;
	    }
	  };
	  function d3_geom_voronoiRedBlackTree() {
	    this._ = null;
	  }
	  function d3_geom_voronoiRedBlackNode(node) {
	    node.U = node.C = node.L = node.R = node.P = node.N = null;
	  }
	  d3_geom_voronoiRedBlackTree.prototype = {
	    insert: function(after, node) {
	      var parent, grandpa, uncle;
	      if (after) {
	        node.P = after;
	        node.N = after.N;
	        if (after.N) after.N.P = node;
	        after.N = node;
	        if (after.R) {
	          after = after.R;
	          while (after.L) after = after.L;
	          after.L = node;
	        } else {
	          after.R = node;
	        }
	        parent = after;
	      } else if (this._) {
	        after = d3_geom_voronoiRedBlackFirst(this._);
	        node.P = null;
	        node.N = after;
	        after.P = after.L = node;
	        parent = after;
	      } else {
	        node.P = node.N = null;
	        this._ = node;
	        parent = null;
	      }
	      node.L = node.R = null;
	      node.U = parent;
	      node.C = true;
	      after = node;
	      while (parent && parent.C) {
	        grandpa = parent.U;
	        if (parent === grandpa.L) {
	          uncle = grandpa.R;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.R) {
	              d3_geom_voronoiRedBlackRotateLeft(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
	          }
	        } else {
	          uncle = grandpa.L;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.L) {
	              d3_geom_voronoiRedBlackRotateRight(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
	          }
	        }
	        parent = after.U;
	      }
	      this._.C = false;
	    },
	    remove: function(node) {
	      if (node.N) node.N.P = node.P;
	      if (node.P) node.P.N = node.N;
	      node.N = node.P = null;
	      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
	      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
	      if (parent) {
	        if (parent.L === node) parent.L = next; else parent.R = next;
	      } else {
	        this._ = next;
	      }
	      if (left && right) {
	        red = next.C;
	        next.C = node.C;
	        next.L = left;
	        left.U = next;
	        if (next !== right) {
	          parent = next.U;
	          next.U = node.U;
	          node = next.R;
	          parent.L = node;
	          next.R = right;
	          right.U = next;
	        } else {
	          next.U = parent;
	          parent = next;
	          node = next.R;
	        }
	      } else {
	        red = node.C;
	        node = next;
	      }
	      if (node) node.U = parent;
	      if (red) return;
	      if (node && node.C) {
	        node.C = false;
	        return;
	      }
	      do {
	        if (node === this._) break;
	        if (node === parent.L) {
	          sibling = parent.R;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            sibling = parent.R;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.R || !sibling.R.C) {
	              sibling.L.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateRight(this, sibling);
	              sibling = parent.R;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.R.C = false;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            node = this._;
	            break;
	          }
	        } else {
	          sibling = parent.L;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            sibling = parent.L;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.L || !sibling.L.C) {
	              sibling.R.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
	              sibling = parent.L;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.L.C = false;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            node = this._;
	            break;
	          }
	        }
	        sibling.C = true;
	        node = parent;
	        parent = parent.U;
	      } while (!node.C);
	      if (node) node.C = false;
	    }
	  };
	  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
	    var p = node, q = node.R, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.R = q.L;
	    if (p.R) p.R.U = p;
	    q.L = p;
	  }
	  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
	    var p = node, q = node.L, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.L = q.R;
	    if (p.L) p.L.U = p;
	    q.R = p;
	  }
	  function d3_geom_voronoiRedBlackFirst(node) {
	    while (node.L) node = node.L;
	    return node;
	  }
	  function d3_geom_voronoi(sites, bbox) {
	    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
	    d3_geom_voronoiEdges = [];
	    d3_geom_voronoiCells = new Array(sites.length);
	    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
	    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
	    while (true) {
	      circle = d3_geom_voronoiFirstCircle;
	      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
	        if (site.x !== x0 || site.y !== y0) {
	          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
	          d3_geom_voronoiAddBeach(site);
	          x0 = site.x, y0 = site.y;
	        }
	        site = sites.pop();
	      } else if (circle) {
	        d3_geom_voronoiRemoveBeach(circle.arc);
	      } else {
	        break;
	      }
	    }
	    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
	    var diagram = {
	      cells: d3_geom_voronoiCells,
	      edges: d3_geom_voronoiEdges
	    };
	    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
	    return diagram;
	  }
	  function d3_geom_voronoiVertexOrder(a, b) {
	    return b.y - a.y || b.x - a.x;
	  }
	  d3.geom.voronoi = function(points) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
	    if (points) return voronoi(points);
	    function voronoi(data) {
	      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
	      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
	        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
	          var s = e.start();
	          return [ s.x, s.y ];
	        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
	        polygon.point = data[i];
	      });
	      return polygons;
	    }
	    function sites(data) {
	      return data.map(function(d, i) {
	        return {
	          x: Math.round(fx(d, i) / ε) * ε,
	          y: Math.round(fy(d, i) / ε) * ε,
	          i: i
	        };
	      });
	    }
	    voronoi.links = function(data) {
	      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
	        return edge.l && edge.r;
	      }).map(function(edge) {
	        return {
	          source: data[edge.l.i],
	          target: data[edge.r.i]
	        };
	      });
	    };
	    voronoi.triangles = function(data) {
	      var triangles = [];
	      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
	        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
	        while (++j < m) {
	          e0 = e1;
	          s0 = s1;
	          e1 = edges[j].edge;
	          s1 = e1.l === site ? e1.r : e1.l;
	          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
	            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
	          }
	        }
	      });
	      return triangles;
	    };
	    voronoi.x = function(_) {
	      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
	    };
	    voronoi.y = function(_) {
	      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
	    };
	    voronoi.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
	      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
	      return voronoi;
	    };
	    voronoi.size = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
	      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
	    };
	    return voronoi;
	  };
	  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
	  function d3_geom_voronoiTriangleArea(a, b, c) {
	    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
	  }
	  d3.geom.delaunay = function(vertices) {
	    return d3.geom.voronoi().triangles(vertices);
	  };
	  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
	    if (compat = arguments.length) {
	      x = d3_geom_quadtreeCompatX;
	      y = d3_geom_quadtreeCompatY;
	      if (compat === 3) {
	        y2 = y1;
	        x2 = x1;
	        y1 = x1 = 0;
	      }
	      return quadtree(points);
	    }
	    function quadtree(data) {
	      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
	      if (x1 != null) {
	        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
	      } else {
	        x2_ = y2_ = -(x1_ = y1_ = Infinity);
	        xs = [], ys = [];
	        n = data.length;
	        if (compat) for (i = 0; i < n; ++i) {
	          d = data[i];
	          if (d.x < x1_) x1_ = d.x;
	          if (d.y < y1_) y1_ = d.y;
	          if (d.x > x2_) x2_ = d.x;
	          if (d.y > y2_) y2_ = d.y;
	          xs.push(d.x);
	          ys.push(d.y);
	        } else for (i = 0; i < n; ++i) {
	          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
	          if (x_ < x1_) x1_ = x_;
	          if (y_ < y1_) y1_ = y_;
	          if (x_ > x2_) x2_ = x_;
	          if (y_ > y2_) y2_ = y_;
	          xs.push(x_);
	          ys.push(y_);
	        }
	      }
	      var dx = x2_ - x1_, dy = y2_ - y1_;
	      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
	      function insert(n, d, x, y, x1, y1, x2, y2) {
	        if (isNaN(x) || isNaN(y)) return;
	        if (n.leaf) {
	          var nx = n.x, ny = n.y;
	          if (nx != null) {
	            if (abs(nx - x) + abs(ny - y) < .01) {
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            } else {
	              var nPoint = n.point;
	              n.x = n.y = n.point = null;
	              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            }
	          } else {
	            n.x = x, n.y = y, n.point = d;
	          }
	        } else {
	          insertChild(n, d, x, y, x1, y1, x2, y2);
	        }
	      }
	      function insertChild(n, d, x, y, x1, y1, x2, y2) {
	        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
	        n.leaf = false;
	        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
	        if (right) x1 = xm; else x2 = xm;
	        if (below) y1 = ym; else y2 = ym;
	        insert(n, d, x, y, x1, y1, x2, y2);
	      }
	      var root = d3_geom_quadtreeNode();
	      root.add = function(d) {
	        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
	      };
	      root.visit = function(f) {
	        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
	      };
	      root.find = function(point) {
	        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
	      };
	      i = -1;
	      if (x1 == null) {
	        while (++i < n) {
	          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
	        }
	        --i;
	      } else data.forEach(root.add);
	      xs = ys = data = d = null;
	      return root;
	    }
	    quadtree.x = function(_) {
	      return arguments.length ? (x = _, quadtree) : x;
	    };
	    quadtree.y = function(_) {
	      return arguments.length ? (y = _, quadtree) : y;
	    };
	    quadtree.extent = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
	      y2 = +_[1][1];
	      return quadtree;
	    };
	    quadtree.size = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
	      return quadtree;
	    };
	    return quadtree;
	  };
	  function d3_geom_quadtreeCompatX(d) {
	    return d.x;
	  }
	  function d3_geom_quadtreeCompatY(d) {
	    return d.y;
	  }
	  function d3_geom_quadtreeNode() {
	    return {
	      leaf: true,
	      nodes: [],
	      point: null,
	      x: null,
	      y: null
	    };
	  }
	  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
	    if (!f(node, x1, y1, x2, y2)) {
	      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
	      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
	      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
	      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
	      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
	    }
	  }
	  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
	    var minDistance2 = Infinity, closestPoint;
	    (function find(node, x1, y1, x2, y2) {
	      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
	      if (point = node.point) {
	        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
	        if (distance2 < minDistance2) {
	          var distance = Math.sqrt(minDistance2 = distance2);
	          x0 = x - distance, y0 = y - distance;
	          x3 = x + distance, y3 = y + distance;
	          closestPoint = point;
	        }
	      }
	      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
	      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
	        if (node = children[i & 3]) switch (i & 3) {
	         case 0:
	          find(node, x1, y1, xm, ym);
	          break;

	         case 1:
	          find(node, xm, y1, x2, ym);
	          break;

	         case 2:
	          find(node, x1, ym, xm, y2);
	          break;

	         case 3:
	          find(node, xm, ym, x2, y2);
	          break;
	        }
	      }
	    })(root, x0, y0, x3, y3);
	    return closestPoint;
	  }
	  d3.interpolateRgb = d3_interpolateRgb;
	  function d3_interpolateRgb(a, b) {
	    a = d3.rgb(a);
	    b = d3.rgb(b);
	    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
	    return function(t) {
	      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
	    };
	  }
	  d3.interpolateObject = d3_interpolateObject;
	  function d3_interpolateObject(a, b) {
	    var i = {}, c = {}, k;
	    for (k in a) {
	      if (k in b) {
	        i[k] = d3_interpolate(a[k], b[k]);
	      } else {
	        c[k] = a[k];
	      }
	    }
	    for (k in b) {
	      if (!(k in a)) {
	        c[k] = b[k];
	      }
	    }
	    return function(t) {
	      for (k in i) c[k] = i[k](t);
	      return c;
	    };
	  }
	  d3.interpolateNumber = d3_interpolateNumber;
	  function d3_interpolateNumber(a, b) {
	    a = +a, b = +b;
	    return function(t) {
	      return a * (1 - t) + b * t;
	    };
	  }
	  d3.interpolateString = d3_interpolateString;
	  function d3_interpolateString(a, b) {
	    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
	    a = a + "", b = b + "";
	    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
	      if ((bs = bm.index) > bi) {
	        bs = b.slice(bi, bs);
	        if (s[i]) s[i] += bs; else s[++i] = bs;
	      }
	      if ((am = am[0]) === (bm = bm[0])) {
	        if (s[i]) s[i] += bm; else s[++i] = bm;
	      } else {
	        s[++i] = null;
	        q.push({
	          i: i,
	          x: d3_interpolateNumber(am, bm)
	        });
	      }
	      bi = d3_interpolate_numberB.lastIndex;
	    }
	    if (bi < b.length) {
	      bs = b.slice(bi);
	      if (s[i]) s[i] += bs; else s[++i] = bs;
	    }
	    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
	      return b(t) + "";
	    }) : function() {
	      return b;
	    } : (b = q.length, function(t) {
	      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    });
	  }
	  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
	  d3.interpolate = d3_interpolate;
	  function d3_interpolate(a, b) {
	    var i = d3.interpolators.length, f;
	    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
	    return f;
	  }
	  d3.interpolators = [ function(a, b) {
	    var t = typeof b;
	    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
	  } ];
	  d3.interpolateArray = d3_interpolateArray;
	  function d3_interpolateArray(a, b) {
	    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
	    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
	    for (;i < na; ++i) c[i] = a[i];
	    for (;i < nb; ++i) c[i] = b[i];
	    return function(t) {
	      for (i = 0; i < n0; ++i) c[i] = x[i](t);
	      return c;
	    };
	  }
	  var d3_ease_default = function() {
	    return d3_identity;
	  };
	  var d3_ease = d3.map({
	    linear: d3_ease_default,
	    poly: d3_ease_poly,
	    quad: function() {
	      return d3_ease_quad;
	    },
	    cubic: function() {
	      return d3_ease_cubic;
	    },
	    sin: function() {
	      return d3_ease_sin;
	    },
	    exp: function() {
	      return d3_ease_exp;
	    },
	    circle: function() {
	      return d3_ease_circle;
	    },
	    elastic: d3_ease_elastic,
	    back: d3_ease_back,
	    bounce: function() {
	      return d3_ease_bounce;
	    }
	  });
	  var d3_ease_mode = d3.map({
	    "in": d3_identity,
	    out: d3_ease_reverse,
	    "in-out": d3_ease_reflect,
	    "out-in": function(f) {
	      return d3_ease_reflect(d3_ease_reverse(f));
	    }
	  });
	  d3.ease = function(name) {
	    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
	    t = d3_ease.get(t) || d3_ease_default;
	    m = d3_ease_mode.get(m) || d3_identity;
	    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
	  };
	  function d3_ease_clamp(f) {
	    return function(t) {
	      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
	    };
	  }
	  function d3_ease_reverse(f) {
	    return function(t) {
	      return 1 - f(1 - t);
	    };
	  }
	  function d3_ease_reflect(f) {
	    return function(t) {
	      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
	    };
	  }
	  function d3_ease_quad(t) {
	    return t * t;
	  }
	  function d3_ease_cubic(t) {
	    return t * t * t;
	  }
	  function d3_ease_cubicInOut(t) {
	    if (t <= 0) return 0;
	    if (t >= 1) return 1;
	    var t2 = t * t, t3 = t2 * t;
	    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
	  }
	  function d3_ease_poly(e) {
	    return function(t) {
	      return Math.pow(t, e);
	    };
	  }
	  function d3_ease_sin(t) {
	    return 1 - Math.cos(t * halfπ);
	  }
	  function d3_ease_exp(t) {
	    return Math.pow(2, 10 * (t - 1));
	  }
	  function d3_ease_circle(t) {
	    return 1 - Math.sqrt(1 - t * t);
	  }
	  function d3_ease_elastic(a, p) {
	    var s;
	    if (arguments.length < 2) p = .45;
	    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
	    return function(t) {
	      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
	    };
	  }
	  function d3_ease_back(s) {
	    if (!s) s = 1.70158;
	    return function(t) {
	      return t * t * ((s + 1) * t - s);
	    };
	  }
	  function d3_ease_bounce(t) {
	    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
	  }
	  d3.interpolateHcl = d3_interpolateHcl;
	  function d3_interpolateHcl(a, b) {
	    a = d3.hcl(a);
	    b = d3.hcl(b);
	    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
	    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateHsl = d3_interpolateHsl;
	  function d3_interpolateHsl(a, b) {
	    a = d3.hsl(a);
	    b = d3.hsl(b);
	    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
	    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateLab = d3_interpolateLab;
	  function d3_interpolateLab(a, b) {
	    a = d3.lab(a);
	    b = d3.lab(b);
	    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
	    return function(t) {
	      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
	    };
	  }
	  d3.interpolateRound = d3_interpolateRound;
	  function d3_interpolateRound(a, b) {
	    b -= a;
	    return function(t) {
	      return Math.round(a + b * t);
	    };
	  }
	  d3.transform = function(string) {
	    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
	    return (d3.transform = function(string) {
	      if (string != null) {
	        g.setAttribute("transform", string);
	        var t = g.transform.baseVal.consolidate();
	      }
	      return new d3_transform(t ? t.matrix : d3_transformIdentity);
	    })(string);
	  };
	  function d3_transform(m) {
	    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
	    if (r0[0] * r1[1] < r1[0] * r0[1]) {
	      r0[0] *= -1;
	      r0[1] *= -1;
	      kx *= -1;
	      kz *= -1;
	    }
	    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
	    this.translate = [ m.e, m.f ];
	    this.scale = [ kx, ky ];
	    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
	  }
	  d3_transform.prototype.toString = function() {
	    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
	  };
	  function d3_transformDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	  }
	  function d3_transformNormalize(a) {
	    var k = Math.sqrt(d3_transformDot(a, a));
	    if (k) {
	      a[0] /= k;
	      a[1] /= k;
	    }
	    return k;
	  }
	  function d3_transformCombine(a, b, k) {
	    a[0] += k * b[0];
	    a[1] += k * b[1];
	    return a;
	  }
	  var d3_transformIdentity = {
	    a: 1,
	    b: 0,
	    c: 0,
	    d: 1,
	    e: 0,
	    f: 0
	  };
	  d3.interpolateTransform = d3_interpolateTransform;
	  function d3_interpolateTransformPop(s) {
	    return s.length ? s.pop() + "," : "";
	  }
	  function d3_interpolateTranslate(ta, tb, s, q) {
	    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
	      var i = s.push("translate(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: d3_interpolateNumber(ta[0], tb[0])
	      }, {
	        i: i - 2,
	        x: d3_interpolateNumber(ta[1], tb[1])
	      });
	    } else if (tb[0] || tb[1]) {
	      s.push("translate(" + tb + ")");
	    }
	  }
	  function d3_interpolateRotate(ra, rb, s, q) {
	    if (ra !== rb) {
	      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
	      q.push({
	        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
	        x: d3_interpolateNumber(ra, rb)
	      });
	    } else if (rb) {
	      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
	    }
	  }
	  function d3_interpolateSkew(wa, wb, s, q) {
	    if (wa !== wb) {
	      q.push({
	        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
	        x: d3_interpolateNumber(wa, wb)
	      });
	    } else if (wb) {
	      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
	    }
	  }
	  function d3_interpolateScale(ka, kb, s, q) {
	    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
	      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: d3_interpolateNumber(ka[0], kb[0])
	      }, {
	        i: i - 2,
	        x: d3_interpolateNumber(ka[1], kb[1])
	      });
	    } else if (kb[0] !== 1 || kb[1] !== 1) {
	      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
	    }
	  }
	  function d3_interpolateTransform(a, b) {
	    var s = [], q = [];
	    a = d3.transform(a), b = d3.transform(b);
	    d3_interpolateTranslate(a.translate, b.translate, s, q);
	    d3_interpolateRotate(a.rotate, b.rotate, s, q);
	    d3_interpolateSkew(a.skew, b.skew, s, q);
	    d3_interpolateScale(a.scale, b.scale, s, q);
	    a = b = null;
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  }
	  function d3_uninterpolateNumber(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return (x - a) / b;
	    };
	  }
	  function d3_uninterpolateClamp(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return Math.max(0, Math.min(1, (x - a) / b));
	    };
	  }
	  d3.layout = {};
	  d3.layout.bundle = function() {
	    return function(links) {
	      var paths = [], i = -1, n = links.length;
	      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
	      return paths;
	    };
	  };
	  function d3_layout_bundlePath(link) {
	    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
	    while (start !== lca) {
	      start = start.parent;
	      points.push(start);
	    }
	    var k = points.length;
	    while (end !== lca) {
	      points.splice(k, 0, end);
	      end = end.parent;
	    }
	    return points;
	  }
	  function d3_layout_bundleAncestors(node) {
	    var ancestors = [], parent = node.parent;
	    while (parent != null) {
	      ancestors.push(node);
	      node = parent;
	      parent = parent.parent;
	    }
	    ancestors.push(node);
	    return ancestors;
	  }
	  function d3_layout_bundleLeastCommonAncestor(a, b) {
	    if (a === b) return a;
	    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
	    while (aNode === bNode) {
	      sharedNode = aNode;
	      aNode = aNodes.pop();
	      bNode = bNodes.pop();
	    }
	    return sharedNode;
	  }
	  d3.layout.chord = function() {
	    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
	    function relayout() {
	      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
	      chords = [];
	      groups = [];
	      k = 0, i = -1;
	      while (++i < n) {
	        x = 0, j = -1;
	        while (++j < n) {
	          x += matrix[i][j];
	        }
	        groupSums.push(x);
	        subgroupIndex.push(d3.range(n));
	        k += x;
	      }
	      if (sortGroups) {
	        groupIndex.sort(function(a, b) {
	          return sortGroups(groupSums[a], groupSums[b]);
	        });
	      }
	      if (sortSubgroups) {
	        subgroupIndex.forEach(function(d, i) {
	          d.sort(function(a, b) {
	            return sortSubgroups(matrix[i][a], matrix[i][b]);
	          });
	        });
	      }
	      k = (τ - padding * n) / k;
	      x = 0, i = -1;
	      while (++i < n) {
	        x0 = x, j = -1;
	        while (++j < n) {
	          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
	          subgroups[di + "-" + dj] = {
	            index: di,
	            subindex: dj,
	            startAngle: a0,
	            endAngle: a1,
	            value: v
	          };
	        }
	        groups[di] = {
	          index: di,
	          startAngle: x0,
	          endAngle: x,
	          value: groupSums[di]
	        };
	        x += padding;
	      }
	      i = -1;
	      while (++i < n) {
	        j = i - 1;
	        while (++j < n) {
	          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
	          if (source.value || target.value) {
	            chords.push(source.value < target.value ? {
	              source: target,
	              target: source
	            } : {
	              source: source,
	              target: target
	            });
	          }
	        }
	      }
	      if (sortChords) resort();
	    }
	    function resort() {
	      chords.sort(function(a, b) {
	        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
	      });
	    }
	    chord.matrix = function(x) {
	      if (!arguments.length) return matrix;
	      n = (matrix = x) && matrix.length;
	      chords = groups = null;
	      return chord;
	    };
	    chord.padding = function(x) {
	      if (!arguments.length) return padding;
	      padding = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortGroups = function(x) {
	      if (!arguments.length) return sortGroups;
	      sortGroups = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortSubgroups = function(x) {
	      if (!arguments.length) return sortSubgroups;
	      sortSubgroups = x;
	      chords = null;
	      return chord;
	    };
	    chord.sortChords = function(x) {
	      if (!arguments.length) return sortChords;
	      sortChords = x;
	      if (chords) resort();
	      return chord;
	    };
	    chord.chords = function() {
	      if (!chords) relayout();
	      return chords;
	    };
	    chord.groups = function() {
	      if (!groups) relayout();
	      return groups;
	    };
	    return chord;
	  };
	  d3.layout.force = function() {
	    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
	    function repulse(node) {
	      return function(quad, x1, _, x2) {
	        if (quad.point !== node) {
	          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
	          if (dw * dw / theta2 < dn) {
	            if (dn < chargeDistance2) {
	              var k = quad.charge / dn;
	              node.px -= dx * k;
	              node.py -= dy * k;
	            }
	            return true;
	          }
	          if (quad.point && dn && dn < chargeDistance2) {
	            var k = quad.pointCharge / dn;
	            node.px -= dx * k;
	            node.py -= dy * k;
	          }
	        }
	        return !quad.charge;
	      };
	    }
	    force.tick = function() {
	      if ((alpha *= .99) < .005) {
	        timer = null;
	        event.end({
	          type: "end",
	          alpha: alpha = 0
	        });
	        return true;
	      }
	      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        s = o.source;
	        t = o.target;
	        x = t.x - s.x;
	        y = t.y - s.y;
	        if (l = x * x + y * y) {
	          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
	          x *= l;
	          y *= l;
	          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
	          t.y -= y * k;
	          s.x += x * (k = 1 - k);
	          s.y += y * k;
	        }
	      }
	      if (k = alpha * gravity) {
	        x = size[0] / 2;
	        y = size[1] / 2;
	        i = -1;
	        if (k) while (++i < n) {
	          o = nodes[i];
	          o.x += (x - o.x) * k;
	          o.y += (y - o.y) * k;
	        }
	      }
	      if (charge) {
	        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
	        i = -1;
	        while (++i < n) {
	          if (!(o = nodes[i]).fixed) {
	            q.visit(repulse(o));
	          }
	        }
	      }
	      i = -1;
	      while (++i < n) {
	        o = nodes[i];
	        if (o.fixed) {
	          o.x = o.px;
	          o.y = o.py;
	        } else {
	          o.x -= (o.px - (o.px = o.x)) * friction;
	          o.y -= (o.py - (o.py = o.y)) * friction;
	        }
	      }
	      event.tick({
	        type: "tick",
	        alpha: alpha
	      });
	    };
	    force.nodes = function(x) {
	      if (!arguments.length) return nodes;
	      nodes = x;
	      return force;
	    };
	    force.links = function(x) {
	      if (!arguments.length) return links;
	      links = x;
	      return force;
	    };
	    force.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return force;
	    };
	    force.linkDistance = function(x) {
	      if (!arguments.length) return linkDistance;
	      linkDistance = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.distance = force.linkDistance;
	    force.linkStrength = function(x) {
	      if (!arguments.length) return linkStrength;
	      linkStrength = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.friction = function(x) {
	      if (!arguments.length) return friction;
	      friction = +x;
	      return force;
	    };
	    force.charge = function(x) {
	      if (!arguments.length) return charge;
	      charge = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.chargeDistance = function(x) {
	      if (!arguments.length) return Math.sqrt(chargeDistance2);
	      chargeDistance2 = x * x;
	      return force;
	    };
	    force.gravity = function(x) {
	      if (!arguments.length) return gravity;
	      gravity = +x;
	      return force;
	    };
	    force.theta = function(x) {
	      if (!arguments.length) return Math.sqrt(theta2);
	      theta2 = x * x;
	      return force;
	    };
	    force.alpha = function(x) {
	      if (!arguments.length) return alpha;
	      x = +x;
	      if (alpha) {
	        if (x > 0) {
	          alpha = x;
	        } else {
	          timer.c = null, timer.t = NaN, timer = null;
	          event.end({
	            type: "end",
	            alpha: alpha = 0
	          });
	        }
	      } else if (x > 0) {
	        event.start({
	          type: "start",
	          alpha: alpha = x
	        });
	        timer = d3_timer(force.tick);
	      }
	      return force;
	    };
	    force.start = function() {
	      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
	      for (i = 0; i < n; ++i) {
	        (o = nodes[i]).index = i;
	        o.weight = 0;
	      }
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        if (typeof o.source == "number") o.source = nodes[o.source];
	        if (typeof o.target == "number") o.target = nodes[o.target];
	        ++o.source.weight;
	        ++o.target.weight;
	      }
	      for (i = 0; i < n; ++i) {
	        o = nodes[i];
	        if (isNaN(o.x)) o.x = position("x", w);
	        if (isNaN(o.y)) o.y = position("y", h);
	        if (isNaN(o.px)) o.px = o.x;
	        if (isNaN(o.py)) o.py = o.y;
	      }
	      distances = [];
	      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
	      strengths = [];
	      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
	      charges = [];
	      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
	      function position(dimension, size) {
	        if (!neighbors) {
	          neighbors = new Array(n);
	          for (j = 0; j < n; ++j) {
	            neighbors[j] = [];
	          }
	          for (j = 0; j < m; ++j) {
	            var o = links[j];
	            neighbors[o.source.index].push(o.target);
	            neighbors[o.target.index].push(o.source);
	          }
	        }
	        var candidates = neighbors[i], j = -1, l = candidates.length, x;
	        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
	        return Math.random() * size;
	      }
	      return force.resume();
	    };
	    force.resume = function() {
	      return force.alpha(.1);
	    };
	    force.stop = function() {
	      return force.alpha(0);
	    };
	    force.drag = function() {
	      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
	      if (!arguments.length) return drag;
	      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
	    };
	    function dragmove(d) {
	      d.px = d3.event.x, d.py = d3.event.y;
	      force.resume();
	    }
	    return d3.rebind(force, event, "on");
	  };
	  function d3_layout_forceDragstart(d) {
	    d.fixed |= 2;
	  }
	  function d3_layout_forceDragend(d) {
	    d.fixed &= ~6;
	  }
	  function d3_layout_forceMouseover(d) {
	    d.fixed |= 4;
	    d.px = d.x, d.py = d.y;
	  }
	  function d3_layout_forceMouseout(d) {
	    d.fixed &= ~4;
	  }
	  function d3_layout_forceAccumulate(quad, alpha, charges) {
	    var cx = 0, cy = 0;
	    quad.charge = 0;
	    if (!quad.leaf) {
	      var nodes = quad.nodes, n = nodes.length, i = -1, c;
	      while (++i < n) {
	        c = nodes[i];
	        if (c == null) continue;
	        d3_layout_forceAccumulate(c, alpha, charges);
	        quad.charge += c.charge;
	        cx += c.charge * c.cx;
	        cy += c.charge * c.cy;
	      }
	    }
	    if (quad.point) {
	      if (!quad.leaf) {
	        quad.point.x += Math.random() - .5;
	        quad.point.y += Math.random() - .5;
	      }
	      var k = alpha * charges[quad.point.index];
	      quad.charge += quad.pointCharge = k;
	      cx += k * quad.point.x;
	      cy += k * quad.point.y;
	    }
	    quad.cx = cx / quad.charge;
	    quad.cy = cy / quad.charge;
	  }
	  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
	  d3.layout.hierarchy = function() {
	    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
	    function hierarchy(root) {
	      var stack = [ root ], nodes = [], node;
	      root.depth = 0;
	      while ((node = stack.pop()) != null) {
	        nodes.push(node);
	        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
	          var n, childs, child;
	          while (--n >= 0) {
	            stack.push(child = childs[n]);
	            child.parent = node;
	            child.depth = node.depth + 1;
	          }
	          if (value) node.value = 0;
	          node.children = childs;
	        } else {
	          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          delete node.children;
	        }
	      }
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var childs, parent;
	        if (sort && (childs = node.children)) childs.sort(sort);
	        if (value && (parent = node.parent)) parent.value += node.value;
	      });
	      return nodes;
	    }
	    hierarchy.sort = function(x) {
	      if (!arguments.length) return sort;
	      sort = x;
	      return hierarchy;
	    };
	    hierarchy.children = function(x) {
	      if (!arguments.length) return children;
	      children = x;
	      return hierarchy;
	    };
	    hierarchy.value = function(x) {
	      if (!arguments.length) return value;
	      value = x;
	      return hierarchy;
	    };
	    hierarchy.revalue = function(root) {
	      if (value) {
	        d3_layout_hierarchyVisitBefore(root, function(node) {
	          if (node.children) node.value = 0;
	        });
	        d3_layout_hierarchyVisitAfter(root, function(node) {
	          var parent;
	          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          if (parent = node.parent) parent.value += node.value;
	        });
	      }
	      return root;
	    };
	    return hierarchy;
	  };
	  function d3_layout_hierarchyRebind(object, hierarchy) {
	    d3.rebind(object, hierarchy, "sort", "children", "value");
	    object.nodes = object;
	    object.links = d3_layout_hierarchyLinks;
	    return object;
	  }
	  function d3_layout_hierarchyVisitBefore(node, callback) {
	    var nodes = [ node ];
	    while ((node = nodes.pop()) != null) {
	      callback(node);
	      if ((children = node.children) && (n = children.length)) {
	        var n, children;
	        while (--n >= 0) nodes.push(children[n]);
	      }
	    }
	  }
	  function d3_layout_hierarchyVisitAfter(node, callback) {
	    var nodes = [ node ], nodes2 = [];
	    while ((node = nodes.pop()) != null) {
	      nodes2.push(node);
	      if ((children = node.children) && (n = children.length)) {
	        var i = -1, n, children;
	        while (++i < n) nodes.push(children[i]);
	      }
	    }
	    while ((node = nodes2.pop()) != null) {
	      callback(node);
	    }
	  }
	  function d3_layout_hierarchyChildren(d) {
	    return d.children;
	  }
	  function d3_layout_hierarchyValue(d) {
	    return d.value;
	  }
	  function d3_layout_hierarchySort(a, b) {
	    return b.value - a.value;
	  }
	  function d3_layout_hierarchyLinks(nodes) {
	    return d3.merge(nodes.map(function(parent) {
	      return (parent.children || []).map(function(child) {
	        return {
	          source: parent,
	          target: child
	        };
	      });
	    }));
	  }
	  d3.layout.partition = function() {
	    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
	    function position(node, x, dx, dy) {
	      var children = node.children;
	      node.x = x;
	      node.y = node.depth * dy;
	      node.dx = dx;
	      node.dy = dy;
	      if (children && (n = children.length)) {
	        var i = -1, n, c, d;
	        dx = node.value ? dx / node.value : 0;
	        while (++i < n) {
	          position(c = children[i], x, d = c.value * dx, dy);
	          x += d;
	        }
	      }
	    }
	    function depth(node) {
	      var children = node.children, d = 0;
	      if (children && (n = children.length)) {
	        var i = -1, n;
	        while (++i < n) d = Math.max(d, depth(children[i]));
	      }
	      return 1 + d;
	    }
	    function partition(d, i) {
	      var nodes = hierarchy.call(this, d, i);
	      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
	      return nodes;
	    }
	    partition.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return partition;
	    };
	    return d3_layout_hierarchyRebind(partition, hierarchy);
	  };
	  d3.layout.pie = function() {
	    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
	    function pie(data) {
	      var n = data.length, values = data.map(function(d, i) {
	        return +value.call(pie, d, i);
	      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
	      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
	        return values[j] - values[i];
	      } : function(i, j) {
	        return sort(data[i], data[j]);
	      });
	      index.forEach(function(i) {
	        arcs[i] = {
	          data: data[i],
	          value: v = values[i],
	          startAngle: a,
	          endAngle: a += v * k + pa,
	          padAngle: p
	        };
	      });
	      return arcs;
	    }
	    pie.value = function(_) {
	      if (!arguments.length) return value;
	      value = _;
	      return pie;
	    };
	    pie.sort = function(_) {
	      if (!arguments.length) return sort;
	      sort = _;
	      return pie;
	    };
	    pie.startAngle = function(_) {
	      if (!arguments.length) return startAngle;
	      startAngle = _;
	      return pie;
	    };
	    pie.endAngle = function(_) {
	      if (!arguments.length) return endAngle;
	      endAngle = _;
	      return pie;
	    };
	    pie.padAngle = function(_) {
	      if (!arguments.length) return padAngle;
	      padAngle = _;
	      return pie;
	    };
	    return pie;
	  };
	  var d3_layout_pieSortByValue = {};
	  d3.layout.stack = function() {
	    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
	    function stack(data, index) {
	      if (!(n = data.length)) return data;
	      var series = data.map(function(d, i) {
	        return values.call(stack, d, i);
	      });
	      var points = series.map(function(d) {
	        return d.map(function(v, i) {
	          return [ x.call(stack, v, i), y.call(stack, v, i) ];
	        });
	      });
	      var orders = order.call(stack, points, index);
	      series = d3.permute(series, orders);
	      points = d3.permute(points, orders);
	      var offsets = offset.call(stack, points, index);
	      var m = series[0].length, n, i, j, o;
	      for (j = 0; j < m; ++j) {
	        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
	        for (i = 1; i < n; ++i) {
	          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
	        }
	      }
	      return data;
	    }
	    stack.values = function(x) {
	      if (!arguments.length) return values;
	      values = x;
	      return stack;
	    };
	    stack.order = function(x) {
	      if (!arguments.length) return order;
	      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
	      return stack;
	    };
	    stack.offset = function(x) {
	      if (!arguments.length) return offset;
	      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
	      return stack;
	    };
	    stack.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      return stack;
	    };
	    stack.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      return stack;
	    };
	    stack.out = function(z) {
	      if (!arguments.length) return out;
	      out = z;
	      return stack;
	    };
	    return stack;
	  };
	  function d3_layout_stackX(d) {
	    return d.x;
	  }
	  function d3_layout_stackY(d) {
	    return d.y;
	  }
	  function d3_layout_stackOut(d, y0, y) {
	    d.y0 = y0;
	    d.y = y;
	  }
	  var d3_layout_stackOrders = d3.map({
	    "inside-out": function(data) {
	      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
	        return max[a] - max[b];
	      }), top = 0, bottom = 0, tops = [], bottoms = [];
	      for (i = 0; i < n; ++i) {
	        j = index[i];
	        if (top < bottom) {
	          top += sums[j];
	          tops.push(j);
	        } else {
	          bottom += sums[j];
	          bottoms.push(j);
	        }
	      }
	      return bottoms.reverse().concat(tops);
	    },
	    reverse: function(data) {
	      return d3.range(data.length).reverse();
	    },
	    "default": d3_layout_stackOrderDefault
	  });
	  var d3_layout_stackOffsets = d3.map({
	    silhouette: function(data) {
	      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o > max) max = o;
	        sums.push(o);
	      }
	      for (j = 0; j < m; ++j) {
	        y0[j] = (max - sums[j]) / 2;
	      }
	      return y0;
	    },
	    wiggle: function(data) {
	      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
	      y0[0] = o = o0 = 0;
	      for (j = 1; j < m; ++j) {
	        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
	        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
	          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
	            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
	          }
	          s2 += s3 * data[i][j][1];
	        }
	        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
	        if (o < o0) o0 = o;
	      }
	      for (j = 0; j < m; ++j) y0[j] -= o0;
	      return y0;
	    },
	    expand: function(data) {
	      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
	      }
	      for (j = 0; j < m; ++j) y0[j] = 0;
	      return y0;
	    },
	    zero: d3_layout_stackOffsetZero
	  });
	  function d3_layout_stackOrderDefault(data) {
	    return d3.range(data.length);
	  }
	  function d3_layout_stackOffsetZero(data) {
	    var j = -1, m = data[0].length, y0 = [];
	    while (++j < m) y0[j] = 0;
	    return y0;
	  }
	  function d3_layout_stackMaxIndex(array) {
	    var i = 1, j = 0, v = array[0][1], k, n = array.length;
	    for (;i < n; ++i) {
	      if ((k = array[i][1]) > v) {
	        j = i;
	        v = k;
	      }
	    }
	    return j;
	  }
	  function d3_layout_stackReduceSum(d) {
	    return d.reduce(d3_layout_stackSum, 0);
	  }
	  function d3_layout_stackSum(p, d) {
	    return p + d[1];
	  }
	  d3.layout.histogram = function() {
	    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
	    function histogram(data, i) {
	      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
	      while (++i < m) {
	        bin = bins[i] = [];
	        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
	        bin.y = 0;
	      }
	      if (m > 0) {
	        i = -1;
	        while (++i < n) {
	          x = values[i];
	          if (x >= range[0] && x <= range[1]) {
	            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
	            bin.y += k;
	            bin.push(data[i]);
	          }
	        }
	      }
	      return bins;
	    }
	    histogram.value = function(x) {
	      if (!arguments.length) return valuer;
	      valuer = x;
	      return histogram;
	    };
	    histogram.range = function(x) {
	      if (!arguments.length) return ranger;
	      ranger = d3_functor(x);
	      return histogram;
	    };
	    histogram.bins = function(x) {
	      if (!arguments.length) return binner;
	      binner = typeof x === "number" ? function(range) {
	        return d3_layout_histogramBinFixed(range, x);
	      } : d3_functor(x);
	      return histogram;
	    };
	    histogram.frequency = function(x) {
	      if (!arguments.length) return frequency;
	      frequency = !!x;
	      return histogram;
	    };
	    return histogram;
	  };
	  function d3_layout_histogramBinSturges(range, values) {
	    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
	  }
	  function d3_layout_histogramBinFixed(range, n) {
	    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
	    while (++x <= n) f[x] = m * x + b;
	    return f;
	  }
	  function d3_layout_histogramRange(values) {
	    return [ d3.min(values), d3.max(values) ];
	  }
	  d3.layout.pack = function() {
	    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
	    function pack(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
	        return radius;
	      };
	      root.x = root.y = 0;
	      d3_layout_hierarchyVisitAfter(root, function(d) {
	        d.r = +r(d.value);
	      });
	      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	      if (padding) {
	        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r += dr;
	        });
	        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r -= dr;
	        });
	      }
	      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
	      return nodes;
	    }
	    pack.size = function(_) {
	      if (!arguments.length) return size;
	      size = _;
	      return pack;
	    };
	    pack.radius = function(_) {
	      if (!arguments.length) return radius;
	      radius = _ == null || typeof _ === "function" ? _ : +_;
	      return pack;
	    };
	    pack.padding = function(_) {
	      if (!arguments.length) return padding;
	      padding = +_;
	      return pack;
	    };
	    return d3_layout_hierarchyRebind(pack, hierarchy);
	  };
	  function d3_layout_packSort(a, b) {
	    return a.value - b.value;
	  }
	  function d3_layout_packInsert(a, b) {
	    var c = a._pack_next;
	    a._pack_next = b;
	    b._pack_prev = a;
	    b._pack_next = c;
	    c._pack_prev = b;
	  }
	  function d3_layout_packSplice(a, b) {
	    a._pack_next = b;
	    b._pack_prev = a;
	  }
	  function d3_layout_packIntersects(a, b) {
	    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
	    return .999 * dr * dr > dx * dx + dy * dy;
	  }
	  function d3_layout_packSiblings(node) {
	    if (!(nodes = node.children) || !(n = nodes.length)) return;
	    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
	    function bound(node) {
	      xMin = Math.min(node.x - node.r, xMin);
	      xMax = Math.max(node.x + node.r, xMax);
	      yMin = Math.min(node.y - node.r, yMin);
	      yMax = Math.max(node.y + node.r, yMax);
	    }
	    nodes.forEach(d3_layout_packLink);
	    a = nodes[0];
	    a.x = -a.r;
	    a.y = 0;
	    bound(a);
	    if (n > 1) {
	      b = nodes[1];
	      b.x = b.r;
	      b.y = 0;
	      bound(b);
	      if (n > 2) {
	        c = nodes[2];
	        d3_layout_packPlace(a, b, c);
	        bound(c);
	        d3_layout_packInsert(a, c);
	        a._pack_prev = c;
	        d3_layout_packInsert(c, b);
	        b = a._pack_next;
	        for (i = 3; i < n; i++) {
	          d3_layout_packPlace(a, b, c = nodes[i]);
	          var isect = 0, s1 = 1, s2 = 1;
	          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
	            if (d3_layout_packIntersects(j, c)) {
	              isect = 1;
	              break;
	            }
	          }
	          if (isect == 1) {
	            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
	              if (d3_layout_packIntersects(k, c)) {
	                break;
	              }
	            }
	          }
	          if (isect) {
	            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
	            i--;
	          } else {
	            d3_layout_packInsert(a, c);
	            b = c;
	            bound(c);
	          }
	        }
	      }
	    }
	    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
	    for (i = 0; i < n; i++) {
	      c = nodes[i];
	      c.x -= cx;
	      c.y -= cy;
	      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
	    }
	    node.r = cr;
	    nodes.forEach(d3_layout_packUnlink);
	  }
	  function d3_layout_packLink(node) {
	    node._pack_next = node._pack_prev = node;
	  }
	  function d3_layout_packUnlink(node) {
	    delete node._pack_next;
	    delete node._pack_prev;
	  }
	  function d3_layout_packTransform(node, x, y, k) {
	    var children = node.children;
	    node.x = x += k * node.x;
	    node.y = y += k * node.y;
	    node.r *= k;
	    if (children) {
	      var i = -1, n = children.length;
	      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
	    }
	  }
	  function d3_layout_packPlace(a, b, c) {
	    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
	    if (db && (dx || dy)) {
	      var da = b.r + c.r, dc = dx * dx + dy * dy;
	      da *= da;
	      db *= db;
	      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	      c.x = a.x + x * dx + y * dy;
	      c.y = a.y + x * dy - y * dx;
	    } else {
	      c.x = a.x + db;
	      c.y = a.y;
	    }
	  }
	  d3.layout.tree = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
	    function tree(d, i) {
	      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
	      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
	      d3_layout_hierarchyVisitBefore(root1, secondWalk);
	      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
	        var left = root0, right = root0, bottom = root0;
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          if (node.x < left.x) left = node;
	          if (node.x > right.x) right = node;
	          if (node.depth > bottom.depth) bottom = node;
	        });
	        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          node.x = (node.x + tx) * kx;
	          node.y = node.depth * ky;
	        });
	      }
	      return nodes;
	    }
	    function wrapTree(root0) {
	      var root1 = {
	        A: null,
	        children: [ root0 ]
	      }, queue = [ root1 ], node1;
	      while ((node1 = queue.pop()) != null) {
	        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
	          queue.push((children[i] = child = {
	            _: children[i],
	            parent: node1,
	            children: (child = children[i].children) && child.slice() || [],
	            A: null,
	            a: null,
	            z: 0,
	            m: 0,
	            c: 0,
	            s: 0,
	            t: null,
	            i: i
	          }).a = child);
	        }
	      }
	      return root1.children[0];
	    }
	    function firstWalk(v) {
	      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
	      if (children.length) {
	        d3_layout_treeShift(v);
	        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	        if (w) {
	          v.z = w.z + separation(v._, w._);
	          v.m = v.z - midpoint;
	        } else {
	          v.z = midpoint;
	        }
	      } else if (w) {
	        v.z = w.z + separation(v._, w._);
	      }
	      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	    }
	    function secondWalk(v) {
	      v._.x = v.z + v.parent.m;
	      v.m += v.parent.m;
	    }
	    function apportion(v, w, ancestor) {
	      if (w) {
	        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
	        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
	          vom = d3_layout_treeLeft(vom);
	          vop = d3_layout_treeRight(vop);
	          vop.a = v;
	          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	          if (shift > 0) {
	            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
	            sip += shift;
	            sop += shift;
	          }
	          sim += vim.m;
	          sip += vip.m;
	          som += vom.m;
	          sop += vop.m;
	        }
	        if (vim && !d3_layout_treeRight(vop)) {
	          vop.t = vim;
	          vop.m += sim - sop;
	        }
	        if (vip && !d3_layout_treeLeft(vom)) {
	          vom.t = vip;
	          vom.m += sip - som;
	          ancestor = v;
	        }
	      }
	      return ancestor;
	    }
	    function sizeNode(node) {
	      node.x *= size[0];
	      node.y = node.depth * size[1];
	    }
	    tree.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return tree;
	    };
	    tree.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null ? sizeNode : null;
	      return tree;
	    };
	    tree.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) == null ? null : sizeNode;
	      return tree;
	    };
	    return d3_layout_hierarchyRebind(tree, hierarchy);
	  };
	  function d3_layout_treeSeparation(a, b) {
	    return a.parent == b.parent ? 1 : 2;
	  }
	  function d3_layout_treeLeft(v) {
	    var children = v.children;
	    return children.length ? children[0] : v.t;
	  }
	  function d3_layout_treeRight(v) {
	    var children = v.children, n;
	    return (n = children.length) ? children[n - 1] : v.t;
	  }
	  function d3_layout_treeMove(wm, wp, shift) {
	    var change = shift / (wp.i - wm.i);
	    wp.c -= change;
	    wp.s += shift;
	    wm.c += change;
	    wp.z += shift;
	    wp.m += shift;
	  }
	  function d3_layout_treeShift(v) {
	    var shift = 0, change = 0, children = v.children, i = children.length, w;
	    while (--i >= 0) {
	      w = children[i];
	      w.z += shift;
	      w.m += shift;
	      shift += w.s + (change += w.c);
	    }
	  }
	  function d3_layout_treeAncestor(vim, v, ancestor) {
	    return vim.a.parent === v.parent ? vim.a : ancestor;
	  }
	  d3.layout.cluster = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
	    function cluster(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var children = node.children;
	        if (children && children.length) {
	          node.x = d3_layout_clusterX(children);
	          node.y = d3_layout_clusterY(children);
	        } else {
	          node.x = previousNode ? x += separation(node, previousNode) : 0;
	          node.y = 0;
	          previousNode = node;
	        }
	      });
	      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
	      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
	        node.x = (node.x - root.x) * size[0];
	        node.y = (root.y - node.y) * size[1];
	      } : function(node) {
	        node.x = (node.x - x0) / (x1 - x0) * size[0];
	        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
	      });
	      return nodes;
	    }
	    cluster.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return cluster;
	    };
	    cluster.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null;
	      return cluster;
	    };
	    cluster.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) != null;
	      return cluster;
	    };
	    return d3_layout_hierarchyRebind(cluster, hierarchy);
	  };
	  function d3_layout_clusterY(children) {
	    return 1 + d3.max(children, function(child) {
	      return child.y;
	    });
	  }
	  function d3_layout_clusterX(children) {
	    return children.reduce(function(x, child) {
	      return x + child.x;
	    }, 0) / children.length;
	  }
	  function d3_layout_clusterLeft(node) {
	    var children = node.children;
	    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
	  }
	  function d3_layout_clusterRight(node) {
	    var children = node.children, n;
	    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
	  }
	  d3.layout.treemap = function() {
	    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
	    function scale(children, k) {
	      var i = -1, n = children.length, child, area;
	      while (++i < n) {
	        area = (child = children[i]).value * (k < 0 ? 0 : k);
	        child.area = isNaN(area) || area <= 0 ? 0 : area;
	      }
	    }
	    function squarify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while ((n = remaining.length) > 0) {
	          row.push(child = remaining[n - 1]);
	          row.area += child.area;
	          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
	            remaining.pop();
	            best = score;
	          } else {
	            row.area -= row.pop().area;
	            position(row, u, rect, false);
	            u = Math.min(rect.dx, rect.dy);
	            row.length = row.area = 0;
	            best = Infinity;
	          }
	        }
	        if (row.length) {
	          position(row, u, rect, true);
	          row.length = row.area = 0;
	        }
	        children.forEach(squarify);
	      }
	    }
	    function stickify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), remaining = children.slice(), child, row = [];
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while (child = remaining.pop()) {
	          row.push(child);
	          row.area += child.area;
	          if (child.z != null) {
	            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
	            row.length = row.area = 0;
	          }
	        }
	        children.forEach(stickify);
	      }
	    }
	    function worst(row, u) {
	      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
	      while (++i < n) {
	        if (!(r = row[i].area)) continue;
	        if (r < rmin) rmin = r;
	        if (r > rmax) rmax = r;
	      }
	      s *= s;
	      u *= u;
	      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
	    }
	    function position(row, u, rect, flush) {
	      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
	      if (u == rect.dx) {
	        if (flush || v > rect.dy) v = rect.dy;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dy = v;
	          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
	        }
	        o.z = true;
	        o.dx += rect.x + rect.dx - x;
	        rect.y += v;
	        rect.dy -= v;
	      } else {
	        if (flush || v > rect.dx) v = rect.dx;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dx = v;
	          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
	        }
	        o.z = false;
	        o.dy += rect.y + rect.dy - y;
	        rect.x += v;
	        rect.dx -= v;
	      }
	    }
	    function treemap(d) {
	      var nodes = stickies || hierarchy(d), root = nodes[0];
	      root.x = root.y = 0;
	      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
	      if (stickies) hierarchy.revalue(root);
	      scale([ root ], root.dx * root.dy / root.value);
	      (stickies ? stickify : squarify)(root);
	      if (sticky) stickies = nodes;
	      return nodes;
	    }
	    treemap.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return treemap;
	    };
	    treemap.padding = function(x) {
	      if (!arguments.length) return padding;
	      function padFunction(node) {
	        var p = x.call(treemap, node, node.depth);
	        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
	      }
	      function padConstant(node) {
	        return d3_layout_treemapPad(node, x);
	      }
	      var type;
	      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
	      padConstant) : padConstant;
	      return treemap;
	    };
	    treemap.round = function(x) {
	      if (!arguments.length) return round != Number;
	      round = x ? Math.round : Number;
	      return treemap;
	    };
	    treemap.sticky = function(x) {
	      if (!arguments.length) return sticky;
	      sticky = x;
	      stickies = null;
	      return treemap;
	    };
	    treemap.ratio = function(x) {
	      if (!arguments.length) return ratio;
	      ratio = x;
	      return treemap;
	    };
	    treemap.mode = function(x) {
	      if (!arguments.length) return mode;
	      mode = x + "";
	      return treemap;
	    };
	    return d3_layout_hierarchyRebind(treemap, hierarchy);
	  };
	  function d3_layout_treemapPadNull(node) {
	    return {
	      x: node.x,
	      y: node.y,
	      dx: node.dx,
	      dy: node.dy
	    };
	  }
	  function d3_layout_treemapPad(node, padding) {
	    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
	    if (dx < 0) {
	      x += dx / 2;
	      dx = 0;
	    }
	    if (dy < 0) {
	      y += dy / 2;
	      dy = 0;
	    }
	    return {
	      x: x,
	      y: y,
	      dx: dx,
	      dy: dy
	    };
	  }
	  d3.random = {
	    normal: function(µ, σ) {
	      var n = arguments.length;
	      if (n < 2) σ = 1;
	      if (n < 1) µ = 0;
	      return function() {
	        var x, y, r;
	        do {
	          x = Math.random() * 2 - 1;
	          y = Math.random() * 2 - 1;
	          r = x * x + y * y;
	        } while (!r || r > 1);
	        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
	      };
	    },
	    logNormal: function() {
	      var random = d3.random.normal.apply(d3, arguments);
	      return function() {
	        return Math.exp(random());
	      };
	    },
	    bates: function(m) {
	      var random = d3.random.irwinHall(m);
	      return function() {
	        return random() / m;
	      };
	    },
	    irwinHall: function(m) {
	      return function() {
	        for (var s = 0, j = 0; j < m; j++) s += Math.random();
	        return s;
	      };
	    }
	  };
	  d3.scale = {};
	  function d3_scaleExtent(domain) {
	    var start = domain[0], stop = domain[domain.length - 1];
	    return start < stop ? [ start, stop ] : [ stop, start ];
	  }
	  function d3_scaleRange(scale) {
	    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
	  }
	  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
	    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
	    return function(x) {
	      return i(u(x));
	    };
	  }
	  function d3_scale_nice(domain, nice) {
	    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
	    if (x1 < x0) {
	      dx = i0, i0 = i1, i1 = dx;
	      dx = x0, x0 = x1, x1 = dx;
	    }
	    domain[i0] = nice.floor(x0);
	    domain[i1] = nice.ceil(x1);
	    return domain;
	  }
	  function d3_scale_niceStep(step) {
	    return step ? {
	      floor: function(x) {
	        return Math.floor(x / step) * step;
	      },
	      ceil: function(x) {
	        return Math.ceil(x / step) * step;
	      }
	    } : d3_scale_niceIdentity;
	  }
	  var d3_scale_niceIdentity = {
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
	    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
	    if (domain[k] < domain[0]) {
	      domain = domain.slice().reverse();
	      range = range.slice().reverse();
	    }
	    while (++j <= k) {
	      u.push(uninterpolate(domain[j - 1], domain[j]));
	      i.push(interpolate(range[j - 1], range[j]));
	    }
	    return function(x) {
	      var j = d3.bisect(domain, x, 1, k) - 1;
	      return i[j](u[j](x));
	    };
	  }
	  d3.scale.linear = function() {
	    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
	  };
	  function d3_scale_linear(domain, range, interpolate, clamp) {
	    var output, input;
	    function rescale() {
	      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
	      output = linear(domain, range, uninterpolate, interpolate);
	      input = linear(range, domain, uninterpolate, d3_interpolate);
	      return scale;
	    }
	    function scale(x) {
	      return output(x);
	    }
	    scale.invert = function(y) {
	      return input(y);
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(Number);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.rangeRound = function(x) {
	      return scale.range(x).interpolate(d3_interpolateRound);
	    };
	    scale.clamp = function(x) {
	      if (!arguments.length) return clamp;
	      clamp = x;
	      return rescale();
	    };
	    scale.interpolate = function(x) {
	      if (!arguments.length) return interpolate;
	      interpolate = x;
	      return rescale();
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      d3_scale_linearNice(domain, m);
	      return rescale();
	    };
	    scale.copy = function() {
	      return d3_scale_linear(domain, range, interpolate, clamp);
	    };
	    return rescale();
	  }
	  function d3_scale_linearRebind(scale, linear) {
	    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
	  }
	  function d3_scale_linearNice(domain, m) {
	    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	    return domain;
	  }
	  function d3_scale_linearTickRange(domain, m) {
	    if (m == null) m = 10;
	    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
	    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
	    extent[0] = Math.ceil(extent[0] / step) * step;
	    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
	    extent[2] = step;
	    return extent;
	  }
	  function d3_scale_linearTicks(domain, m) {
	    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
	  }
	  function d3_scale_linearTickFormat(domain, m, format) {
	    var range = d3_scale_linearTickRange(domain, m);
	    if (format) {
	      var match = d3_format_re.exec(format);
	      match.shift();
	      if (match[8] === "s") {
	        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
	        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
	        match[8] = "f";
	        format = d3.format(match.join(""));
	        return function(d) {
	          return format(prefix.scale(d)) + prefix.symbol;
	        };
	      }
	      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
	      format = match.join("");
	    } else {
	      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
	    }
	    return d3.format(format);
	  }
	  var d3_scale_linearFormatSignificant = {
	    s: 1,
	    g: 1,
	    p: 1,
	    r: 1,
	    e: 1
	  };
	  function d3_scale_linearPrecision(value) {
	    return -Math.floor(Math.log(value) / Math.LN10 + .01);
	  }
	  function d3_scale_linearFormatPrecision(type, range) {
	    var p = d3_scale_linearPrecision(range[2]);
	    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
	  }
	  d3.scale.log = function() {
	    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
	  };
	  function d3_scale_log(linear, base, positive, domain) {
	    function log(x) {
	      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
	    }
	    function pow(x) {
	      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
	    }
	    function scale(x) {
	      return linear(log(x));
	    }
	    scale.invert = function(x) {
	      return pow(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      positive = x[0] >= 0;
	      linear.domain((domain = x.map(Number)).map(log));
	      return scale;
	    };
	    scale.base = function(_) {
	      if (!arguments.length) return base;
	      base = +_;
	      linear.domain(domain.map(log));
	      return scale;
	    };
	    scale.nice = function() {
	      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
	      linear.domain(niced);
	      domain = niced.map(pow);
	      return scale;
	    };
	    scale.ticks = function() {
	      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
	      if (isFinite(j - i)) {
	        if (positive) {
	          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
	          ticks.push(pow(i));
	        } else {
	          ticks.push(pow(i));
	          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
	        }
	        for (i = 0; ticks[i] < u; i++) {}
	        for (j = ticks.length; ticks[j - 1] > v; j--) {}
	        ticks = ticks.slice(i, j);
	      }
	      return ticks;
	    };
	    scale.tickFormat = function(n, format) {
	      if (!arguments.length) return d3_scale_logFormat;
	      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
	      var k = Math.max(1, base * n / scale.ticks().length);
	      return function(d) {
	        var i = d / pow(Math.round(log(d)));
	        if (i * base < base - .5) i *= base;
	        return i <= k ? format(d) : "";
	      };
	    };
	    scale.copy = function() {
	      return d3_scale_log(linear.copy(), base, positive, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
	    floor: function(x) {
	      return -Math.ceil(-x);
	    },
	    ceil: function(x) {
	      return -Math.floor(-x);
	    }
	  };
	  d3.scale.pow = function() {
	    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
	  };
	  function d3_scale_pow(linear, exponent, domain) {
	    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
	    function scale(x) {
	      return linear(powp(x));
	    }
	    scale.invert = function(x) {
	      return powb(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      linear.domain((domain = x.map(Number)).map(powp));
	      return scale;
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      return scale.domain(d3_scale_linearNice(domain, m));
	    };
	    scale.exponent = function(x) {
	      if (!arguments.length) return exponent;
	      powp = d3_scale_powPow(exponent = x);
	      powb = d3_scale_powPow(1 / exponent);
	      linear.domain(domain.map(powp));
	      return scale;
	    };
	    scale.copy = function() {
	      return d3_scale_pow(linear.copy(), exponent, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_scale_powPow(e) {
	    return function(x) {
	      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
	    };
	  }
	  d3.scale.sqrt = function() {
	    return d3.scale.pow().exponent(.5);
	  };
	  d3.scale.ordinal = function() {
	    return d3_scale_ordinal([], {
	      t: "range",
	      a: [ [] ]
	    });
	  };
	  function d3_scale_ordinal(domain, ranger) {
	    var index, range, rangeBand;
	    function scale(x) {
	      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
	    }
	    function steps(start, step) {
	      return d3.range(domain.length).map(function(i) {
	        return start + step * i;
	      });
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = [];
	      index = new d3_Map();
	      var i = -1, n = x.length, xi;
	      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
	      return scale[ranger.t].apply(scale, ranger.a);
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      rangeBand = 0;
	      ranger = {
	        t: "range",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangePoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
	      0) : (stop - start) / (domain.length - 1 + padding);
	      range = steps(start + step * padding / 2, step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangePoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundPoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
	      0) : (stop - start) / (domain.length - 1 + padding) | 0;
	      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangeRoundPoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
	      range = steps(start + step * outerPadding, step);
	      if (reverse) range.reverse();
	      rangeBand = step * (1 - padding);
	      ranger = {
	        t: "rangeBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
	      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
	      if (reverse) range.reverse();
	      rangeBand = Math.round(step * (1 - padding));
	      ranger = {
	        t: "rangeRoundBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBand = function() {
	      return rangeBand;
	    };
	    scale.rangeExtent = function() {
	      return d3_scaleExtent(ranger.a[0]);
	    };
	    scale.copy = function() {
	      return d3_scale_ordinal(domain, ranger);
	    };
	    return scale.domain(domain);
	  }
	  d3.scale.category10 = function() {
	    return d3.scale.ordinal().range(d3_category10);
	  };
	  d3.scale.category20 = function() {
	    return d3.scale.ordinal().range(d3_category20);
	  };
	  d3.scale.category20b = function() {
	    return d3.scale.ordinal().range(d3_category20b);
	  };
	  d3.scale.category20c = function() {
	    return d3.scale.ordinal().range(d3_category20c);
	  };
	  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
	  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
	  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
	  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
	  d3.scale.quantile = function() {
	    return d3_scale_quantile([], []);
	  };
	  function d3_scale_quantile(domain, range) {
	    var thresholds;
	    function rescale() {
	      var k = 0, q = range.length;
	      thresholds = [];
	      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
	      return scale;
	    }
	    function scale(x) {
	      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.quantiles = function() {
	      return thresholds;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantile(domain, range);
	    };
	    return rescale();
	  }
	  d3.scale.quantize = function() {
	    return d3_scale_quantize(0, 1, [ 0, 1 ]);
	  };
	  function d3_scale_quantize(x0, x1, range) {
	    var kx, i;
	    function scale(x) {
	      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
	    }
	    function rescale() {
	      kx = range.length / (x1 - x0);
	      i = range.length - 1;
	      return scale;
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return [ x0, x1 ];
	      x0 = +x[0];
	      x1 = +x[x.length - 1];
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      y = y < 0 ? NaN : y / kx + x0;
	      return [ y, y + 1 / kx ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantize(x0, x1, range);
	    };
	    return rescale();
	  }
	  d3.scale.threshold = function() {
	    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
	  };
	  function d3_scale_threshold(domain, range) {
	    function scale(x) {
	      if (x <= x) return range[d3.bisect(domain, x)];
	    }
	    scale.domain = function(_) {
	      if (!arguments.length) return domain;
	      domain = _;
	      return scale;
	    };
	    scale.range = function(_) {
	      if (!arguments.length) return range;
	      range = _;
	      return scale;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return [ domain[y - 1], domain[y] ];
	    };
	    scale.copy = function() {
	      return d3_scale_threshold(domain, range);
	    };
	    return scale;
	  }
	  d3.scale.identity = function() {
	    return d3_scale_identity([ 0, 1 ]);
	  };
	  function d3_scale_identity(domain) {
	    function identity(x) {
	      return +x;
	    }
	    identity.invert = identity;
	    identity.domain = identity.range = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(identity);
	      return identity;
	    };
	    identity.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    identity.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    identity.copy = function() {
	      return d3_scale_identity(domain);
	    };
	    return identity;
	  }
	  d3.svg = {};
	  function d3_zero() {
	    return 0;
	  }
	  d3.svg.arc = function() {
	    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
	    function arc() {
	      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
	      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
	      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
	      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
	      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
	        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
	        if (!cw) p1 *= -1;
	        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
	        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
	      }
	      if (r1) {
	        x0 = r1 * Math.cos(a0 + p1);
	        y0 = r1 * Math.sin(a0 + p1);
	        x1 = r1 * Math.cos(a1 - p1);
	        y1 = r1 * Math.sin(a1 - p1);
	        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
	        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
	          var h1 = (a0 + a1) / 2;
	          x0 = r1 * Math.cos(h1);
	          y0 = r1 * Math.sin(h1);
	          x1 = y1 = null;
	        }
	      } else {
	        x0 = y0 = 0;
	      }
	      if (r0) {
	        x2 = r0 * Math.cos(a1 - p0);
	        y2 = r0 * Math.sin(a1 - p0);
	        x3 = r0 * Math.cos(a0 + p0);
	        y3 = r0 * Math.sin(a0 + p0);
	        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
	        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
	          var h0 = (a0 + a1) / 2;
	          x2 = r0 * Math.cos(h0);
	          y2 = r0 * Math.sin(h0);
	          x3 = y3 = null;
	        }
	      } else {
	        x2 = y2 = 0;
	      }
	      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
	        cr = r0 < r1 ^ cw ? 0 : 1;
	        var rc1 = rc, rc0 = rc;
	        if (da < π) {
	          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
	          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
	        }
	        if (x1 != null) {
	          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
	          if (rc === rc1) {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
	          } else {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
	          }
	        } else {
	          path.push("M", x0, ",", y0);
	        }
	        if (x3 != null) {
	          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
	          if (rc === rc0) {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          } else {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          }
	        } else {
	          path.push("L", x2, ",", y2);
	        }
	      } else {
	        path.push("M", x0, ",", y0);
	        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
	        path.push("L", x2, ",", y2);
	        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
	      }
	      path.push("Z");
	      return path.join("");
	    }
	    function circleSegment(r1, cw) {
	      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
	    }
	    arc.innerRadius = function(v) {
	      if (!arguments.length) return innerRadius;
	      innerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.outerRadius = function(v) {
	      if (!arguments.length) return outerRadius;
	      outerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.cornerRadius = function(v) {
	      if (!arguments.length) return cornerRadius;
	      cornerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.padRadius = function(v) {
	      if (!arguments.length) return padRadius;
	      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
	      return arc;
	    };
	    arc.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return arc;
	    };
	    arc.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return arc;
	    };
	    arc.padAngle = function(v) {
	      if (!arguments.length) return padAngle;
	      padAngle = d3_functor(v);
	      return arc;
	    };
	    arc.centroid = function() {
	      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
	      return [ Math.cos(a) * r, Math.sin(a) * r ];
	    };
	    return arc;
	  };
	  var d3_svg_arcAuto = "auto";
	  function d3_svg_arcInnerRadius(d) {
	    return d.innerRadius;
	  }
	  function d3_svg_arcOuterRadius(d) {
	    return d.outerRadius;
	  }
	  function d3_svg_arcStartAngle(d) {
	    return d.startAngle;
	  }
	  function d3_svg_arcEndAngle(d) {
	    return d.endAngle;
	  }
	  function d3_svg_arcPadAngle(d) {
	    return d && d.padAngle;
	  }
	  function d3_svg_arcSweep(x0, y0, x1, y1) {
	    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
	  }
	  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
	    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
	    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
	    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
	  }
	  function d3_svg_line(projection) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
	    function line(data) {
	      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
	      function segment() {
	        segments.push("M", interpolate(projection(points), tension));
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
	        } else if (points.length) {
	          segment();
	          points = [];
	        }
	      }
	      if (points.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    line.x = function(_) {
	      if (!arguments.length) return x;
	      x = _;
	      return line;
	    };
	    line.y = function(_) {
	      if (!arguments.length) return y;
	      y = _;
	      return line;
	    };
	    line.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return line;
	    };
	    line.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      return line;
	    };
	    line.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return line;
	    };
	    return line;
	  }
	  d3.svg.line = function() {
	    return d3_svg_line(d3_identity);
	  };
	  var d3_svg_lineInterpolators = d3.map({
	    linear: d3_svg_lineLinear,
	    "linear-closed": d3_svg_lineLinearClosed,
	    step: d3_svg_lineStep,
	    "step-before": d3_svg_lineStepBefore,
	    "step-after": d3_svg_lineStepAfter,
	    basis: d3_svg_lineBasis,
	    "basis-open": d3_svg_lineBasisOpen,
	    "basis-closed": d3_svg_lineBasisClosed,
	    bundle: d3_svg_lineBundle,
	    cardinal: d3_svg_lineCardinal,
	    "cardinal-open": d3_svg_lineCardinalOpen,
	    "cardinal-closed": d3_svg_lineCardinalClosed,
	    monotone: d3_svg_lineMonotone
	  });
	  d3_svg_lineInterpolators.forEach(function(key, value) {
	    value.key = key;
	    value.closed = /-closed$/.test(key);
	  });
	  function d3_svg_lineLinear(points) {
	    return points.length > 1 ? points.join("L") : points + "Z";
	  }
	  function d3_svg_lineLinearClosed(points) {
	    return points.join("L") + "Z";
	  }
	  function d3_svg_lineStep(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
	    if (n > 1) path.push("H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepBefore(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepAfter(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
	    return path.join("");
	  }
	  function d3_svg_lineCardinalOpen(points, tension) {
	    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineCardinalClosed(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
	    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
	  }
	  function d3_svg_lineCardinal(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineHermite(points, tangents) {
	    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
	      return d3_svg_lineLinear(points);
	    }
	    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
	    if (quad) {
	      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
	      p0 = points[1];
	      pi = 2;
	    }
	    if (tangents.length > 1) {
	      t = tangents[1];
	      p = points[pi];
	      pi++;
	      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      for (var i = 2; i < tangents.length; i++, pi++) {
	        p = points[pi];
	        t = tangents[i];
	        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      }
	    }
	    if (quad) {
	      var lp = points[pi];
	      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
	    }
	    return path;
	  }
	  function d3_svg_lineCardinalTangents(points, tension) {
	    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
	    while (++i < n) {
	      p0 = p1;
	      p1 = p2;
	      p2 = points[i];
	      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineBasis(points) {
	    if (points.length < 3) return d3_svg_lineLinear(points);
	    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    points.push(points[n - 1]);
	    while (++i <= n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    points.pop();
	    path.push("L", pi);
	    return path.join("");
	  }
	  function d3_svg_lineBasisOpen(points) {
	    if (points.length < 4) return d3_svg_lineLinear(points);
	    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
	    while (++i < 3) {
	      pi = points[i];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
	    --i;
	    while (++i < n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBasisClosed(points) {
	    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
	    while (++i < 4) {
	      pi = points[i % n];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    --i;
	    while (++i < m) {
	      pi = points[i % n];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBundle(points, tension) {
	    var n = points.length - 1;
	    if (n) {
	      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
	      while (++i <= n) {
	        p = points[i];
	        t = i / n;
	        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
	        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
	      }
	    }
	    return d3_svg_lineBasis(points);
	  }
	  function d3_svg_lineDot4(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	  }
	  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
	  function d3_svg_lineBasisBezier(path, x, y) {
	    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
	  }
	  function d3_svg_lineSlope(p0, p1) {
	    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
	  }
	  function d3_svg_lineFiniteDifferences(points) {
	    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
	    while (++i < j) {
	      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
	    }
	    m[i] = d;
	    return m;
	  }
	  function d3_svg_lineMonotoneTangents(points) {
	    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
	    while (++i < j) {
	      d = d3_svg_lineSlope(points[i], points[i + 1]);
	      if (abs(d) < ε) {
	        m[i] = m[i + 1] = 0;
	      } else {
	        a = m[i] / d;
	        b = m[i + 1] / d;
	        s = a * a + b * b;
	        if (s > 9) {
	          s = d * 3 / Math.sqrt(s);
	          m[i] = s * a;
	          m[i + 1] = s * b;
	        }
	      }
	    }
	    i = -1;
	    while (++i <= j) {
	      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
	      tangents.push([ s || 0, m[i] * s || 0 ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineMonotone(points) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
	  }
	  d3.svg.line.radial = function() {
	    var line = d3_svg_line(d3_svg_lineRadial);
	    line.radius = line.x, delete line.x;
	    line.angle = line.y, delete line.y;
	    return line;
	  };
	  function d3_svg_lineRadial(points) {
	    var point, i = -1, n = points.length, r, a;
	    while (++i < n) {
	      point = points[i];
	      r = point[0];
	      a = point[1] - halfπ;
	      point[0] = r * Math.cos(a);
	      point[1] = r * Math.sin(a);
	    }
	    return points;
	  }
	  function d3_svg_area(projection) {
	    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
	    function area(data) {
	      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
	        return x;
	      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
	        return y;
	      } : d3_functor(y1), x, y;
	      function segment() {
	        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
	          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
	        } else if (points0.length) {
	          segment();
	          points0 = [];
	          points1 = [];
	        }
	      }
	      if (points0.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    area.x = function(_) {
	      if (!arguments.length) return x1;
	      x0 = x1 = _;
	      return area;
	    };
	    area.x0 = function(_) {
	      if (!arguments.length) return x0;
	      x0 = _;
	      return area;
	    };
	    area.x1 = function(_) {
	      if (!arguments.length) return x1;
	      x1 = _;
	      return area;
	    };
	    area.y = function(_) {
	      if (!arguments.length) return y1;
	      y0 = y1 = _;
	      return area;
	    };
	    area.y0 = function(_) {
	      if (!arguments.length) return y0;
	      y0 = _;
	      return area;
	    };
	    area.y1 = function(_) {
	      if (!arguments.length) return y1;
	      y1 = _;
	      return area;
	    };
	    area.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return area;
	    };
	    area.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      interpolateReverse = interpolate.reverse || interpolate;
	      L = interpolate.closed ? "M" : "L";
	      return area;
	    };
	    area.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return area;
	    };
	    return area;
	  }
	  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
	  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
	  d3.svg.area = function() {
	    return d3_svg_area(d3_identity);
	  };
	  d3.svg.area.radial = function() {
	    var area = d3_svg_area(d3_svg_lineRadial);
	    area.radius = area.x, delete area.x;
	    area.innerRadius = area.x0, delete area.x0;
	    area.outerRadius = area.x1, delete area.x1;
	    area.angle = area.y, delete area.y;
	    area.startAngle = area.y0, delete area.y0;
	    area.endAngle = area.y1, delete area.y1;
	    return area;
	  };
	  d3.svg.chord = function() {
	    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
	    function chord(d, i) {
	      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
	      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
	    }
	    function subgroup(self, f, d, i) {
	      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
	      return {
	        r: r,
	        a0: a0,
	        a1: a1,
	        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
	        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
	      };
	    }
	    function equals(a, b) {
	      return a.a0 == b.a0 && a.a1 == b.a1;
	    }
	    function arc(r, p, a) {
	      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
	    }
	    function curve(r0, p0, r1, p1) {
	      return "Q 0,0 " + p1;
	    }
	    chord.radius = function(v) {
	      if (!arguments.length) return radius;
	      radius = d3_functor(v);
	      return chord;
	    };
	    chord.source = function(v) {
	      if (!arguments.length) return source;
	      source = d3_functor(v);
	      return chord;
	    };
	    chord.target = function(v) {
	      if (!arguments.length) return target;
	      target = d3_functor(v);
	      return chord;
	    };
	    chord.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return chord;
	    };
	    chord.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return chord;
	    };
	    return chord;
	  };
	  function d3_svg_chordRadius(d) {
	    return d.radius;
	  }
	  d3.svg.diagonal = function() {
	    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
	    function diagonal(d, i) {
	      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
	        x: p0.x,
	        y: m
	      }, {
	        x: p3.x,
	        y: m
	      }, p3 ];
	      p = p.map(projection);
	      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
	    }
	    diagonal.source = function(x) {
	      if (!arguments.length) return source;
	      source = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.target = function(x) {
	      if (!arguments.length) return target;
	      target = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.projection = function(x) {
	      if (!arguments.length) return projection;
	      projection = x;
	      return diagonal;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalProjection(d) {
	    return [ d.x, d.y ];
	  }
	  d3.svg.diagonal.radial = function() {
	    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
	    diagonal.projection = function(x) {
	      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalRadialProjection(projection) {
	    return function() {
	      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
	      return [ r * Math.cos(a), r * Math.sin(a) ];
	    };
	  }
	  d3.svg.symbol = function() {
	    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
	    function symbol(d, i) {
	      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
	    }
	    symbol.type = function(x) {
	      if (!arguments.length) return type;
	      type = d3_functor(x);
	      return symbol;
	    };
	    symbol.size = function(x) {
	      if (!arguments.length) return size;
	      size = d3_functor(x);
	      return symbol;
	    };
	    return symbol;
	  };
	  function d3_svg_symbolSize() {
	    return 64;
	  }
	  function d3_svg_symbolType() {
	    return "circle";
	  }
	  function d3_svg_symbolCircle(size) {
	    var r = Math.sqrt(size / π);
	    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
	  }
	  var d3_svg_symbols = d3.map({
	    circle: d3_svg_symbolCircle,
	    cross: function(size) {
	      var r = Math.sqrt(size / 5) / 2;
	      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
	    },
	    diamond: function(size) {
	      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
	      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
	    },
	    square: function(size) {
	      var r = Math.sqrt(size) / 2;
	      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
	    },
	    "triangle-down": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
	    },
	    "triangle-up": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
	    }
	  });
	  d3.svg.symbolTypes = d3_svg_symbols.keys();
	  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
	  d3_selectionPrototype.transition = function(name) {
	    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
	      time: Date.now(),
	      ease: d3_ease_cubicInOut,
	      delay: 0,
	      duration: 250
	    };
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_selectionPrototype.interrupt = function(name) {
	    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
	  };
	  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
	  function d3_selection_interruptNS(ns) {
	    return function() {
	      var lock, activeId, active;
	      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
	        active.timer.c = null;
	        active.timer.t = NaN;
	        if (--lock.count) delete lock[activeId]; else delete this[ns];
	        lock.active += .5;
	        active.event && active.event.interrupt.call(this, this.__data__, active.index);
	      }
	    };
	  }
	  function d3_transition(groups, ns, id) {
	    d3_subclass(groups, d3_transitionPrototype);
	    groups.namespace = ns;
	    groups.id = id;
	    return groups;
	  }
	  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
	  d3_transitionPrototype.call = d3_selectionPrototype.call;
	  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
	  d3_transitionPrototype.node = d3_selectionPrototype.node;
	  d3_transitionPrototype.size = d3_selectionPrototype.size;
	  d3.transition = function(selection, name) {
	    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
	  };
	  d3.transition.prototype = d3_transitionPrototype;
	  d3_transitionPrototype.select = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
	          if ("__data__" in node) subnode.__data__ = node.__data__;
	          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
	          subgroup.push(subnode);
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.selectAll = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          transition = node[ns][id];
	          subnodes = selector.call(node, node.__data__, i, j);
	          subgroups.push(subgroup = []);
	          for (var k = -1, o = subnodes.length; ++k < o; ) {
	            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
	            subgroup.push(subnode);
	          }
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_transition(subgroups, this.namespace, this.id);
	  };
	  d3_transitionPrototype.tween = function(name, tween) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
	    return d3_selection_each(this, tween == null ? function(node) {
	      node[ns][id].tween.remove(name);
	    } : function(node) {
	      node[ns][id].tween.set(name, tween);
	    });
	  };
	  function d3_transition_tween(groups, name, value, tween) {
	    var id = groups.id, ns = groups.namespace;
	    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
	    } : (value = tween(value), function(node) {
	      node[ns][id].tween.set(name, value);
	    }));
	  }
	  d3_transitionPrototype.attr = function(nameNS, value) {
	    if (arguments.length < 2) {
	      for (value in nameNS) this.attr(value, nameNS[value]);
	      return this;
	    }
	    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrTween(b) {
	      return b == null ? attrNull : (b += "", function() {
	        var a = this.getAttribute(name), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttribute(name, i(t));
	        });
	      });
	    }
	    function attrTweenNS(b) {
	      return b == null ? attrNullNS : (b += "", function() {
	        var a = this.getAttributeNS(name.space, name.local), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttributeNS(name.space, name.local, i(t));
	        });
	      });
	    }
	    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.attrTween = function(nameNS, tween) {
	    var name = d3.ns.qualify(nameNS);
	    function attrTween(d, i) {
	      var f = tween.call(this, d, i, this.getAttribute(name));
	      return f && function(t) {
	        this.setAttribute(name, f(t));
	      };
	    }
	    function attrTweenNS(d, i) {
	      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
	      return f && function(t) {
	        this.setAttributeNS(name.space, name.local, f(t));
	      };
	    }
	    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.style(priority, name[priority], value);
	        return this;
	      }
	      priority = "";
	    }
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleString(b) {
	      return b == null ? styleNull : (b += "", function() {
	        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
	        return a !== b && (i = d3_interpolate(a, b), function(t) {
	          this.style.setProperty(name, i(t), priority);
	        });
	      });
	    }
	    return d3_transition_tween(this, "style." + name, value, styleString);
	  };
	  d3_transitionPrototype.styleTween = function(name, tween, priority) {
	    if (arguments.length < 3) priority = "";
	    function styleTween(d, i) {
	      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
	      return f && function(t) {
	        this.style.setProperty(name, f(t), priority);
	      };
	    }
	    return this.tween("style." + name, styleTween);
	  };
	  d3_transitionPrototype.text = function(value) {
	    return d3_transition_tween(this, "text", value, d3_transition_text);
	  };
	  function d3_transition_text(b) {
	    if (b == null) b = "";
	    return function() {
	      this.textContent = b;
	    };
	  }
	  d3_transitionPrototype.remove = function() {
	    var ns = this.namespace;
	    return this.each("end.transition", function() {
	      var p;
	      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
	    });
	  };
	  d3_transitionPrototype.ease = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].ease;
	    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
	    return d3_selection_each(this, function(node) {
	      node[ns][id].ease = value;
	    });
	  };
	  d3_transitionPrototype.delay = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].delay;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].delay = +value.call(node, node.__data__, i, j);
	    } : (value = +value, function(node) {
	      node[ns][id].delay = value;
	    }));
	  };
	  d3_transitionPrototype.duration = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].duration;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
	    } : (value = Math.max(1, value), function(node) {
	      node[ns][id].duration = value;
	    }));
	  };
	  d3_transitionPrototype.each = function(type, listener) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) {
	      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
	      try {
	        d3_transitionInheritId = id;
	        d3_selection_each(this, function(node, i, j) {
	          d3_transitionInherit = node[ns][id];
	          type.call(node, node.__data__, i, j);
	        });
	      } finally {
	        d3_transitionInherit = inherit;
	        d3_transitionInheritId = inheritId;
	      }
	    } else {
	      d3_selection_each(this, function(node) {
	        var transition = node[ns][id];
	        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
	      });
	    }
	    return this;
	  };
	  d3_transitionPrototype.transition = function() {
	    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if (node = group[i]) {
	          transition = node[ns][id0];
	          d3_transitionNode(node, i, ns, id1, {
	            time: transition.time,
	            ease: transition.ease,
	            delay: transition.delay + transition.duration,
	            duration: transition.duration
	          });
	        }
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id1);
	  };
	  function d3_transitionNamespace(name) {
	    return name == null ? "__transition__" : "__transition_" + name + "__";
	  }
	  function d3_transitionNode(node, i, ns, id, inherit) {
	    var lock = node[ns] || (node[ns] = {
	      active: 0,
	      count: 0
	    }), transition = lock[id], time, timer, duration, ease, tweens;
	    function schedule(elapsed) {
	      var delay = transition.delay;
	      timer.t = delay + time;
	      if (delay <= elapsed) return start(elapsed - delay);
	      timer.c = start;
	    }
	    function start(elapsed) {
	      var activeId = lock.active, active = lock[activeId];
	      if (active) {
	        active.timer.c = null;
	        active.timer.t = NaN;
	        --lock.count;
	        delete lock[activeId];
	        active.event && active.event.interrupt.call(node, node.__data__, active.index);
	      }
	      for (var cancelId in lock) {
	        if (+cancelId < id) {
	          var cancel = lock[cancelId];
	          cancel.timer.c = null;
	          cancel.timer.t = NaN;
	          --lock.count;
	          delete lock[cancelId];
	        }
	      }
	      timer.c = tick;
	      d3_timer(function() {
	        if (timer.c && tick(elapsed || 1)) {
	          timer.c = null;
	          timer.t = NaN;
	        }
	        return 1;
	      }, 0, time);
	      lock.active = id;
	      transition.event && transition.event.start.call(node, node.__data__, i);
	      tweens = [];
	      transition.tween.forEach(function(key, value) {
	        if (value = value.call(node, node.__data__, i)) {
	          tweens.push(value);
	        }
	      });
	      ease = transition.ease;
	      duration = transition.duration;
	    }
	    function tick(elapsed) {
	      var t = elapsed / duration, e = ease(t), n = tweens.length;
	      while (n > 0) {
	        tweens[--n].call(node, e);
	      }
	      if (t >= 1) {
	        transition.event && transition.event.end.call(node, node.__data__, i);
	        if (--lock.count) delete lock[id]; else delete node[ns];
	        return 1;
	      }
	    }
	    if (!transition) {
	      time = inherit.time;
	      timer = d3_timer(schedule, 0, time);
	      transition = lock[id] = {
	        tween: new d3_Map(),
	        time: time,
	        timer: timer,
	        delay: inherit.delay,
	        duration: inherit.duration,
	        ease: inherit.ease,
	        index: i
	      };
	      inherit = null;
	      ++lock.count;
	    }
	  }
	  d3.svg.axis = function() {
	    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
	    function axis(g) {
	      g.each(function() {
	        var g = d3.select(this);
	        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
	        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
	        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
	        d3.transition(path));
	        tickEnter.append("line");
	        tickEnter.append("text");
	        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
	        if (orient === "bottom" || orient === "top") {
	          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
	          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
	          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
	        } else {
	          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
	          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
	          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
	        }
	        lineEnter.attr(y2, sign * innerTickSize);
	        textEnter.attr(y1, sign * tickSpacing);
	        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
	        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
	        if (scale1.rangeBand) {
	          var x = scale1, dx = x.rangeBand() / 2;
	          scale0 = scale1 = function(d) {
	            return x(d) + dx;
	          };
	        } else if (scale0.rangeBand) {
	          scale0 = scale1;
	        } else {
	          tickExit.call(tickTransform, scale1, scale0);
	        }
	        tickEnter.call(tickTransform, scale0, scale1);
	        tickUpdate.call(tickTransform, scale1, scale1);
	      });
	    }
	    axis.scale = function(x) {
	      if (!arguments.length) return scale;
	      scale = x;
	      return axis;
	    };
	    axis.orient = function(x) {
	      if (!arguments.length) return orient;
	      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
	      return axis;
	    };
	    axis.ticks = function() {
	      if (!arguments.length) return tickArguments_;
	      tickArguments_ = d3_array(arguments);
	      return axis;
	    };
	    axis.tickValues = function(x) {
	      if (!arguments.length) return tickValues;
	      tickValues = x;
	      return axis;
	    };
	    axis.tickFormat = function(x) {
	      if (!arguments.length) return tickFormat_;
	      tickFormat_ = x;
	      return axis;
	    };
	    axis.tickSize = function(x) {
	      var n = arguments.length;
	      if (!n) return innerTickSize;
	      innerTickSize = +x;
	      outerTickSize = +arguments[n - 1];
	      return axis;
	    };
	    axis.innerTickSize = function(x) {
	      if (!arguments.length) return innerTickSize;
	      innerTickSize = +x;
	      return axis;
	    };
	    axis.outerTickSize = function(x) {
	      if (!arguments.length) return outerTickSize;
	      outerTickSize = +x;
	      return axis;
	    };
	    axis.tickPadding = function(x) {
	      if (!arguments.length) return tickPadding;
	      tickPadding = +x;
	      return axis;
	    };
	    axis.tickSubdivide = function() {
	      return arguments.length && axis;
	    };
	    return axis;
	  };
	  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
	    top: 1,
	    right: 1,
	    bottom: 1,
	    left: 1
	  };
	  function d3_svg_axisX(selection, x0, x1) {
	    selection.attr("transform", function(d) {
	      var v0 = x0(d);
	      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
	    });
	  }
	  function d3_svg_axisY(selection, y0, y1) {
	    selection.attr("transform", function(d) {
	      var v0 = y0(d);
	      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
	    });
	  }
	  d3.svg.brush = function() {
	    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
	    function brush(g) {
	      g.each(function() {
	        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
	        var background = g.selectAll(".background").data([ 0 ]);
	        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
	        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
	        var resize = g.selectAll(".resize").data(resizes, d3_identity);
	        resize.exit().remove();
	        resize.enter().append("g").attr("class", function(d) {
	          return "resize " + d;
	        }).style("cursor", function(d) {
	          return d3_svg_brushCursor[d];
	        }).append("rect").attr("x", function(d) {
	          return /[ew]$/.test(d) ? -3 : null;
	        }).attr("y", function(d) {
	          return /^[ns]/.test(d) ? -3 : null;
	        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
	        resize.style("display", brush.empty() ? "none" : null);
	        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
	        if (x) {
	          range = d3_scaleRange(x);
	          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
	          redrawX(gUpdate);
	        }
	        if (y) {
	          range = d3_scaleRange(y);
	          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
	          redrawY(gUpdate);
	        }
	        redraw(gUpdate);
	      });
	    }
	    brush.event = function(g) {
	      g.each(function() {
	        var event_ = event.of(this, arguments), extent1 = {
	          x: xExtent,
	          y: yExtent,
	          i: xExtentDomain,
	          j: yExtentDomain
	        }, extent0 = this.__chart__ || extent1;
	        this.__chart__ = extent1;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.brush", function() {
	            xExtentDomain = extent0.i;
	            yExtentDomain = extent0.j;
	            xExtent = extent0.x;
	            yExtent = extent0.y;
	            event_({
	              type: "brushstart"
	            });
	          }).tween("brush:brush", function() {
	            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
	            xExtentDomain = yExtentDomain = null;
	            return function(t) {
	              xExtent = extent1.x = xi(t);
	              yExtent = extent1.y = yi(t);
	              event_({
	                type: "brush",
	                mode: "resize"
	              });
	            };
	          }).each("end.brush", function() {
	            xExtentDomain = extent1.i;
	            yExtentDomain = extent1.j;
	            event_({
	              type: "brush",
	              mode: "resize"
	            });
	            event_({
	              type: "brushend"
	            });
	          });
	        } else {
	          event_({
	            type: "brushstart"
	          });
	          event_({
	            type: "brush",
	            mode: "resize"
	          });
	          event_({
	            type: "brushend"
	          });
	        }
	      });
	    };
	    function redraw(g) {
	      g.selectAll(".resize").attr("transform", function(d) {
	        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
	      });
	    }
	    function redrawX(g) {
	      g.select(".extent").attr("x", xExtent[0]);
	      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
	    }
	    function redrawY(g) {
	      g.select(".extent").attr("y", yExtent[0]);
	      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
	    }
	    function brushstart() {
	      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
	      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
	      if (d3.event.changedTouches) {
	        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
	      } else {
	        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
	      }
	      g.interrupt().selectAll("*").interrupt();
	      if (dragging) {
	        origin[0] = xExtent[0] - origin[0];
	        origin[1] = yExtent[0] - origin[1];
	      } else if (resizing) {
	        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
	        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
	        origin[0] = xExtent[ex];
	        origin[1] = yExtent[ey];
	      } else if (d3.event.altKey) center = origin.slice();
	      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
	      d3.select("body").style("cursor", eventTarget.style("cursor"));
	      event_({
	        type: "brushstart"
	      });
	      brushmove();
	      function keydown() {
	        if (d3.event.keyCode == 32) {
	          if (!dragging) {
	            center = null;
	            origin[0] -= xExtent[1];
	            origin[1] -= yExtent[1];
	            dragging = 2;
	          }
	          d3_eventPreventDefault();
	        }
	      }
	      function keyup() {
	        if (d3.event.keyCode == 32 && dragging == 2) {
	          origin[0] += xExtent[1];
	          origin[1] += yExtent[1];
	          dragging = 0;
	          d3_eventPreventDefault();
	        }
	      }
	      function brushmove() {
	        var point = d3.mouse(target), moved = false;
	        if (offset) {
	          point[0] += offset[0];
	          point[1] += offset[1];
	        }
	        if (!dragging) {
	          if (d3.event.altKey) {
	            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
	            origin[0] = xExtent[+(point[0] < center[0])];
	            origin[1] = yExtent[+(point[1] < center[1])];
	          } else center = null;
	        }
	        if (resizingX && move1(point, x, 0)) {
	          redrawX(g);
	          moved = true;
	        }
	        if (resizingY && move1(point, y, 1)) {
	          redrawY(g);
	          moved = true;
	        }
	        if (moved) {
	          redraw(g);
	          event_({
	            type: "brush",
	            mode: dragging ? "move" : "resize"
	          });
	        }
	      }
	      function move1(point, scale, i) {
	        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
	        if (dragging) {
	          r0 -= position;
	          r1 -= size + position;
	        }
	        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
	        if (dragging) {
	          max = (min += position) + size;
	        } else {
	          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
	          if (position < min) {
	            max = min;
	            min = position;
	          } else {
	            max = position;
	          }
	        }
	        if (extent[0] != min || extent[1] != max) {
	          if (i) yExtentDomain = null; else xExtentDomain = null;
	          extent[0] = min;
	          extent[1] = max;
	          return true;
	        }
	      }
	      function brushend() {
	        brushmove();
	        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
	        d3.select("body").style("cursor", null);
	        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
	        dragRestore();
	        event_({
	          type: "brushend"
	        });
	      }
	    }
	    brush.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.clamp = function(z) {
	      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
	      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
	      return brush;
	    };
	    brush.extent = function(z) {
	      var x0, x1, y0, y1, t;
	      if (!arguments.length) {
	        if (x) {
	          if (xExtentDomain) {
	            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
	          } else {
	            x0 = xExtent[0], x1 = xExtent[1];
	            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
	            if (x1 < x0) t = x0, x0 = x1, x1 = t;
	          }
	        }
	        if (y) {
	          if (yExtentDomain) {
	            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
	          } else {
	            y0 = yExtent[0], y1 = yExtent[1];
	            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
	            if (y1 < y0) t = y0, y0 = y1, y1 = t;
	          }
	        }
	        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
	      }
	      if (x) {
	        x0 = z[0], x1 = z[1];
	        if (y) x0 = x0[0], x1 = x1[0];
	        xExtentDomain = [ x0, x1 ];
	        if (x.invert) x0 = x(x0), x1 = x(x1);
	        if (x1 < x0) t = x0, x0 = x1, x1 = t;
	        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
	      }
	      if (y) {
	        y0 = z[0], y1 = z[1];
	        if (x) y0 = y0[1], y1 = y1[1];
	        yExtentDomain = [ y0, y1 ];
	        if (y.invert) y0 = y(y0), y1 = y(y1);
	        if (y1 < y0) t = y0, y0 = y1, y1 = t;
	        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
	      }
	      return brush;
	    };
	    brush.clear = function() {
	      if (!brush.empty()) {
	        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
	        xExtentDomain = yExtentDomain = null;
	      }
	      return brush;
	    };
	    brush.empty = function() {
	      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
	    };
	    return d3.rebind(brush, event, "on");
	  };
	  var d3_svg_brushCursor = {
	    n: "ns-resize",
	    e: "ew-resize",
	    s: "ns-resize",
	    w: "ew-resize",
	    nw: "nwse-resize",
	    ne: "nesw-resize",
	    se: "nwse-resize",
	    sw: "nesw-resize"
	  };
	  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
	  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
	  var d3_time_formatUtc = d3_time_format.utc;
	  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
	  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
	  function d3_time_formatIsoNative(date) {
	    return date.toISOString();
	  }
	  d3_time_formatIsoNative.parse = function(string) {
	    var date = new Date(string);
	    return isNaN(date) ? null : date;
	  };
	  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
	  d3_time.second = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 1e3) * 1e3);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
	  }, function(date) {
	    return date.getSeconds();
	  });
	  d3_time.seconds = d3_time.second.range;
	  d3_time.seconds.utc = d3_time.second.utc.range;
	  d3_time.minute = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 6e4) * 6e4);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
	  }, function(date) {
	    return date.getMinutes();
	  });
	  d3_time.minutes = d3_time.minute.range;
	  d3_time.minutes.utc = d3_time.minute.utc.range;
	  d3_time.hour = d3_time_interval(function(date) {
	    var timezone = date.getTimezoneOffset() / 60;
	    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
	  }, function(date) {
	    return date.getHours();
	  });
	  d3_time.hours = d3_time.hour.range;
	  d3_time.hours.utc = d3_time.hour.utc.range;
	  d3_time.month = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setDate(1);
	    return date;
	  }, function(date, offset) {
	    date.setMonth(date.getMonth() + offset);
	  }, function(date) {
	    return date.getMonth();
	  });
	  d3_time.months = d3_time.month.range;
	  d3_time.months.utc = d3_time.month.utc.range;
	  function d3_time_scale(linear, methods, format) {
	    function scale(x) {
	      return linear(x);
	    }
	    scale.invert = function(x) {
	      return d3_time_scaleDate(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
	      linear.domain(x);
	      return scale;
	    };
	    function tickMethod(extent, count) {
	      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
	      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
	        return d / 31536e6;
	      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
	    }
	    scale.nice = function(interval, skip) {
	      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
	      if (method) interval = method[0], skip = method[1];
	      function skipped(date) {
	        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
	      }
	      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
	        floor: function(date) {
	          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
	          return date;
	        },
	        ceil: function(date) {
	          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
	          return date;
	        }
	      } : interval));
	    };
	    scale.ticks = function(interval, skip) {
	      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
	        range: interval
	      }, skip ];
	      if (method) interval = method[0], skip = method[1];
	      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
	    };
	    scale.tickFormat = function() {
	      return format;
	    };
	    scale.copy = function() {
	      return d3_time_scale(linear.copy(), methods, format);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_time_scaleDate(t) {
	    return new Date(t);
	  }
	  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
	  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
	  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
	    return d.getMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getHours();
	  } ], [ "%a %d", function(d) {
	    return d.getDay() && d.getDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getMonth();
	  } ], [ "%Y", d3_true ] ]);
	  var d3_time_scaleMilliseconds = {
	    range: function(start, stop, step) {
	      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
	    },
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  d3_time_scaleLocalMethods.year = d3_time.year;
	  d3_time.scale = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
	  };
	  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
	    return [ m[0].utc, m[1] ];
	  });
	  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
	    return d.getUTCMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getUTCSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getUTCMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getUTCHours();
	  } ], [ "%a %d", function(d) {
	    return d.getUTCDay() && d.getUTCDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getUTCDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getUTCMonth();
	  } ], [ "%Y", d3_true ] ]);
	  d3_time_scaleUtcMethods.year = d3_time.year.utc;
	  d3_time.scale.utc = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
	  };
	  d3.text = d3_xhrType(function(request) {
	    return request.responseText;
	  });
	  d3.json = function(url, callback) {
	    return d3_xhr(url, "application/json", d3_json, callback);
	  };
	  function d3_json(request) {
	    return JSON.parse(request.responseText);
	  }
	  d3.html = function(url, callback) {
	    return d3_xhr(url, "text/html", d3_html, callback);
	  };
	  function d3_html(request) {
	    var range = d3_document.createRange();
	    range.selectNode(d3_document.body);
	    return range.createContextualFragment(request.responseText);
	  }
	  d3.xml = d3_xhrType(function(request) {
	    return request.responseXML;
	  });
	  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
	}();

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var d3 = __webpack_require__(49);


	module.exports = {
	  /**
	   * Draw random circles.
	   */
	  drawRandomCircles: function(params) {
	    var svg = d3.select("svg");

	    // Calculate svg height from width.
	    var svgWidth = parseInt(svg.style("width"), 10);
	    var hwRatio = 1/2;
	    var svgHeight = svgWidth * hwRatio;
	    svg.attr("height", svgHeight);

	    // Calculate the space each table can take up in both x and y dimensions.
	    var tableSpace = svgWidth / 8
	    var tableRadius = tableSpace * 1/3;

	    var seats = [];
	    for (var i = 0; i < params.numCircles; i++) {
	      seats.push(i);
	    }

	    // Add the circle elements.
	    var circles = svg.selectAll("circle")
	      .data(seats)
	      .enter()
	      .append("circle")
	      .each(function(d, i) {
	        d3.select(this)
	          .attr("cx", Math.random() * svgWidth)
	          .attr("cy", Math.random() * svgHeight)
	          .attr("r", Math.random() * 30)
	          .attr("fill", "green");
	      });
	  },


	  updateRadiiRandomly: updateRadiiRandomly
	};


	/***********
	 * Helpers *
	 ***********/

	function updateRadiiRandomly() {
	  var svg = d3.select("svg");
	  var circles = svg.selectAll("circle")
	    .transition()
	    .duration(500)
	    .ease("linear")
	    .attr("r", function(d) {
	      return Math.random() * 30;
	    })
	    .each("end", function(d, i) {
	      if (i === 0) {
	        console.log("Starting over");
	        updateRadiiRandomly();
	      }
	    });
	}


/***/ }
/******/ ]);